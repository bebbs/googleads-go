// Code generated by gowsdl DO NOT EDIT.

package mobileapplication

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

//
// The reasons for the target error.
//

type MobileApplicationActionError_Reason string

const (

	//
	// The operation is not applicable to the current mobile application status.
	//
	MobileApplicationActionError_ReasonNOT_APPLICABLE MobileApplicationActionError_Reason = "NOT_APPLICABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	MobileApplicationActionError_ReasonUNKNOWN MobileApplicationActionError_Reason = "UNKNOWN"
)

//
// The approval status of the mobile application.
//

type MobileApplication_ApprovalStatus string

const (

	//
	// Unknown approval status.
	//
	MobileApplication_ApprovalStatusUNKNOWN MobileApplication_ApprovalStatus = "UNKNOWN"

	//
	// The application is not yet ready for review.
	//
	MobileApplication_ApprovalStatusDRAFT MobileApplication_ApprovalStatus = "DRAFT"

	//
	// The application has not yet been reviewed.
	//
	MobileApplication_ApprovalStatusUNCHECKED MobileApplication_ApprovalStatus = "UNCHECKED"

	//
	// The application can serve ads.
	//
	MobileApplication_ApprovalStatusAPPROVED MobileApplication_ApprovalStatus = "APPROVED"

	//
	// The application failed approval checks and it cannot serve any ads.
	//
	MobileApplication_ApprovalStatusDISAPPROVED MobileApplication_ApprovalStatus = "DISAPPROVED"

	//
	// The application is disapproved but has a pending review status, signaling an appeal.
	//
	MobileApplication_ApprovalStatusAPPEALING MobileApplication_ApprovalStatus = "APPEALING"
)

//
// The reasons for the {@link MobileApplication}.
//

type MobileApplicationError_Reason string

const (

	//
	// Could not find the ID of the app being claimed in any app stores.
	//
	MobileApplicationError_ReasonINVALID_APP_ID MobileApplicationError_Reason = "INVALID_APP_ID"

	//
	// Exchange partner settings were invalid.
	//
	MobileApplicationError_ReasonINVALID_EXCHANGE_PARTNER_SETTINGS MobileApplicationError_Reason = "INVALID_EXCHANGE_PARTNER_SETTINGS"

	//
	// API encountered an unexpected internal error.
	//
	MobileApplicationError_ReasonINTERNAL MobileApplicationError_Reason = "INTERNAL"

	//
	// At least one of app name or app store id must be set.
	//
	MobileApplicationError_ReasonNAME_OR_STORE_ID_MUST_BE_SET MobileApplicationError_Reason = "NAME_OR_STORE_ID_MUST_BE_SET"

	//
	// The number of active applications exceeds the max number allowed in the network.
	//
	MobileApplicationError_ReasonPUBLISHER_HAS_TOO_MANY_ACTIVE_APPS MobileApplicationError_Reason = "PUBLISHER_HAS_TOO_MANY_ACTIVE_APPS"

	//
	// Application store id fetched from the internal application catalog is too long.
	//
	MobileApplicationError_ReasonLINKED_APPLICATION_STORE_ID_TOO_LONG MobileApplicationError_Reason = "LINKED_APPLICATION_STORE_ID_TOO_LONG"

	//
	// Manually entered app name cannot be longer than 80 characters.
	//
	MobileApplicationError_ReasonMANUAL_APP_NAME_TOO_LONG MobileApplicationError_Reason = "MANUAL_APP_NAME_TOO_LONG"

	//
	// Manually entered app name cannot be empty.
	//
	MobileApplicationError_ReasonMANUAL_APP_NAME_EMPTY MobileApplicationError_Reason = "MANUAL_APP_NAME_EMPTY"

	//
	// Invalid combined product key from app store and store id combinations.
	//
	MobileApplicationError_ReasonINVALID_COMBINED_PRODUCT_KEY MobileApplicationError_Reason = "INVALID_COMBINED_PRODUCT_KEY"

	//
	// Only Android apps are eligible to skip for store id verification.
	//
	MobileApplicationError_ReasonLINKED_APP_SKIPPING_ID_VERIFICATION_MUST_BE_ANDROID_APP MobileApplicationError_Reason = "LINKED_APP_SKIPPING_ID_VERIFICATION_MUST_BE_ANDROID_APP"

	//
	// Linked app cannot be found.
	//
	MobileApplicationError_ReasonMISSING_APP_STORE_ENTRY MobileApplicationError_Reason = "MISSING_APP_STORE_ENTRY"

	//
	// Missing store entry.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_MISSING_STORE_ENTRY MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_MISSING_STORE_ENTRY"

	//
	// Store entry has an unspecified app store.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_INVALID_APP_STORE MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_INVALID_APP_STORE"

	//
	// Store entry has an empty store id.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_INVALID_STORE_ID MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_INVALID_STORE_ID"

	//
	// Store entry is not unique among publisher's active apps.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_NON_UNIQUE_STORE_ID MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_NON_UNIQUE_STORE_ID"

	//
	// App store id is not unique among publisher's active apps of the same platform.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_NON_UNIQUE_STORE_ID_WITHIN_PLATFORM MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_NON_UNIQUE_STORE_ID_WITHIN_PLATFORM"

	//
	// The Android package name format is invalid.
	//
	MobileApplicationError_ReasonCANNOT_SET_STORE_ID_INVALID_ANDROID_PACKAGE_NAME MobileApplicationError_Reason = "CANNOT_SET_STORE_ID_INVALID_ANDROID_PACKAGE_NAME"

	//
	// App store list should contain app stores from same platform.
	//
	MobileApplicationError_ReasonINCOMPATIBLE_APP_STORE_LIST MobileApplicationError_Reason = "INCOMPATIBLE_APP_STORE_LIST"

	//
	// App store list should not contain UNKNOWN app store.
	//
	MobileApplicationError_ReasonAPP_STORE_LIST_CANNOT_HAVE_UNKNOWN_APP_STORE MobileApplicationError_Reason = "APP_STORE_LIST_CANNOT_HAVE_UNKNOWN_APP_STORE"

	//
	// App store list should contain existing first party stores.
	//
	MobileApplicationError_ReasonAPP_STORE_LIST_CANNOT_REMOVE_FIRST_PARTY_APP_STORE MobileApplicationError_Reason = "APP_STORE_LIST_CANNOT_REMOVE_FIRST_PARTY_APP_STORE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	MobileApplicationError_ReasonUNKNOWN MobileApplicationError_Reason = "UNKNOWN"
)

//
// A platform a {@link MobileApplication} can run on.
//

type MobileApplicationPlatform string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	MobileApplicationPlatformUNKNOWN MobileApplicationPlatform = "UNKNOWN"

	MobileApplicationPlatformANDROID MobileApplicationPlatform = "ANDROID"

	MobileApplicationPlatformIOS MobileApplicationPlatform = "IOS"

	MobileApplicationPlatformROKU MobileApplicationPlatform = "ROKU"

	MobileApplicationPlatformAMAZON_FIRETV MobileApplicationPlatform = "AMAZON_FIRETV"

	MobileApplicationPlatformPLAYSTATION MobileApplicationPlatform = "PLAYSTATION"

	MobileApplicationPlatformXBOX MobileApplicationPlatform = "XBOX"

	MobileApplicationPlatformSAMSUNG_TV MobileApplicationPlatform = "SAMSUNG_TV"

	MobileApplicationPlatformLG_TV MobileApplicationPlatform = "LG_TV"
)

//
// A store a {@link MobileApplication} is available on.
//

type MobileApplicationStore string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	MobileApplicationStoreUNKNOWN MobileApplicationStore = "UNKNOWN"

	MobileApplicationStoreAPPLE_ITUNES MobileApplicationStore = "APPLE_ITUNES"

	MobileApplicationStoreGOOGLE_PLAY MobileApplicationStore = "GOOGLE_PLAY"

	MobileApplicationStoreROKU MobileApplicationStore = "ROKU"

	MobileApplicationStoreAMAZON_FIRETV MobileApplicationStore = "AMAZON_FIRETV"

	MobileApplicationStorePLAYSTATION MobileApplicationStore = "PLAYSTATION"

	MobileApplicationStoreXBOX MobileApplicationStore = "XBOX"

	MobileApplicationStoreSAMSUNG_TV MobileApplicationStore = "SAMSUNG_TV"

	MobileApplicationStoreAMAZON_APP_STORE MobileApplicationStore = "AMAZON_APP_STORE"

	MobileApplicationStoreOPPO_APP_STORE MobileApplicationStore = "OPPO_APP_STORE"

	MobileApplicationStoreSAMSUNG_APP_STORE MobileApplicationStore = "SAMSUNG_APP_STORE"

	MobileApplicationStoreVIVO_APP_STORE MobileApplicationStore = "VIVO_APP_STORE"

	MobileApplicationStoreXIAOMI_APP_STORE MobileApplicationStore = "XIAOMI_APP_STORE"

	MobileApplicationStoreLG_TV MobileApplicationStore = "LG_TV"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NullError_Reason string

const (
	NullError_ReasonNOT_NULL NullError_Reason = "NOT_NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NullError_ReasonUNKNOWN NullError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

type CreateMobileApplications struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createMobileApplications"`

	MobileApplications []*MobileApplication `xml:"mobileApplications,omitempty" json:"mobileApplications,omitempty"`
}

type CreateMobileApplicationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createMobileApplicationsResponse"`

	Rval []*MobileApplication `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetMobileApplicationsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getMobileApplicationsByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetMobileApplicationsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getMobileApplicationsByStatementResponse"`

	Rval *MobileApplicationPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformMobileApplicationAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performMobileApplicationAction"`

	MobileApplicationAction *MobileApplicationAction `xml:"mobileApplicationAction,omitempty" json:"mobileApplicationAction,omitempty"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type PerformMobileApplicationActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performMobileApplicationActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateMobileApplications struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateMobileApplications"`

	MobileApplications []*MobileApplication `xml:"mobileApplications,omitempty" json:"mobileApplications,omitempty"`
}

type UpdateMobileApplicationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateMobileApplicationsResponse"`

	Rval []*MobileApplication `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type UnarchiveMobileApplications struct {
	*MobileApplicationAction
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type ArchiveMobileApplications struct {
	*MobileApplicationAction
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type MobileApplicationAction struct {
}

type MobileApplicationActionError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *MobileApplicationActionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type MobileApplication struct {

	//
	// Uniquely identifies the mobile application. This attribute is read-only and is assigned by
	// Google when a mobile application is claimed.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// Uniquely identifies the mobile application. This attribute is read-only and is assigned by
	// Google when a mobile application is claimed. The {@link #id} field is being deprecated in favor
	// of this new ID space.
	//
	ApplicationId int64 `xml:"applicationId,omitempty" json:"applicationId,omitempty"`

	//
	// The display name of the mobile application. This attribute is required and has a maximum length
	// of 255 characters.
	//
	DisplayName string `xml:"displayName,omitempty" json:"displayName,omitempty"`

	//
	// The app store ID of the app to claim. This attribute is required for creation and then is
	// read-only.
	//
	AppStoreId string `xml:"appStoreId,omitempty" json:"appStoreId,omitempty"`

	//
	// The app stores the mobile application belongs to. This attribute is required for creation and
	// is mutable to allow for third party app store linking.
	//
	AppStores []*MobileApplicationStore `xml:"appStores,omitempty" json:"appStores,omitempty"`

	//
	// The archival status of the mobile application. This attribute is read-only.
	//
	IsArchived bool `xml:"isArchived,omitempty" json:"isArchived,omitempty"`

	//
	// The name of the application on the app store. This attribute is read-only and populated by
	// Google.
	//
	AppStoreName string `xml:"appStoreName,omitempty" json:"appStoreName,omitempty"`

	//
	// The application code used to identify the app in the SDK. This attribute is read-only and
	// populated by Google.
	//
	// <p>Note that the UI refers to this as "App ID".
	//
	ApplicationCode string `xml:"applicationCode,omitempty" json:"applicationCode,omitempty"`

	//
	// The name of the developer of the mobile application. This attribute is read-only and populated
	// by Google.
	//
	DeveloperName string `xml:"developerName,omitempty" json:"developerName,omitempty"`

	//
	// The platform the mobile application runs on. This attribute is read-only and populated by
	// Google.
	//
	Platform *MobileApplicationPlatform `xml:"platform,omitempty" json:"platform,omitempty"`

	//
	// Whether the mobile application is free on the app store it belongs to. This attribute is
	// read-only and populated by Google.
	//
	IsFree bool `xml:"isFree,omitempty" json:"isFree,omitempty"`

	//
	// The download URL of the mobile application on the app store it belongs to. This attribute is
	// read-only and populated by Google.
	//
	DownloadUrl string `xml:"downloadUrl,omitempty" json:"downloadUrl,omitempty"`

	//
	// The approval status for the mobile application.
	//
	ApprovalStatus *MobileApplication_ApprovalStatus `xml:"approvalStatus,omitempty" json:"approvalStatus,omitempty"`
}

type MobileApplicationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *MobileApplicationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type MobileApplicationPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of mobile applications contained within this page.
	//
	Results []*MobileApplication `xml:"results,omitempty" json:"results,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type UniqueError struct {
	*ApiError
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type _Value struct {
}

type MobileApplicationServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates and claims {@link MobileApplication mobile applications} to be used for targeting in
	   the network.
	*/
	CreateMobileApplications(request *CreateMobileApplications) (*CreateMobileApplicationsResponse, error)

	CreateMobileApplicationsContext(ctx context.Context, request *CreateMobileApplications) (*CreateMobileApplicationsResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link MobileApplicationPage mobileApplicationPage} of {@link MobileApplication mobile
	   applications} that satisfy the given {@link Statement}. The following fields are supported for
	   filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th>
	   <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link MobileApplication#id}</td>
	   </tr>
	   <tr>
	   <td>{@code displayName}</td>
	   <td>{@link MobileApplication#displayName}</td>
	   </tr>
	   <tr>
	   <td>{@code appStore}</td>
	   <td>{@link MobileApplication#appStore}</td>
	   </tr>
	   <tr>
	   <td>{@code appStoreId}</td>
	   <td>{@link MobileApplication#appStoreId}</td>
	   <tr/>
	   <tr>
	   <td>{@code isArchived}</td>
	   <td>{@link MobileApplication#isArchived}</td>
	   </tr>
	   </table>
	*/
	GetMobileApplicationsByStatement(request *GetMobileApplicationsByStatement) (*GetMobileApplicationsByStatementResponse, error)

	GetMobileApplicationsByStatementContext(ctx context.Context, request *GetMobileApplicationsByStatement) (*GetMobileApplicationsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs an action on {@link MobileApplication mobile applications}.
	*/
	PerformMobileApplicationAction(request *PerformMobileApplicationAction) (*PerformMobileApplicationActionResponse, error)

	PerformMobileApplicationActionContext(ctx context.Context, request *PerformMobileApplicationAction) (*PerformMobileApplicationActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link MobileApplication mobile applications}.
	*/
	UpdateMobileApplications(request *UpdateMobileApplications) (*UpdateMobileApplicationsResponse, error)

	UpdateMobileApplicationsContext(ctx context.Context, request *UpdateMobileApplications) (*UpdateMobileApplicationsResponse, error)
}

type mobileApplicationServiceInterface struct {
	client *soap.Client
}

func NewMobileApplicationServiceInterface(client *soap.Client) MobileApplicationServiceInterface {
	return &mobileApplicationServiceInterface{
		client: client,
	}
}

func (service *mobileApplicationServiceInterface) CreateMobileApplicationsContext(ctx context.Context, request *CreateMobileApplications) (*CreateMobileApplicationsResponse, error) {
	response := new(CreateMobileApplicationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mobileApplicationServiceInterface) CreateMobileApplications(request *CreateMobileApplications) (*CreateMobileApplicationsResponse, error) {
	return service.CreateMobileApplicationsContext(
		context.Background(),
		request,
	)
}

func (service *mobileApplicationServiceInterface) GetMobileApplicationsByStatementContext(ctx context.Context, request *GetMobileApplicationsByStatement) (*GetMobileApplicationsByStatementResponse, error) {
	response := new(GetMobileApplicationsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mobileApplicationServiceInterface) GetMobileApplicationsByStatement(request *GetMobileApplicationsByStatement) (*GetMobileApplicationsByStatementResponse, error) {
	return service.GetMobileApplicationsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *mobileApplicationServiceInterface) PerformMobileApplicationActionContext(ctx context.Context, request *PerformMobileApplicationAction) (*PerformMobileApplicationActionResponse, error) {
	response := new(PerformMobileApplicationActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mobileApplicationServiceInterface) PerformMobileApplicationAction(request *PerformMobileApplicationAction) (*PerformMobileApplicationActionResponse, error) {
	return service.PerformMobileApplicationActionContext(
		context.Background(),
		request,
	)
}

func (service *mobileApplicationServiceInterface) UpdateMobileApplicationsContext(ctx context.Context, request *UpdateMobileApplications) (*UpdateMobileApplicationsResponse, error) {
	response := new(UpdateMobileApplicationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *mobileApplicationServiceInterface) UpdateMobileApplications(request *UpdateMobileApplications) (*UpdateMobileApplicationsResponse, error) {
	return service.UpdateMobileApplicationsContext(
		context.Background(),
		request,
	)
}
