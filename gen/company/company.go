// Code generated by gowsdl DO NOT EDIT.

package company

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
// Status of the association between networks. When a parent network requests access, it is marked
// as pending. Once the child network approves, it is marked as approved.
//

type DelegationStatus string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DelegationStatusUNKNOWN DelegationStatus = "UNKNOWN"

	//
	// The association request from the parent network is approved by the child network.
	//
	DelegationStatusAPPROVED DelegationStatus = "APPROVED"

	//
	// The association request from the parent network is pending child network approval or rejection.
	//
	DelegationStatusPENDING DelegationStatus = "PENDING"

	//
	// The association request from the parent network is rejected or revoked by the child network.
	//
	DelegationStatusREJECTED DelegationStatus = "REJECTED"

	//
	// The association request from the parent network is withdrawn by the parent network.
	//
	DelegationStatusWITHDRAWN DelegationStatus = "WITHDRAWN"
)

//
// The type of delegation of the child network to the parent network in MCM.
//

type DelegationType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DelegationTypeUNKNOWN DelegationType = "UNKNOWN"

	//
	// The parent network gets complete access to the child network's account
	//
	DelegationTypeMANAGE_ACCOUNT DelegationType = "MANAGE_ACCOUNT"

	//
	// A subset of the ad requests from the child are delegated to the parent, determined by the tag
	// on the child network's web pages. The parent network does not have access to the child network,
	// as a subset of the inventory could be owned and operated by the child network.
	//
	DelegationTypeMANAGE_INVENTORY DelegationType = "MANAGE_INVENTORY"
)

//
// Status of the MCM child publisher's Ad Manager account with respect to delegated serving. In
// order for the child network to be served ads for MCM, it must have accepted the invite from the
// parent network, and must have passed Google's policy compliance verifications.
//

type AccountStatus string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AccountStatusUNKNOWN AccountStatus = "UNKNOWN"

	//
	// The child publisher has not acted on the invite from the parent.
	//
	AccountStatusINVITED AccountStatus = "INVITED"

	//
	// The child publisher has declined the invite.
	//
	AccountStatusDECLINED AccountStatus = "DECLINED"

	//
	// The child publisher has accepted the invite, and is awaiting Google's policy compliance
	// verifications.
	//
	AccountStatusPENDING_GOOGLE_APPROVAL AccountStatus = "PENDING_GOOGLE_APPROVAL"

	//
	// The child publisher accepted the invite, and Google found it to be compliant with its policies,
	// i.e. no policy violations were found, and the child publisher can be served ads.
	//
	AccountStatusAPPROVED AccountStatus = "APPROVED"

	//
	// The child publisher accepted the invite, but was disapproved by Google for violating its
	// policies.
	//
	AccountStatusCLOSED_POLICY_VIOLATION AccountStatus = "CLOSED_POLICY_VIOLATION"

	//
	// The child publisher accepted the invite, but was disapproved by Google for invalid activity.
	//
	AccountStatusCLOSED_INVALID_ACTIVITY AccountStatus = "CLOSED_INVALID_ACTIVITY"

	//
	// The child publisher has closed their own account.
	//
	AccountStatusCLOSED_BY_PUBLISHER AccountStatus = "CLOSED_BY_PUBLISHER"

	//
	// The child publisher accepted the invite, but was disapproved as ineligible by Google.
	//
	AccountStatusDISAPPROVED_INELIGIBLE AccountStatus = "DISAPPROVED_INELIGIBLE"

	//
	// The child publisher accepted the invite, but was disapproved by Google for being a duplicate of
	// another account.
	//
	AccountStatusDISAPPROVED_DUPLICATE_ACCOUNT AccountStatus = "DISAPPROVED_DUPLICATE_ACCOUNT"

	//
	// The invite was sent to the child publisher more than 90 days ago, due to which it has been
	// deactivated.
	//
	AccountStatusEXPIRED AccountStatus = "EXPIRED"

	//
	// Either the child publisher disconnected from the parent network, or the parent network withdrew
	// the invite.
	//
	AccountStatusINACTIVE AccountStatus = "INACTIVE"

	//
	// The association between the parent and child publishers was deactivated by Google Ad Manager.
	//
	AccountStatusDEACTIVATED_BY_AD_MANAGER AccountStatus = "DEACTIVATED_BY_AD_MANAGER"
)

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CompanyCreditStatusError_Reason string

const (

	//
	// The user's role does not have permission to change
	// {@link Company#creditStatus} from the default value. The default value is
	// {@link Company.CreditStatus#ACTIVE} for the Basic credit status setting
	// and {@link Company.CreditStatus#ON_HOLD} for the Advanced credit status
	// setting.
	//
	CompanyCreditStatusError_ReasonCOMPANY_CREDIT_STATUS_CHANGE_NOT_ALLOWED CompanyCreditStatusError_Reason = "COMPANY_CREDIT_STATUS_CHANGE_NOT_ALLOWED"

	//
	// The network has not been enabled for editing credit status settings for
	// companies.
	//
	CompanyCreditStatusError_ReasonCANNOT_USE_CREDIT_STATUS_SETTING CompanyCreditStatusError_Reason = "CANNOT_USE_CREDIT_STATUS_SETTING"

	//
	// The network has not been enabled for the Advanced credit status
	// settings for companies. {@link Company#creditStatus} must be either
	// {@code ACTIVE} or {@code INACTIVE}.
	//
	CompanyCreditStatusError_ReasonCANNOT_USE_ADVANCED_CREDIT_STATUS_SETTING CompanyCreditStatusError_Reason = "CANNOT_USE_ADVANCED_CREDIT_STATUS_SETTING"

	//
	// An order cannot be created or updated because the
	// {@link Order#advertiserId} or the {@link Order#agencyId} it is associated
	// with has {@link Company#creditStatus} that is not {@code ACTIVE} or
	// {@code ON_HOLD}.
	//
	CompanyCreditStatusError_ReasonUNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_ORDER CompanyCreditStatusError_Reason = "UNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_ORDER"

	//
	// A line item cannot be created for the order because the
	// {@link Order#advertiserId} or {Order#agencyId} it is associated with has
	// {@link Company#creditStatus} that is not {@code ACTIVE} or
	// {@code ON_HOLD}.
	//
	CompanyCreditStatusError_ReasonUNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_LINE_ITEM CompanyCreditStatusError_Reason = "UNACCEPTABLE_COMPANY_CREDIT_STATUS_FOR_LINE_ITEM"

	//
	// The company cannot be blocked because there are more than 200 approved
	// orders of the company. Archive some, so that there are less than 200 of
	// them.
	//
	CompanyCreditStatusError_ReasonCANNOT_BLOCK_COMPANY_TOO_MANY_APPROVED_ORDERS CompanyCreditStatusError_Reason = "CANNOT_BLOCK_COMPANY_TOO_MANY_APPROVED_ORDERS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyCreditStatusError_ReasonUNKNOWN CompanyCreditStatusError_Reason = "UNKNOWN"
)

//
// Specifies the credit-worthiness of the company for which the publisher runs an order. By doing
// so, the publisher can control the running of campaigns for the company. A publisher can choose
// between Basic and Advanced Credit Status settings. This feature needs to be enabled in the Ad
// Manager web site. Also the kind of setting you need - Basic or Advanced must be configured. If
// Basic is enabled then, the values allowed are {@code ACTIVE} and {@code INACTIVE}. If Advanced
// is chosen, then all values are allowed. Choosing an Advanced setting when only the Basic
// feature has been enabled, or using the Basic setting without turning the feature on will result
// in an error.
//

type Company_CreditStatus string

const (

	//
	// When the credit status is active, all line items in all orders belonging to the company will
	// be served. This is a Basic as well as an Advanced Credit Status setting.
	//
	Company_CreditStatusACTIVE Company_CreditStatus = "ACTIVE"

	//
	// When the credit status is on hold, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You can still create orders and line items for the company. This is an Advanced
	// Credit Status setting.
	//
	Company_CreditStatusON_HOLD Company_CreditStatus = "ON_HOLD"

	//
	// When the credit status is credit stop, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You cannot create any new orders or line items for the company. This is an Advanced
	// Credit Status setting.
	//
	Company_CreditStatusCREDIT_STOP Company_CreditStatus = "CREDIT_STOP"

	//
	// When the credit status is inactive, the publisher cannot activate new line items of the
	// company. However, line items that were activated before the credit status change will remain
	// active. You cannot create any new orders or line items for the company. It is used to mark
	// companies with which business is to be discontinued. Such companies are not listed in Ad
	// Manager web site. This is a Basic as well as an Advanced Credit Status setting.
	//
	Company_CreditStatusINACTIVE Company_CreditStatus = "INACTIVE"

	//
	// When the credit status of a company is marked blocked, then all active line items belonging
	// to the company will stop serving with immediate effect. You cannot active new line items of
	// the company nor can you create any new orders or line items belonging to the company. This is
	// an Advanced Credit Status setting.
	//
	Company_CreditStatusBLOCKED Company_CreditStatus = "BLOCKED"
)

//
// The type of the company. Once a company is created, it is not possible to change its type.
//

type Company_Type string

const (

	//
	// The publisher's own advertiser. When no outside advertiser buys its inventory, the publisher
	// may run its own advertising campaigns.
	//
	Company_TypeHOUSE_ADVERTISER Company_Type = "HOUSE_ADVERTISER"

	//
	// The publisher's own agency.
	//
	Company_TypeHOUSE_AGENCY Company_Type = "HOUSE_AGENCY"

	//
	// A business entity that buys publisher inventory to run advertising campaigns. An advertiser
	// is optionally associated with one or more agencies.
	//
	Company_TypeADVERTISER Company_Type = "ADVERTISER"

	//
	// A business entity that offers services, such as advertising creation, placement, and
	// management, to advertisers.
	//
	Company_TypeAGENCY Company_Type = "AGENCY"

	//
	// A company representing multiple advertisers and agencies.
	//
	Company_TypeAD_NETWORK Company_Type = "AD_NETWORK"

	//
	// A company representing a partner.
	//
	Company_TypePARTNER Company_Type = "PARTNER"

	//
	// A company representing a child network.
	//
	Company_TypeCHILD_PUBLISHER Company_Type = "CHILD_PUBLISHER"

	//
	// A company representing a viewability provider.
	//
	Company_TypeVIEWABILITY_PROVIDER Company_Type = "VIEWABILITY_PROVIDER"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	Company_TypeUNKNOWN Company_Type = "UNKNOWN"
)

//
// Enumerates all possible company specific errors.
//

type CompanyError_Reason string

const (

	//
	// Indicates that an attempt was made to set a third party company for a
	// company whose type is not the same as the third party company.
	//
	CompanyError_ReasonCANNOT_SET_THIRD_PARTY_COMPANY_DUE_TO_TYPE CompanyError_Reason = "CANNOT_SET_THIRD_PARTY_COMPANY_DUE_TO_TYPE"

	//
	// Indicates that an invalid attempt was made to change a company's type.
	//
	CompanyError_ReasonCANNOT_UPDATE_COMPANY_TYPE CompanyError_Reason = "CANNOT_UPDATE_COMPANY_TYPE"

	//
	// Indicates that this type of company is not supported.
	//
	CompanyError_ReasonINVALID_COMPANY_TYPE CompanyError_Reason = "INVALID_COMPANY_TYPE"

	//
	// Indicates that an attempt was made to assign a primary contact who
	// does not belong to the specified company.
	//
	CompanyError_ReasonPRIMARY_CONTACT_DOES_NOT_BELONG_TO_THIS_COMPANY CompanyError_Reason = "PRIMARY_CONTACT_DOES_NOT_BELONG_TO_THIS_COMPANY"

	//
	// Indicates that the user specified as the third party stats provider
	// is of the wrong role type.  The user must have the third party stats
	// provider role.
	//
	CompanyError_ReasonTHIRD_PARTY_STATS_PROVIDER_IS_WRONG_ROLE_TYPE CompanyError_Reason = "THIRD_PARTY_STATS_PROVIDER_IS_WRONG_ROLE_TYPE"

	//
	// Labels can only be applied to {@link Company.Type#ADVERTISER},
	// {@link Company.Type#HOUSE_ADVERTISER}, and {@link Company.Type#AD_NETWORK} company types.
	//
	CompanyError_ReasonINVALID_LABEL_ASSOCIATION CompanyError_Reason = "INVALID_LABEL_ASSOCIATION"

	//
	// Indicates that the {@link Company.Type} does not support default billing settings.
	//
	CompanyError_ReasonINVALID_COMPANY_TYPE_FOR_DEFAULT_BILLING_SETTING CompanyError_Reason = "INVALID_COMPANY_TYPE_FOR_DEFAULT_BILLING_SETTING"

	//
	// Indicates that the format of the default billing setting is wrong.
	//
	CompanyError_ReasonINVALID_DEFAULT_BILLING_SETTING CompanyError_Reason = "INVALID_DEFAULT_BILLING_SETTING"

	//
	// Cannot remove the cross selling config from a company that has active share assignments.
	//
	CompanyError_ReasonCOMPANY_HAS_ACTIVE_SHARE_ASSIGNMENTS CompanyError_Reason = "COMPANY_HAS_ACTIVE_SHARE_ASSIGNMENTS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyError_ReasonUNKNOWN CompanyError_Reason = "UNKNOWN"
)

//
// The reason of the error.
//

type CrossSellError_Reason string

const (

	//
	// A company for cross-sell partner must be of type {@link Company.Type#PARTNER}.
	//
	CrossSellError_ReasonCOMPANY_IS_NOT_DISTRIBUTION_PARTNER CrossSellError_Reason = "COMPANY_IS_NOT_DISTRIBUTION_PARTNER"

	//
	// The network code of a cross-sell partner cannot be changed.
	//
	CrossSellError_ReasonCHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED CrossSellError_Reason = "CHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED"

	//
	// A cross-sell partner must have a partner name.
	//
	CrossSellError_ReasonMISSING_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "MISSING_DISTRIBUTOR_PARTNER_NAME"

	//
	// The cross-sell distributor publisher feature must be enabled.
	//
	CrossSellError_ReasonDISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "DISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell publisher features must be enabled on the partner's network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell partner name conflicts with an ad unit name on the partner's network.
	//
	CrossSellError_ReasonINVALID_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "INVALID_DISTRIBUTOR_PARTNER_NAME"

	//
	// The network code of a cross-sell partner is invalid.
	//
	CrossSellError_ReasonINVALID_CONTENT_PROVIDER_NETWORK CrossSellError_Reason = "INVALID_CONTENT_PROVIDER_NETWORK"

	//
	// The content provider network must be different than the distributor network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK"

	//
	// The same network code was already enabled for cross-sell in a different company.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is an error.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_ERROR CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_ERROR"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is a warning.
	//
	// <p>By setting {@link LineItem#skipCrossSellingRuleWarningChecks}, the content partner can
	// suppress the warning (and create or save the line item).
	//
	// <p>This flag is available beginning in V201411.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_WARNING CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_WARNING"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CrossSellError_ReasonUNKNOWN CrossSellError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomFieldValueError_Reason string

const (

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_NOT_FOUND"

	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_INACTIVE CustomFieldValueError_Reason = "CUSTOM_FIELD_INACTIVE"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_OPTION_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueError_ReasonINVALID_ENTITY_TYPE CustomFieldValueError_Reason = "INVALID_ENTITY_TYPE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueError_ReasonUNKNOWN CustomFieldValueError_Reason = "UNKNOWN"
)

//
// Potential reasons for ExchangeSignupService errors
//

type ExchangeSignupApiError_Reason string

const (
	ExchangeSignupApiError_ReasonADSENSE_ACCOUNT_CREATION_ERROR ExchangeSignupApiError_Reason = "ADSENSE_ACCOUNT_CREATION_ERROR"

	ExchangeSignupApiError_ReasonADSENSE_ACCOUNT_ALREADY_HAS_EXCHANGE ExchangeSignupApiError_Reason = "ADSENSE_ACCOUNT_ALREADY_HAS_EXCHANGE"

	ExchangeSignupApiError_ReasonFAILED_TO_ADD_WEBSITE_TO_PROPERTY ExchangeSignupApiError_Reason = "FAILED_TO_ADD_WEBSITE_TO_PROPERTY"

	ExchangeSignupApiError_ReasonFAILED_TO_CREATE_LINK_FOR_NEW_ACCOUNT ExchangeSignupApiError_Reason = "FAILED_TO_CREATE_LINK_FOR_NEW_ACCOUNT"

	ExchangeSignupApiError_ReasonCANNOT_CREATE_NEW_ACCOUNT_FOR_MAPPED_CUSTOMER ExchangeSignupApiError_Reason = "CANNOT_CREATE_NEW_ACCOUNT_FOR_MAPPED_CUSTOMER"

	ExchangeSignupApiError_ReasonFAILED_TO_CREATE_EXCHANGE_SETTINGS ExchangeSignupApiError_Reason = "FAILED_TO_CREATE_EXCHANGE_SETTINGS"

	ExchangeSignupApiError_ReasonDUPLICATE_PRODUCT_TYPE ExchangeSignupApiError_Reason = "DUPLICATE_PRODUCT_TYPE"

	ExchangeSignupApiError_ReasonINVALID_SIGNUP_PRODUCT ExchangeSignupApiError_Reason = "INVALID_SIGNUP_PRODUCT"

	ExchangeSignupApiError_ReasonUNKNOWN_PRODUCT ExchangeSignupApiError_Reason = "UNKNOWN_PRODUCT"

	ExchangeSignupApiError_ReasonBAD_SITE_VERIFICATION_UPDATE_REQUEST ExchangeSignupApiError_Reason = "BAD_SITE_VERIFICATION_UPDATE_REQUEST"

	ExchangeSignupApiError_ReasonNO_EXCHANGE_ACCOUNT ExchangeSignupApiError_Reason = "NO_EXCHANGE_ACCOUNT"

	ExchangeSignupApiError_ReasonSINGLE_SYNDICATION_PRODUCT ExchangeSignupApiError_Reason = "SINGLE_SYNDICATION_PRODUCT"

	ExchangeSignupApiError_ReasonACCOUNT_NOT_YET_READY ExchangeSignupApiError_Reason = "ACCOUNT_NOT_YET_READY"

	ExchangeSignupApiError_ReasonMULTIPLE_ADSENSE_ACCOUNTS_NOT_ALLOWED ExchangeSignupApiError_Reason = "MULTIPLE_ADSENSE_ACCOUNTS_NOT_ALLOWED"

	ExchangeSignupApiError_ReasonMISSING_LEGAL_ENTITY_NAME ExchangeSignupApiError_Reason = "MISSING_LEGAL_ENTITY_NAME"

	ExchangeSignupApiError_ReasonMISSING_ACTIVE_BILLING_PROFILE ExchangeSignupApiError_Reason = "MISSING_ACTIVE_BILLING_PROFILE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ExchangeSignupApiError_ReasonUNKNOWN ExchangeSignupApiError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

//
// Describes reasons for an email to be invalid.
//

type InvalidEmailError_Reason string

const (

	//
	// The value is not a valid email address.
	//
	InvalidEmailError_ReasonINVALID_FORMAT InvalidEmailError_Reason = "INVALID_FORMAT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidEmailError_ReasonUNKNOWN InvalidEmailError_Reason = "UNKNOWN"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// Potential reasons for errors calling InventoryClient
//

type InventoryClientApiError_Reason string

const (
	InventoryClientApiError_ReasonACCESS_DENIED InventoryClientApiError_Reason = "ACCESS_DENIED"

	InventoryClientApiError_ReasonADSENSE_AUTH_ERROR InventoryClientApiError_Reason = "ADSENSE_AUTH_ERROR"

	InventoryClientApiError_ReasonADSENSE_RPC_ERROR InventoryClientApiError_Reason = "ADSENSE_RPC_ERROR"

	InventoryClientApiError_ReasonDOMAIN_NO_SCHEME InventoryClientApiError_Reason = "DOMAIN_NO_SCHEME"

	InventoryClientApiError_ReasonDOMAIN_INVALID_HOST InventoryClientApiError_Reason = "DOMAIN_INVALID_HOST"

	InventoryClientApiError_ReasonDOMAIN_INVALID_TLD InventoryClientApiError_Reason = "DOMAIN_INVALID_TLD"

	InventoryClientApiError_ReasonDOMAIN_ONE_STRING_AND_PUBLIC_SUFFIX InventoryClientApiError_Reason = "DOMAIN_ONE_STRING_AND_PUBLIC_SUFFIX"

	InventoryClientApiError_ReasonDOMAIN_INVALID_INPUT InventoryClientApiError_Reason = "DOMAIN_INVALID_INPUT"

	InventoryClientApiError_ReasonDOMAIN_NO_PUBLIC_SUFFIX InventoryClientApiError_Reason = "DOMAIN_NO_PUBLIC_SUFFIX"

	InventoryClientApiError_ReasonUNKNOWN_ERROR InventoryClientApiError_Reason = "UNKNOWN_ERROR"
)

//
// The reasons for the target error.
//

type LabelEntityAssociationError_Reason string

const (

	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION"

	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationError_ReasonINVALID_ASSOCIATION LabelEntityAssociationError_Reason = "INVALID_ASSOCIATION"

	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationError_ReasonNEGATION_NOT_ALLOWED LabelEntityAssociationError_Reason = "NEGATION_NOT_ALLOWED"

	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION_WITH_NEGATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationError_ReasonUNKNOWN LabelEntityAssociationError_Reason = "UNKNOWN"
)

//
// Possible reasons for {@link NetworkError}
//

type NetworkError_Reason string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NetworkError_ReasonUNKNOWN NetworkError_Reason = "UNKNOWN"

	//
	// Multi-currency support is not enabled for this network. This is an Ad Manager 360 feature.
	//
	NetworkError_ReasonMULTI_CURRENCY_NOT_SUPPORTED NetworkError_Reason = "MULTI_CURRENCY_NOT_SUPPORTED"

	//
	// Currency provided is not supported.
	//
	NetworkError_ReasonUNSUPPORTED_CURRENCY NetworkError_Reason = "UNSUPPORTED_CURRENCY"

	//
	// The network currency cannot also be specified as a secondary currency.
	//
	NetworkError_ReasonNETWORK_CURRENCY_CANNOT_BE_SAME_AS_SECONDARY NetworkError_Reason = "NETWORK_CURRENCY_CANNOT_BE_SAME_AS_SECONDARY"

	//
	// The currency cannot be deleted as it is still being used by active rate cards.
	//
	NetworkError_ReasonCANNOT_DELETE_CURRENCY_WITH_ACTIVE_RATE_CARDS NetworkError_Reason = "CANNOT_DELETE_CURRENCY_WITH_ACTIVE_RATE_CARDS"

	//
	// An MCM child network cannot become a parent network.
	//
	NetworkError_ReasonDELEGATION_CHILD_NETWORK_CANNOT_BECOME_A_PARENT NetworkError_Reason = "DELEGATION_CHILD_NETWORK_CANNOT_BECOME_A_PARENT"

	//
	// An MCM parent network cannot become a child of another network.
	//
	NetworkError_ReasonDELEGATION_PARENT_NETWORK_CANNOT_BECOME_A_CHILD NetworkError_Reason = "DELEGATION_PARENT_NETWORK_CANNOT_BECOME_A_CHILD"

	//
	// In MCM, a network cannot become a parent of itself.
	//
	NetworkError_ReasonCANNOT_ADD_SAME_NETWORK_AS_DELEGATION_CHILD NetworkError_Reason = "CANNOT_ADD_SAME_NETWORK_AS_DELEGATION_CHILD"

	//
	// The MCM parent network has exceeded the system limit of child networks.
	//
	NetworkError_ReasonMAX_APPROVED_DELEGATION_CHILD_NETWORKS_EXCEEDED NetworkError_Reason = "MAX_APPROVED_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	//
	// The MCM parent network has exceeded the system limit of child networks pending approval.
	//
	NetworkError_ReasonMAX_PENDING_DELEGATION_CHILD_NETWORKS_EXCEEDED NetworkError_Reason = "MAX_PENDING_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	//
	// The network is already being managed by the parent network for MCM.
	//
	NetworkError_ReasonCHILD_NETWORK_ALREADY_EXISTS NetworkError_Reason = "CHILD_NETWORK_ALREADY_EXISTS"

	//
	// A child network must not be disapproved.
	//
	NetworkError_ReasonCHILD_NETWORK_CANNOT_BE_DISAPPROVED NetworkError_Reason = "CHILD_NETWORK_CANNOT_BE_DISAPPROVED"

	//
	// Only Ad Manager 360 networks are allowed to manage the inventory of other networks.
	//
	NetworkError_ReasonIN_PARENT_DELEGATION_UNSUPPORTED_FOR_NETWORK NetworkError_Reason = "IN_PARENT_DELEGATION_UNSUPPORTED_FOR_NETWORK"

	//
	// When an MCM child network self-signsup for ad exchange but disconnects from the parent, then
	// tries to re-enable again, this indicates that there was an error in re-enabling ad exchange.
	//
	NetworkError_ReasonERROR_REENABLING_AD_EXCHANGE_ON_MCM_CHILD NetworkError_Reason = "ERROR_REENABLING_AD_EXCHANGE_ON_MCM_CHILD"

	//
	// The error shown when there is an issue setting the approved site serving field when
	// re-enabling or disabling ad exchange on an MCM child.
	//
	NetworkError_ReasonERROR_SETTING_SITE_SERVING_MODE_ON_MCM_CHILD NetworkError_Reason = "ERROR_SETTING_SITE_SERVING_MODE_ON_MCM_CHILD"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NullError_Reason string

const (
	NullError_ReasonNOT_NULL NullError_Reason = "NOT_NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NullError_ReasonUNKNOWN NullError_Reason = "UNKNOWN"
)

//
// Pending onboarding tasks for the child publishers that must completed before Google's policy
// compliance is verified.
//

type OnboardingTask string

const (
	OnboardingTaskUNKNOWN OnboardingTask = "UNKNOWN"

	//
	// Creation of the child publisher's payments billing profile.
	//
	OnboardingTaskBILLING_PROFILE_CREATION OnboardingTask = "BILLING_PROFILE_CREATION"

	//
	// Verification of the child publisher's phone number.
	//
	OnboardingTaskPHONE_PIN_VERIFICATION OnboardingTask = "PHONE_PIN_VERIFICATION"

	//
	// Setup of the child publisher's Ad Manager account.
	//
	OnboardingTaskAD_MANAGER_ACCOUNT_SETUP OnboardingTask = "AD_MANAGER_ACCOUNT_SETUP"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

//
// The reasons for the target error.
//

type RegExError_Reason string

const (

	//
	// Invalid value found.
	//
	RegExError_ReasonINVALID RegExError_Reason = "INVALID"

	//
	// Null value found.
	//
	RegExError_ReasonNULL RegExError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RegExError_ReasonUNKNOWN RegExError_Reason = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type SiteError_Reason string

const (

	//
	// The network code must belong to an MCM child network.
	//
	SiteError_ReasonINVALID_CHILD_NETWORK_CODE SiteError_Reason = "INVALID_CHILD_NETWORK_CODE"

	//
	// Archive all subsites before archiving the site.
	//
	SiteError_ReasonCANNOT_ARCHIVE_SITE_WITH_SUBSITES SiteError_Reason = "CANNOT_ARCHIVE_SITE_WITH_SUBSITES"

	//
	// The URL is invalid for a top-level site.
	//
	SiteError_ReasonINVALID_URL_FOR_SITE SiteError_Reason = "INVALID_URL_FOR_SITE"

	//
	// The batch of sites could not be updated because the same site was updated multiple times in
	// the batch.
	//
	SiteError_ReasonMULTIPLE_UPDATES_FOR_SAME_SITE SiteError_Reason = "MULTIPLE_UPDATES_FOR_SAME_SITE"

	//
	// Too many sites in the request to submit them for review.
	//
	SiteError_ReasonTOO_MANY_SITES_PER_REVIEW_REQUEST SiteError_Reason = "TOO_MANY_SITES_PER_REVIEW_REQUEST"

	//
	// The site has been submitted for review too many times.
	//
	SiteError_ReasonTOO_MANY_REVIEW_REQUESTS_FOR_SITE SiteError_Reason = "TOO_MANY_REVIEW_REQUESTS_FOR_SITE"

	//
	// Only sites with approval status {@link ApprovalStatus#DRAFT}, {@link
	// ApprovalStatus#DISAPPROVED} and {@link ApprovalStatus#REQUIRES_REVIEW} can be submitted for
	// review.
	//
	SiteError_ReasonINVALID_APPROVAL_STATUS_FOR_REVIEW SiteError_Reason = "INVALID_APPROVAL_STATUS_FOR_REVIEW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SiteError_ReasonUNKNOWN SiteError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type TeamError_Reason string

const (

	//
	// User cannot use this entity because it is not on any of the user's teams.
	//
	TeamError_ReasonENTITY_NOT_ON_USERS_TEAMS TeamError_Reason = "ENTITY_NOT_ON_USERS_TEAMS"

	//
	// The targeted or excluded ad unit must be on the order's teams.
	//
	TeamError_ReasonAD_UNITS_NOT_ON_ORDER_TEAMS TeamError_Reason = "AD_UNITS_NOT_ON_ORDER_TEAMS"

	//
	// The targeted placement must be on the order's teams.
	//
	TeamError_ReasonPLACEMENTS_NOT_ON_ORDER_TEAMS TeamError_Reason = "PLACEMENTS_NOT_ON_ORDER_TEAMS"

	//
	// Entity cannot be created because it is not on any of the user's teams.
	//
	TeamError_ReasonMISSING_USERS_TEAM TeamError_Reason = "MISSING_USERS_TEAM"

	//
	// A team that gives access to all entities of a given type cannot be
	// associated with an entity of that type.
	//
	TeamError_ReasonALL_TEAM_ASSOCIATION_NOT_ALLOWED TeamError_Reason = "ALL_TEAM_ASSOCIATION_NOT_ALLOWED"

	//
	// The assignment of team to entities is invalid.
	//
	TeamError_ReasonINVALID_TEAM_ASSIGNMENT TeamError_Reason = "INVALID_TEAM_ASSIGNMENT"

	//
	// Cannot modify or create a team with an inactive status.
	//
	TeamError_ReasonCANNOT_UPDATE_INACTIVE_TEAM TeamError_Reason = "CANNOT_UPDATE_INACTIVE_TEAM"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TeamError_ReasonUNKNOWN TeamError_Reason = "UNKNOWN"
)

type CreateCompanies struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCompanies"`

	Companies []*Company `xml:"companies,omitempty" json:"companies,omitempty"`
}

type CreateCompaniesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCompaniesResponse"`

	Rval []*Company `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetCompaniesByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCompaniesByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetCompaniesByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCompaniesByStatementResponse"`

	Rval *CompanyPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformCompanyAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCompanyAction"`

	CompanyAction *CompanyAction `xml:"companyAction,omitempty" json:"companyAction,omitempty"`

	Statement *Statement `xml:"statement,omitempty" json:"statement,omitempty"`
}

type PerformCompanyActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCompanyActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateCompanies struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCompanies"`

	Companies []*Company `xml:"companies,omitempty" json:"companies,omitempty"`
}

type UpdateCompaniesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCompaniesResponse"`

	Rval []*Company `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type ChildPublisher struct {

	//
	// Type of delegation the parent has been approved to have over the child. This field is
	// read-only, and set to the proposed delegation type value {@code proposedDelegationType} upon
	// approval by the child network. The value remains null if the parent network has not been
	// approved.
	//
	ApprovedDelegationType *DelegationType `xml:"approvedDelegationType,omitempty" json:"approvedDelegationType,omitempty"`

	//
	// Type of delegation the parent has proposed to have over the child, pending approval of the
	// child network. Set the value of this field to the delegation type you intend this network to
	// have over the child network. Upon approval by the child network, its value is copied to {@code
	// approvedDelegationType}, and {@code proposedDelegationType} is set to null.
	//
	ProposedDelegationType *DelegationType `xml:"proposedDelegationType,omitempty" json:"proposedDelegationType,omitempty"`

	//
	// Status of the delegation relationship between parent and child.
	//
	Status *DelegationStatus `xml:"status,omitempty" json:"status,omitempty"`

	//
	// Status of the child publisher's Ad Manager account based on {@code ChildPublisher#status} as
	// well as Google's policy verification results. This field is read-only.
	//
	AccountStatus *AccountStatus `xml:"accountStatus,omitempty" json:"accountStatus,omitempty"`

	//
	// Network code of child network.
	//
	ChildNetworkCode string `xml:"childNetworkCode,omitempty" json:"childNetworkCode,omitempty"`

	//
	// The child publisher's seller ID, as specified in the parent publisher's sellers.json file.
	//
	// <p>This field is only relevant for Manage Inventory child publishers.
	//
	SellerId string `xml:"sellerId,omitempty" json:"sellerId,omitempty"`

	//
	// The proposed revenue share that the parent publisher will receive in millipercentage (values 0
	// to 100000) for Manage Account proposals. For example, 15% is 15000 millipercent.
	//
	// <p>For updates, this field is read-only. Use company actions to propose new revenue share
	// agreements for existing MCM children. This field is ignored for Manage Inventory proposals.
	//
	ProposedRevenueShareMillipercent int64 `xml:"proposedRevenueShareMillipercent,omitempty" json:"proposedRevenueShareMillipercent,omitempty"`

	//
	// The child publisher's pending onboarding tasks.
	//
	// <p>This will only be populated if the child publisher's {@code AccountStatus} is {@code
	// PENDING_GOOGLE_APPROVAL}.
	// This attribute is read-only.
	//
	OnboardingTasks []*OnboardingTask `xml:"onboardingTasks,omitempty" json:"onboardingTasks,omitempty"`
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AppliedLabel struct {

	//
	// The ID of a created {@link Label}.
	//
	LabelId int64 `xml:"labelId,omitempty" json:"labelId,omitempty"`

	//
	// {@code isNegated} should be set to {@code true} to negate the effects of {@code labelId}.
	//
	IsNegated bool `xml:"isNegated,omitempty" json:"isNegated,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CompanyAction struct {
}

type CompanyCreditStatusError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CompanyCreditStatusError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Company struct {

	//
	// Uniquely identifies the {@code Company}. This value is read-only and is assigned by Google when
	// the company is created. This attribute is required for updates.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The full name of the company. This attribute is required and has a maximum length of 127
	// characters.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// Specifies what kind of company this is. This attribute is required.
	//
	Type_ *Company_Type `xml:"type,omitempty" json:"type,omitempty"`

	//
	// Specifies the address of the company. This attribute is optional and has a maximum length of
	// 1024 characters.
	//
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	//
	// Specifies the email of the company. This attribute is optional and has a maximum length of 128
	// characters.
	//
	Email string `xml:"email,omitempty" json:"email,omitempty"`

	//
	// Specifies the fax phone number of the company. This attribute is optional and has a maximum
	// length of 63 characters.
	//
	FaxPhone string `xml:"faxPhone,omitempty" json:"faxPhone,omitempty"`

	//
	// Specifies the primary phone number of the company. This attribute is optional and has a maximum
	// length of 63 characters.
	//
	PrimaryPhone string `xml:"primaryPhone,omitempty" json:"primaryPhone,omitempty"`

	//
	// Specifies the external ID of the company. This attribute is optional and has a maximum length
	// of 255 characters.
	//
	ExternalId string `xml:"externalId,omitempty" json:"externalId,omitempty"`

	//
	// Specifies the comment of the company. This attribute is optional and has a maximum length of
	// 1024 characters.
	//
	Comment string `xml:"comment,omitempty" json:"comment,omitempty"`

	//
	// Specifies the company's credit status. This attribute is optional and defaults to {@link
	// CreditStatus#ACTIVE} when basic credit status settings are enabled, and {@link
	// CreditStatus#ON_HOLD} when advanced credit status settings are enabled.
	//
	CreditStatus *Company_CreditStatus `xml:"creditStatus,omitempty" json:"creditStatus,omitempty"`

	//
	// The set of labels applied to this company.
	//
	AppliedLabels []*AppliedLabel `xml:"appliedLabels,omitempty" json:"appliedLabels,omitempty"`

	//
	// The ID of the {@link Contact} who is acting as the primary contact for this company. This
	// attribute is optional.
	//
	PrimaryContactId int64 `xml:"primaryContactId,omitempty" json:"primaryContactId,omitempty"`

	//
	// The IDs of all teams that this company is on directly.
	//
	AppliedTeamIds []int64 `xml:"appliedTeamIds,omitempty" json:"appliedTeamIds,omitempty"`

	//
	// Specifies the ID of the Google-recognized canonicalized form of this company. This attribute is
	// optional.
	//
	ThirdPartyCompanyId int32 `xml:"thirdPartyCompanyId,omitempty" json:"thirdPartyCompanyId,omitempty"`

	//
	// The date and time this company was last modified.
	//
	LastModifiedDateTime soap.XSDDateTime `xml:"lastModifiedDateTime,omitempty" json:"lastModifiedDateTime,omitempty"`

	//
	// Info required for when Company Type is CHILD_PUBLISHER.
	//
	ChildPublisher *ChildPublisher `xml:"childPublisher,omitempty" json:"childPublisher,omitempty"`

	//
	// Info required for when Company Type is VIEWABILITY_PROVIDER.
	//
	ViewabilityProvider *ViewabilityProvider `xml:"viewabilityProvider,omitempty" json:"viewabilityProvider,omitempty"`
}

type CompanyError struct {
	*ApiError

	Reason *CompanyError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CompanyPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of companies contained within this page.
	//
	Results []*Company `xml:"results,omitempty" json:"results,omitempty"`
}

type CrossSellError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CrossSellError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomFieldValueError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomFieldValueError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type ReInviteAction struct {
	*CompanyAction

	//
	// The type of delegation the parent has proposed to have over the child, pending approval of the
	// child publisher.
	//
	ProposedDelegationType *DelegationType `xml:"proposedDelegationType,omitempty" json:"proposedDelegationType,omitempty"`

	//
	// The proposed revenue share that the parent publisher will receive in millipercentage (values 0
	// to 100000) for Manage Account proposals. For example, 15% is 15000 millipercent.
	//
	// <p>This field is ignored for Manage Inventory proposals.
	//
	ProposedRevenueShareMillipercent int64 `xml:"proposedRevenueShareMillipercent,omitempty" json:"proposedRevenueShareMillipercent,omitempty"`

	//
	// The updated email of the child publisher.
	//
	// <p>This field is optional. If set, the scoping statement many not evaluate to more than one
	// rejected or withdrawn child publisher.
	//
	ProposedEmail string `xml:"proposedEmail,omitempty" json:"proposedEmail,omitempty"`
}

type EndAgreementAction struct {
	*CompanyAction
}

type ExchangeSignupApiError struct {
	*ApiError

	Reason *ExchangeSignupApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidEmailError struct {
	*ApiError

	Reason *InvalidEmailError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InventoryClientApiError struct {
	*ApiError

	Reason *InventoryClientApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelEntityAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LabelEntityAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NetworkError struct {
	*ApiError

	Reason *NetworkError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RegExError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RegExError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ResendInvitationAction struct {
	*CompanyAction
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type SiteError struct {
	*ApiError

	Reason *SiteError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type TeamError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *TeamError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type _Value struct {
}

type ViewabilityProvider struct {

	//
	// The key for this ad verification vendor.
	//
	VendorKey string `xml:"vendorKey,omitempty" json:"vendorKey,omitempty"`

	//
	// The URL that hosts the verification script for this vendor.
	//
	VerificationScriptUrl string `xml:"verificationScriptUrl,omitempty" json:"verificationScriptUrl,omitempty"`

	//
	// The parameters that will be passed to the verification script.
	//
	VerificationParameters string `xml:"verificationParameters,omitempty" json:"verificationParameters,omitempty"`

	//
	// The URL that should be pinged if the verification script cannot be run.
	//
	VerificationRejectionTrackerUrl string `xml:"verificationRejectionTrackerUrl,omitempty" json:"verificationRejectionTrackerUrl,omitempty"`
}

type CompanyServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates new {@link Company} objects.
	*/
	CreateCompanies(request *CreateCompanies) (*CreateCompaniesResponse, error)

	CreateCompaniesContext(ctx context.Context, request *CreateCompanies) (*CreateCompaniesResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link CompanyPage} of {@link Company} objects that satisfy the given {@link
	   Statement#query}. The following fields are supported for filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link Company#id}</td>
	   </tr>
	   <tr>
	   <td>{@code name}</td>
	   <td>{@link Company#name}</td>
	   </tr>
	   <tr>
	   <td>{@code type}</td>
	   <td>{@link Company#type}</td>
	   </tr>
	   <tr>
	   <td>{@code lastModifiedDateTime}</td>
	   <td>{@link Company#lastModifiedDateTime}</td>
	   </tr>
	   </table>
	*/
	GetCompaniesByStatement(request *GetCompaniesByStatement) (*GetCompaniesByStatementResponse, error)

	GetCompaniesByStatementContext(ctx context.Context, request *GetCompaniesByStatement) (*GetCompaniesByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs actions on {@link Company} objects that match the given {@code Statement}.
	*/
	PerformCompanyAction(request *PerformCompanyAction) (*PerformCompanyActionResponse, error)

	PerformCompanyActionContext(ctx context.Context, request *PerformCompanyAction) (*PerformCompanyActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link Company} objects.
	*/
	UpdateCompanies(request *UpdateCompanies) (*UpdateCompaniesResponse, error)

	UpdateCompaniesContext(ctx context.Context, request *UpdateCompanies) (*UpdateCompaniesResponse, error)
}

type companyServiceInterface struct {
	client *soap.Client
}

func NewCompanyServiceInterface(client *soap.Client) CompanyServiceInterface {
	return &companyServiceInterface{
		client: client,
	}
}

func (service *companyServiceInterface) CreateCompaniesContext(ctx context.Context, request *CreateCompanies) (*CreateCompaniesResponse, error) {
	response := new(CreateCompaniesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *companyServiceInterface) CreateCompanies(request *CreateCompanies) (*CreateCompaniesResponse, error) {
	return service.CreateCompaniesContext(
		context.Background(),
		request,
	)
}

func (service *companyServiceInterface) GetCompaniesByStatementContext(ctx context.Context, request *GetCompaniesByStatement) (*GetCompaniesByStatementResponse, error) {
	response := new(GetCompaniesByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *companyServiceInterface) GetCompaniesByStatement(request *GetCompaniesByStatement) (*GetCompaniesByStatementResponse, error) {
	return service.GetCompaniesByStatementContext(
		context.Background(),
		request,
	)
}

func (service *companyServiceInterface) PerformCompanyActionContext(ctx context.Context, request *PerformCompanyAction) (*PerformCompanyActionResponse, error) {
	response := new(PerformCompanyActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *companyServiceInterface) PerformCompanyAction(request *PerformCompanyAction) (*PerformCompanyActionResponse, error) {
	return service.PerformCompanyActionContext(
		context.Background(),
		request,
	)
}

func (service *companyServiceInterface) UpdateCompaniesContext(ctx context.Context, request *UpdateCompanies) (*UpdateCompaniesResponse, error) {
	response := new(UpdateCompaniesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *companyServiceInterface) UpdateCompanies(request *UpdateCompanies) (*UpdateCompaniesResponse, error) {
	return service.UpdateCompaniesContext(
		context.Background(),
		request,
	)
}
