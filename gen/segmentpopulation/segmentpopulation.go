// Code generated by gowsdl DO NOT EDIT.

package segmentpopulation

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

type CommonError_Reason string

const (
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

type ConsentType string

const (
	ConsentTypeUNSET ConsentType = "UNSET"

	ConsentTypeGRANTED ConsentType = "GRANTED"

	ConsentTypeDENIED ConsentType = "DENIED"

	ConsentTypeUNKNOWN ConsentType = "UNKNOWN"
)

type FeatureError_Reason string

const (
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type IdError_IdErrorType string

const (
	IdError_IdErrorTypeINVALID_PUBLISHER_PROVIDED_ID_FORMAT IdError_IdErrorType = "INVALID_PUBLISHER_PROVIDED_ID_FORMAT"

	IdError_IdErrorTypeUNKNOWN IdError_IdErrorType = "UNKNOWN"
)

type IdentifierType string

const (
	IdentifierTypePUBLISHER_PROVIDED_IDENTIFIER IdentifierType = "PUBLISHER_PROVIDED_IDENTIFIER"

	IdentifierTypeUNKNOWN IdentifierType = "UNKNOWN"
)

type InternalApiError_Reason string

const (
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type NotNullError_Reason string

const (
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

type ParseError_Reason string

const (
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

type PermissionError_Reason string

const (
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

type PublisherQueryLanguageContextError_Reason string

const (
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

type PublisherQueryLanguageSyntaxError_Reason string

const (
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RequiredCollectionError_Reason string

const (
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

type RequiredError_Reason string

const (
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

type SegmentPopulationError_Reason string

const (
	SegmentPopulationError_ReasonTOO_MANY_IDENTIFIERS SegmentPopulationError_Reason = "TOO_MANY_IDENTIFIERS"

	SegmentPopulationError_ReasonINVALID_SEGMENT SegmentPopulationError_Reason = "INVALID_SEGMENT"

	SegmentPopulationError_ReasonJOB_ALREADY_STARTED SegmentPopulationError_Reason = "JOB_ALREADY_STARTED"

	SegmentPopulationError_ReasonNO_IDENTIFIERS SegmentPopulationError_Reason = "NO_IDENTIFIERS"

	SegmentPopulationError_ReasonNO_CONSENT SegmentPopulationError_Reason = "NO_CONSENT"

	SegmentPopulationError_ReasonUNKNOWN SegmentPopulationError_Reason = "UNKNOWN"
)

type SegmentPopulationStatus string

const (
	SegmentPopulationStatusFAILED SegmentPopulationStatus = "FAILED"

	SegmentPopulationStatusSUCCESS SegmentPopulationStatus = "SUCCESS"

	SegmentPopulationStatusPROCESSING SegmentPopulationStatus = "PROCESSING"

	SegmentPopulationStatusPREPARING SegmentPopulationStatus = "PREPARING"

	SegmentPopulationStatusEXPIRED SegmentPopulationStatus = "EXPIRED"

	SegmentPopulationStatusUNKNOWN SegmentPopulationStatus = "UNKNOWN"
)

type ServerError_Reason string

const (
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

type GetSegmentPopulationResultsByIds struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getSegmentPopulationResultsByIds"`

	BatchUploadIds []int64 `xml:"batchUploadIds,omitempty" json:"batchUploadIds,omitempty"`
}

type GetSegmentPopulationResultsByIdsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getSegmentPopulationResultsByIdsResponse"`

	Rval []*SegmentPopulationResults `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type PerformSegmentPopulationAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performSegmentPopulationAction"`

	Action *SegmentPopulationAction `xml:"action,omitempty" json:"action,omitempty"`

	BatchUploadIds []int64 `xml:"batchUploadIds,omitempty" json:"batchUploadIds,omitempty"`
}

type PerformSegmentPopulationActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performSegmentPopulationActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateSegmentMemberships struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateSegmentMemberships"`

	UpdateRequest *SegmentPopulationRequest `xml:"updateRequest,omitempty" json:"updateRequest,omitempty"`
}

type UpdateSegmentMembershipsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateSegmentMembershipsResponse"`

	Rval *SegmentPopulationResponse `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ApiError struct {
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type IdError struct {
	Index int64 `xml:"index,omitempty" json:"index,omitempty"`

	ErrorType *IdError_IdErrorType `xml:"errorType,omitempty" json:"errorType,omitempty"`
}

type InternalApiError struct {
	*ApiError

	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NotNullError struct {
	*ApiError

	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ParseError struct {
	*ApiError

	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ProcessAction struct {
	*SegmentPopulationAction
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SegmentPopulationAction struct {
}

type SegmentPopulationError struct {
	*ApiError

	Reason *SegmentPopulationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SegmentPopulationRequest struct {
	BatchUploadId int64 `xml:"batchUploadId,omitempty" json:"batchUploadId,omitempty"`

	SegmentId int64 `xml:"segmentId,omitempty" json:"segmentId,omitempty"`

	IsDeletion bool `xml:"isDeletion,omitempty" json:"isDeletion,omitempty"`

	IdentifierType *IdentifierType `xml:"identifierType,omitempty" json:"identifierType,omitempty"`

	Ids []string `xml:"ids,omitempty" json:"ids,omitempty"`

	ConsentType *ConsentType `xml:"consentType,omitempty" json:"consentType,omitempty"`
}

type SegmentPopulationResponse struct {
	BatchUploadId int64 `xml:"batchUploadId,omitempty" json:"batchUploadId,omitempty"`

	IdErrors []*IdError `xml:"idErrors,omitempty" json:"idErrors,omitempty"`
}

type SegmentPopulationResults struct {
	BatchUploadId int64 `xml:"batchUploadId,omitempty" json:"batchUploadId,omitempty"`

	SegmentId int64 `xml:"segmentId,omitempty" json:"segmentId,omitempty"`

	Status *SegmentPopulationStatus `xml:"status,omitempty" json:"status,omitempty"`

	NumSuccessfulIdsProcessed int64 `xml:"numSuccessfulIdsProcessed,omitempty" json:"numSuccessfulIdsProcessed,omitempty"`

	Errors []*IdError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type UpdateResult struct {
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type SegmentPopulationServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns a list of {@link SegmentPopulationResults} for the given {@code batchUploadIds}.
	*/
	GetSegmentPopulationResultsByIds(request *GetSegmentPopulationResultsByIds) (*GetSegmentPopulationResultsByIdsResponse, error)

	GetSegmentPopulationResultsByIdsContext(ctx context.Context, request *GetSegmentPopulationResultsByIds) (*GetSegmentPopulationResultsByIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs an action on the uploads denoted by {@code batchUploadIds}.
	*/
	PerformSegmentPopulationAction(request *PerformSegmentPopulationAction) (*PerformSegmentPopulationActionResponse, error)

	PerformSegmentPopulationActionContext(ctx context.Context, request *PerformSegmentPopulationAction) (*PerformSegmentPopulationActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates identifiers in an audience segment.

	   <p>The returned {@link SegmentPopulationRequest#batchUploadId} can be used in subsequent
	   requests to group them together as part of the same batch. The identifiers associated with a
	   batch will not be processed until {@link #performSegmentPopulationAction} is called with a
	   ProcessAction. The batch will expire if ProcessAction is not called within the TTL of 5 days.
	*/
	UpdateSegmentMemberships(request *UpdateSegmentMemberships) (*UpdateSegmentMembershipsResponse, error)

	UpdateSegmentMembershipsContext(ctx context.Context, request *UpdateSegmentMemberships) (*UpdateSegmentMembershipsResponse, error)
}

type segmentPopulationServiceInterface struct {
	client *soap.Client
}

func NewSegmentPopulationServiceInterface(client *soap.Client) SegmentPopulationServiceInterface {
	return &segmentPopulationServiceInterface{
		client: client,
	}
}

func (service *segmentPopulationServiceInterface) GetSegmentPopulationResultsByIdsContext(ctx context.Context, request *GetSegmentPopulationResultsByIds) (*GetSegmentPopulationResultsByIdsResponse, error) {
	response := new(GetSegmentPopulationResultsByIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *segmentPopulationServiceInterface) GetSegmentPopulationResultsByIds(request *GetSegmentPopulationResultsByIds) (*GetSegmentPopulationResultsByIdsResponse, error) {
	return service.GetSegmentPopulationResultsByIdsContext(
		context.Background(),
		request,
	)
}

func (service *segmentPopulationServiceInterface) PerformSegmentPopulationActionContext(ctx context.Context, request *PerformSegmentPopulationAction) (*PerformSegmentPopulationActionResponse, error) {
	response := new(PerformSegmentPopulationActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *segmentPopulationServiceInterface) PerformSegmentPopulationAction(request *PerformSegmentPopulationAction) (*PerformSegmentPopulationActionResponse, error) {
	return service.PerformSegmentPopulationActionContext(
		context.Background(),
		request,
	)
}

func (service *segmentPopulationServiceInterface) UpdateSegmentMembershipsContext(ctx context.Context, request *UpdateSegmentMemberships) (*UpdateSegmentMembershipsResponse, error) {
	response := new(UpdateSegmentMembershipsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *segmentPopulationServiceInterface) UpdateSegmentMemberships(request *UpdateSegmentMemberships) (*UpdateSegmentMembershipsResponse, error) {
	return service.UpdateSegmentMembershipsContext(
		context.Background(),
		request,
	)
}
