// Code generated by gowsdl DO NOT EDIT.

package streamactivitymonitor

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

type CommonError_Reason string

const (
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

type CreativeTranscode_IdType string

const (
	CreativeTranscode_IdTypeAD_ID CreativeTranscode_IdType = "AD_ID"

	CreativeTranscode_IdTypeCREATIVE_ID CreativeTranscode_IdType = "CREATIVE_ID"

	CreativeTranscode_IdTypeCREATIVE_ADID CreativeTranscode_IdType = "CREATIVE_ADID"

	CreativeTranscode_IdTypeUNIVERSAL_AD_ID CreativeTranscode_IdType = "UNIVERSAL_AD_ID"

	CreativeTranscode_IdTypeMEDIA_URI CreativeTranscode_IdType = "MEDIA_URI"

	CreativeTranscode_IdTypeMEDIA_URI_PATH CreativeTranscode_IdType = "MEDIA_URI_PATH"

	CreativeTranscode_IdTypeCREATIVE_ADID_WITH_FALLBACK CreativeTranscode_IdType = "CREATIVE_ADID_WITH_FALLBACK"

	CreativeTranscode_IdTypeCANONICALIZED_MEDIA_URI CreativeTranscode_IdType = "CANONICALIZED_MEDIA_URI"

	CreativeTranscode_IdTypeGV_REGISTRY_ID CreativeTranscode_IdType = "GV_REGISTRY_ID"

	CreativeTranscode_IdTypeUNKNOWN_ID_TYPE CreativeTranscode_IdType = "UNKNOWN_ID_TYPE"

	CreativeTranscode_IdTypeMEDIA_URI_HASH CreativeTranscode_IdType = "MEDIA_URI_HASH"

	CreativeTranscode_IdTypeUNKNOWN CreativeTranscode_IdType = "UNKNOWN"
)

type FeatureError_Reason string

const (
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type InternalApiError_Reason string

const (
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type NotNullError_Reason string

const (
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

type ParseError_Reason string

const (
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

type PermissionError_Reason string

const (
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

type PublisherQueryLanguageContextError_Reason string

const (
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

type PublisherQueryLanguageSyntaxError_Reason string

const (
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type ReportingType string

const (
	ReportingTypeDISABLED ReportingType = "DISABLED"

	ReportingTypeCLIENT ReportingType = "CLIENT"

	ReportingTypeSERVER ReportingType = "SERVER"

	ReportingTypeAD_MEDIA ReportingType = "AD_MEDIA"

	ReportingTypeUNKNOWN ReportingType = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

type RequiredError_Reason string

const (
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

type SamErrorType string

const (
	SamErrorTypeINTERNAL_ERROR SamErrorType = "INTERNAL_ERROR"

	SamErrorTypeAD_REQUEST_ERROR SamErrorType = "AD_REQUEST_ERROR"

	SamErrorTypeVAST_PARSE_ERROR SamErrorType = "VAST_PARSE_ERROR"

	SamErrorTypeUNSUPPORTED_AD_SYSTEM SamErrorType = "UNSUPPORTED_AD_SYSTEM"

	SamErrorTypeCANNOT_FIND_UNIQUE_TRANSCODE_ID SamErrorType = "CANNOT_FIND_UNIQUE_TRANSCODE_ID"

	SamErrorTypeCANNOT_FIND_MEDIA_FILE_PATH SamErrorType = "CANNOT_FIND_MEDIA_FILE_PATH"

	SamErrorTypeMISSING_INLINE_ELEMENTS SamErrorType = "MISSING_INLINE_ELEMENTS"

	SamErrorTypeMAX_WRAPPER_DEPTH_REACHED SamErrorType = "MAX_WRAPPER_DEPTH_REACHED"

	SamErrorTypeINVALID_AD_SEQUENCE_NUMBER SamErrorType = "INVALID_AD_SEQUENCE_NUMBER"

	SamErrorTypeFAILED_PING SamErrorType = "FAILED_PING"

	SamErrorTypeAD_TAG_PARSE_ERROR SamErrorType = "AD_TAG_PARSE_ERROR"

	SamErrorTypeVMAP_PARSE_ERROR SamErrorType = "VMAP_PARSE_ERROR"

	SamErrorTypeINVALID_VMAP_RESPONSE SamErrorType = "INVALID_VMAP_RESPONSE"

	SamErrorTypeNO_AD_BREAKS_IN_VMAP SamErrorType = "NO_AD_BREAKS_IN_VMAP"

	SamErrorTypeCUSTOM_AD_SOURCE_IN_VMAP SamErrorType = "CUSTOM_AD_SOURCE_IN_VMAP"

	SamErrorTypeAD_BREAK_TYPE_NOT_SUPPORTED SamErrorType = "AD_BREAK_TYPE_NOT_SUPPORTED"

	SamErrorTypeNEITHER_AD_SOURCE_NOR_TRACKING SamErrorType = "NEITHER_AD_SOURCE_NOR_TRACKING"

	SamErrorTypeUNKNOWN_ERROR SamErrorType = "UNKNOWN_ERROR"

	SamErrorTypeAD_POD_DROPPED_TO_MANY_AD_PODS SamErrorType = "AD_POD_DROPPED_TO_MANY_AD_PODS"

	SamErrorTypeAD_POD_DROPPED_EMPTY_ADS SamErrorType = "AD_POD_DROPPED_EMPTY_ADS"

	SamErrorTypeAD_BREAK_WITHOUT_AD_POD SamErrorType = "AD_BREAK_WITHOUT_AD_POD"

	SamErrorTypeTRANSCODING_IN_PROGRESS SamErrorType = "TRANSCODING_IN_PROGRESS"

	SamErrorTypeUNSUPPORTED_VAST_VERSION SamErrorType = "UNSUPPORTED_VAST_VERSION"

	SamErrorTypeAD_POD_DROPPED_BUMPER_ERROR SamErrorType = "AD_POD_DROPPED_BUMPER_ERROR"

	SamErrorTypeNO_VALID_MEDIAFILES_FOUND SamErrorType = "NO_VALID_MEDIAFILES_FOUND"

	SamErrorTypeEXCEEDS_MAX_FILLER SamErrorType = "EXCEEDS_MAX_FILLER"

	SamErrorTypeSKIPPABLE_AD_NOT_SUPPORTED SamErrorType = "SKIPPABLE_AD_NOT_SUPPORTED"

	SamErrorTypeAD_REQUEST_TIMEOUT SamErrorType = "AD_REQUEST_TIMEOUT"

	SamErrorTypeAD_POD_DROPPED_UNSUPPORTED_TYPE SamErrorType = "AD_POD_DROPPED_UNSUPPORTED_TYPE"

	SamErrorTypeDUPLICATE_AD_TAG SamErrorType = "DUPLICATE_AD_TAG"

	SamErrorTypeFOLLOW_REDIRECTS_IS_FALSE SamErrorType = "FOLLOW_REDIRECTS_IS_FALSE"

	SamErrorTypeAD_POD_DROPPED_INCOMPATIBLE_TIMEOFFSET SamErrorType = "AD_POD_DROPPED_INCOMPATIBLE_TIMEOFFSET"

	SamErrorTypeUNKNOWN SamErrorType = "UNKNOWN"
)

type SamSessionError_Reason string

const (
	SamSessionError_ReasonCOULD_NOT_REGISTER_SESSION SamSessionError_Reason = "COULD_NOT_REGISTER_SESSION"

	SamSessionError_ReasonMALFORMED_SESSION_ID SamSessionError_Reason = "MALFORMED_SESSION_ID"

	SamSessionError_ReasonINVALID_SESSION_ID SamSessionError_Reason = "INVALID_SESSION_ID"

	SamSessionError_ReasonINVALID_DEBUG_KEY SamSessionError_Reason = "INVALID_DEBUG_KEY"

	SamSessionError_ReasonREQUEST_EXCEEDS_SESSION_LIMIT SamSessionError_Reason = "REQUEST_EXCEEDS_SESSION_LIMIT"

	SamSessionError_ReasonUNKNOWN SamSessionError_Reason = "UNKNOWN"
)

type ServerError_Reason string

const (
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

type GetSamSessionsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getSamSessionsByStatement"`

	Statement *Statement `xml:"statement,omitempty" json:"statement,omitempty"`
}

type GetSamSessionsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getSamSessionsByStatementResponse"`

	Rval []*SamSession `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type RegisterSessionsForMonitoring struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 registerSessionsForMonitoring"`

	SessionIds []string `xml:"sessionIds,omitempty" json:"sessionIds,omitempty"`
}

type RegisterSessionsForMonitoringResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 registerSessionsForMonitoringResponse"`

	Rval []string `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type AdBreak struct {
	RootAdResponses []*AdResponse `xml:"rootAdResponses,omitempty" json:"rootAdResponses,omitempty"`

	AdDecisionCreatives []*AdDecisionCreative `xml:"adDecisionCreatives,omitempty" json:"adDecisionCreatives,omitempty"`

	PodNum int32 `xml:"podNum,omitempty" json:"podNum,omitempty"`

	LinearAbsolutePodNum int32 `xml:"linearAbsolutePodNum,omitempty" json:"linearAbsolutePodNum,omitempty"`

	AdBreakDurationMillis int64 `xml:"adBreakDurationMillis,omitempty" json:"adBreakDurationMillis,omitempty"`

	FilledDurationMillis int64 `xml:"filledDurationMillis,omitempty" json:"filledDurationMillis,omitempty"`

	ServedDurationMillis int64 `xml:"servedDurationMillis,omitempty" json:"servedDurationMillis,omitempty"`

	StartDateTime soap.XSDDateTime `xml:"startDateTime,omitempty" json:"startDateTime,omitempty"`

	StartTimeOffsetMillis int64 `xml:"startTimeOffsetMillis,omitempty" json:"startTimeOffsetMillis,omitempty"`

	SamError *SamError `xml:"samError,omitempty" json:"samError,omitempty"`

	MidrollIndex int32 `xml:"midrollIndex,omitempty" json:"midrollIndex,omitempty"`

	DecisionedAds bool `xml:"decisionedAds,omitempty" json:"decisionedAds,omitempty"`

	TrackingEvents []*TrackingEvent `xml:"trackingEvents,omitempty" json:"trackingEvents,omitempty"`
}

type AdDecisionCreative struct {
	Sequence int32 `xml:"sequence,omitempty" json:"sequence,omitempty"`

	SlateDurationMills int64 `xml:"slateDurationMills,omitempty" json:"slateDurationMills,omitempty"`

	CreativeDurationMills int64 `xml:"creativeDurationMills,omitempty" json:"creativeDurationMills,omitempty"`

	CreativeTranscode *CreativeTranscode `xml:"creativeTranscode,omitempty" json:"creativeTranscode,omitempty"`

	GoogleVideoId string `xml:"googleVideoId,omitempty" json:"googleVideoId,omitempty"`

	SamError *SamError `xml:"samError,omitempty" json:"samError,omitempty"`

	IsTranscoded bool `xml:"isTranscoded,omitempty" json:"isTranscoded,omitempty"`

	IsDropped bool `xml:"isDropped,omitempty" json:"isDropped,omitempty"`
}

type AdResponse struct {
	RequestUrl string `xml:"requestUrl,omitempty" json:"requestUrl,omitempty"`

	IsVmapRequest bool `xml:"isVmapRequest,omitempty" json:"isVmapRequest,omitempty"`

	ResponseBody string `xml:"responseBody,omitempty" json:"responseBody,omitempty"`

	RedirectResponses []*AdResponse `xml:"redirectResponses,omitempty" json:"redirectResponses,omitempty"`

	SamError *SamError `xml:"samError,omitempty" json:"samError,omitempty"`

	AdErrors []*SamError `xml:"adErrors,omitempty" json:"adErrors,omitempty"`
}

type ApiError struct {
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTranscode struct {
	AdServer string `xml:"adServer,omitempty" json:"adServer,omitempty"`

	CreativeIdType *CreativeTranscode_IdType `xml:"creativeIdType,omitempty" json:"creativeIdType,omitempty"`

	CreativeId string `xml:"creativeId,omitempty" json:"creativeId,omitempty"`
}

type Date struct {
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type InternalApiError struct {
	*ApiError

	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LinearStreamCreateRequest struct {
	*StreamCreateRequest

	LiveStreamEventAssetKey string `xml:"liveStreamEventAssetKey,omitempty" json:"liveStreamEventAssetKey,omitempty"`

	EventName string `xml:"eventName,omitempty" json:"eventName,omitempty"`

	LiveStreamEventId int64 `xml:"liveStreamEventId,omitempty" json:"liveStreamEventId,omitempty"`

	EventStartDateTime soap.XSDDateTime `xml:"eventStartDateTime,omitempty" json:"eventStartDateTime,omitempty"`

	EventEndDateTime soap.XSDDateTime `xml:"eventEndDateTime,omitempty" json:"eventEndDateTime,omitempty"`

	PrefetchEnabled bool `xml:"prefetchEnabled,omitempty" json:"prefetchEnabled,omitempty"`

	PodTrimmingEnabled bool `xml:"podTrimmingEnabled,omitempty" json:"podTrimmingEnabled,omitempty"`
}

type NotNullError struct {
	*ApiError

	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SamError struct {
	SamErrorType *SamErrorType `xml:"samErrorType,omitempty" json:"samErrorType,omitempty"`

	ErrorDetails string `xml:"errorDetails,omitempty" json:"errorDetails,omitempty"`
}

type SamSession struct {
	SessionId string `xml:"sessionId,omitempty" json:"sessionId,omitempty"`

	IsVodSession bool `xml:"isVodSession,omitempty" json:"isVodSession,omitempty"`

	StreamCreateRequest *StreamCreateRequest `xml:"streamCreateRequest,omitempty" json:"streamCreateRequest,omitempty"`

	AdBreaks []*AdBreak `xml:"adBreaks,omitempty" json:"adBreaks,omitempty"`

	StartDateTime soap.XSDDateTime `xml:"startDateTime,omitempty" json:"startDateTime,omitempty"`

	SessionDurationMillis int64 `xml:"sessionDurationMillis,omitempty" json:"sessionDurationMillis,omitempty"`

	ContentDurationMillis int64 `xml:"contentDurationMillis,omitempty" json:"contentDurationMillis,omitempty"`
}

type SamSessionError struct {
	*ApiError

	Reason *SamSessionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StreamCreateRequest struct {
	Url string `xml:"url,omitempty" json:"url,omitempty"`

	UserAgent string `xml:"userAgent,omitempty" json:"userAgent,omitempty"`

	ReportingType *ReportingType `xml:"reportingType,omitempty" json:"reportingType,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type TextValue struct {
	*_Value

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TrackingEvent struct {
	Pings []*TrackingEvent_Ping `xml:"pings,omitempty" json:"pings,omitempty"`
}

type TrackingEvent_Ping struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 TrackingEvent.Ping"`

	Uri string `xml:"uri,omitempty" json:"uri,omitempty"`

	HasError bool `xml:"hasError,omitempty" json:"hasError,omitempty"`
}

type _Value struct {
}

type VodStreamCreateRequest struct {
	*StreamCreateRequest

	ContentSourceId int64 `xml:"contentSourceId,omitempty" json:"contentSourceId,omitempty"`

	VideoId string `xml:"videoId,omitempty" json:"videoId,omitempty"`

	ContentId int64 `xml:"contentId,omitempty" json:"contentId,omitempty"`

	ContentName string `xml:"contentName,omitempty" json:"contentName,omitempty"`

	CuePoints []int64 `xml:"cuePoints,omitempty" json:"cuePoints,omitempty"`
}

type StreamActivityMonitorServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the logging information for a DAI session. A DAI session can be identified by it's
	   session id or debug key. The session ID must be registered via the {@code
	   registerSessionsForMonitoring} method before it can be accessed. There may be some delay before
	   the session is available.

	   <p>The number of sessions requested is limited to 25. The following fields are supported for
	   filtering:

	   <table>
	   <tbody>
	   <tr>
	   <th>Entity property</th>
	   <th>PQL filter</th>
	   </tr>
	   <tr>
	   <td>
	   Session id
	   </td>
	   <td>
	   'sessionId'
	   </td>
	   </tr>
	   <tr>
	   <td>
	   Debug key
	   </td>
	   <td>
	   'debugKey"
	   </td>
	   </tr>
	   </tbody>
	   </table>
	*/
	GetSamSessionsByStatement(request *GetSamSessionsByStatement) (*GetSamSessionsByStatementResponse, error)

	GetSamSessionsByStatementContext(ctx context.Context, request *GetSamSessionsByStatement) (*GetSamSessionsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Registers the specified list of {@code sessionIds} for monitoring. Once the session IDs have
	   been registered, all logged information about the sessions will be persisted and can be viewed
	   via the Ad Manager UI.

	   <p>A session ID is a unique identifier of a single user watching a live stream event.
	*/
	RegisterSessionsForMonitoring(request *RegisterSessionsForMonitoring) (*RegisterSessionsForMonitoringResponse, error)

	RegisterSessionsForMonitoringContext(ctx context.Context, request *RegisterSessionsForMonitoring) (*RegisterSessionsForMonitoringResponse, error)
}

type streamActivityMonitorServiceInterface struct {
	client *soap.Client
}

func NewStreamActivityMonitorServiceInterface(client *soap.Client) StreamActivityMonitorServiceInterface {
	return &streamActivityMonitorServiceInterface{
		client: client,
	}
}

func (service *streamActivityMonitorServiceInterface) GetSamSessionsByStatementContext(ctx context.Context, request *GetSamSessionsByStatement) (*GetSamSessionsByStatementResponse, error) {
	response := new(GetSamSessionsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *streamActivityMonitorServiceInterface) GetSamSessionsByStatement(request *GetSamSessionsByStatement) (*GetSamSessionsByStatementResponse, error) {
	return service.GetSamSessionsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *streamActivityMonitorServiceInterface) RegisterSessionsForMonitoringContext(ctx context.Context, request *RegisterSessionsForMonitoring) (*RegisterSessionsForMonitoringResponse, error) {
	response := new(RegisterSessionsForMonitoringResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *streamActivityMonitorServiceInterface) RegisterSessionsForMonitoring(request *RegisterSessionsForMonitoring) (*RegisterSessionsForMonitoringResponse, error) {
	return service.RegisterSessionsForMonitoringContext(
		context.Background(),
		request,
	)
}
