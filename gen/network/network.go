// Code generated by gowsdl DO NOT EDIT.

package network

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// The declaration about third party data usage on the associated entity.
//

type DeclarationType string

const (

	//
	// There are no companies associated.  Functionally the same as DECLARED, combined with
	// an empty company list.
	//
	DeclarationTypeNONE DeclarationType = "NONE"

	//
	// There is a set of {@link RichMediaAdsCompany}s associated with this entity.
	//
	DeclarationTypeDECLARED DeclarationType = "DECLARED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DeclarationTypeUNKNOWN DeclarationType = "UNKNOWN"
)

//
// Potential reasons for ExchangeSignupService errors
//

type ExchangeSignupApiError_Reason string

const (
	ExchangeSignupApiError_ReasonADSENSE_ACCOUNT_CREATION_ERROR ExchangeSignupApiError_Reason = "ADSENSE_ACCOUNT_CREATION_ERROR"

	ExchangeSignupApiError_ReasonADSENSE_ACCOUNT_ALREADY_HAS_EXCHANGE ExchangeSignupApiError_Reason = "ADSENSE_ACCOUNT_ALREADY_HAS_EXCHANGE"

	ExchangeSignupApiError_ReasonFAILED_TO_ADD_WEBSITE_TO_PROPERTY ExchangeSignupApiError_Reason = "FAILED_TO_ADD_WEBSITE_TO_PROPERTY"

	ExchangeSignupApiError_ReasonFAILED_TO_CREATE_LINK_FOR_NEW_ACCOUNT ExchangeSignupApiError_Reason = "FAILED_TO_CREATE_LINK_FOR_NEW_ACCOUNT"

	ExchangeSignupApiError_ReasonCANNOT_CREATE_NEW_ACCOUNT_FOR_MAPPED_CUSTOMER ExchangeSignupApiError_Reason = "CANNOT_CREATE_NEW_ACCOUNT_FOR_MAPPED_CUSTOMER"

	ExchangeSignupApiError_ReasonFAILED_TO_CREATE_EXCHANGE_SETTINGS ExchangeSignupApiError_Reason = "FAILED_TO_CREATE_EXCHANGE_SETTINGS"

	ExchangeSignupApiError_ReasonDUPLICATE_PRODUCT_TYPE ExchangeSignupApiError_Reason = "DUPLICATE_PRODUCT_TYPE"

	ExchangeSignupApiError_ReasonINVALID_SIGNUP_PRODUCT ExchangeSignupApiError_Reason = "INVALID_SIGNUP_PRODUCT"

	ExchangeSignupApiError_ReasonUNKNOWN_PRODUCT ExchangeSignupApiError_Reason = "UNKNOWN_PRODUCT"

	ExchangeSignupApiError_ReasonBAD_SITE_VERIFICATION_UPDATE_REQUEST ExchangeSignupApiError_Reason = "BAD_SITE_VERIFICATION_UPDATE_REQUEST"

	ExchangeSignupApiError_ReasonNO_EXCHANGE_ACCOUNT ExchangeSignupApiError_Reason = "NO_EXCHANGE_ACCOUNT"

	ExchangeSignupApiError_ReasonSINGLE_SYNDICATION_PRODUCT ExchangeSignupApiError_Reason = "SINGLE_SYNDICATION_PRODUCT"

	ExchangeSignupApiError_ReasonACCOUNT_NOT_YET_READY ExchangeSignupApiError_Reason = "ACCOUNT_NOT_YET_READY"

	ExchangeSignupApiError_ReasonMULTIPLE_ADSENSE_ACCOUNTS_NOT_ALLOWED ExchangeSignupApiError_Reason = "MULTIPLE_ADSENSE_ACCOUNTS_NOT_ALLOWED"

	ExchangeSignupApiError_ReasonMISSING_LEGAL_ENTITY_NAME ExchangeSignupApiError_Reason = "MISSING_LEGAL_ENTITY_NAME"

	ExchangeSignupApiError_ReasonMISSING_ACTIVE_BILLING_PROFILE ExchangeSignupApiError_Reason = "MISSING_ACTIVE_BILLING_PROFILE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ExchangeSignupApiError_ReasonUNKNOWN ExchangeSignupApiError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

//
// Describes reasons for an email to be invalid.
//

type InvalidEmailError_Reason string

const (

	//
	// The value is not a valid email address.
	//
	InvalidEmailError_ReasonINVALID_FORMAT InvalidEmailError_Reason = "INVALID_FORMAT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidEmailError_ReasonUNKNOWN InvalidEmailError_Reason = "UNKNOWN"
)

//
// Potential reasons for errors calling InventoryClient
//

type InventoryClientApiError_Reason string

const (
	InventoryClientApiError_ReasonACCESS_DENIED InventoryClientApiError_Reason = "ACCESS_DENIED"

	InventoryClientApiError_ReasonADSENSE_AUTH_ERROR InventoryClientApiError_Reason = "ADSENSE_AUTH_ERROR"

	InventoryClientApiError_ReasonADSENSE_RPC_ERROR InventoryClientApiError_Reason = "ADSENSE_RPC_ERROR"

	InventoryClientApiError_ReasonDOMAIN_NO_SCHEME InventoryClientApiError_Reason = "DOMAIN_NO_SCHEME"

	InventoryClientApiError_ReasonDOMAIN_INVALID_HOST InventoryClientApiError_Reason = "DOMAIN_INVALID_HOST"

	InventoryClientApiError_ReasonDOMAIN_INVALID_TLD InventoryClientApiError_Reason = "DOMAIN_INVALID_TLD"

	InventoryClientApiError_ReasonDOMAIN_ONE_STRING_AND_PUBLIC_SUFFIX InventoryClientApiError_Reason = "DOMAIN_ONE_STRING_AND_PUBLIC_SUFFIX"

	InventoryClientApiError_ReasonDOMAIN_INVALID_INPUT InventoryClientApiError_Reason = "DOMAIN_INVALID_INPUT"

	InventoryClientApiError_ReasonDOMAIN_NO_PUBLIC_SUFFIX InventoryClientApiError_Reason = "DOMAIN_NO_PUBLIC_SUFFIX"

	InventoryClientApiError_ReasonUNKNOWN_ERROR InventoryClientApiError_Reason = "UNKNOWN_ERROR"
)

//
// Describes reasons for {@code LiveStreamEventSlateError}.
//

type LiveStreamEventSlateError_Reason string

const (

	//
	// The slate creative ID does not correspond to a slate creative.
	//
	LiveStreamEventSlateError_ReasonINVALID_SLATE_CREATIVE_ID LiveStreamEventSlateError_Reason = "INVALID_SLATE_CREATIVE_ID"

	//
	// The required field live stream event slate is not set.
	//
	// <p>There must either be a slate creative ID assigned to the live stream event or
	// a valid network level slate selected.
	//
	LiveStreamEventSlateError_ReasonLIVE_STREAM_EVENT_SLATE_CREATIVE_ID_REQUIRED LiveStreamEventSlateError_Reason = "LIVE_STREAM_EVENT_SLATE_CREATIVE_ID_REQUIRED"

	//
	// The slate does not have a videoSourceUrl or assetSourcePath.
	//
	LiveStreamEventSlateError_ReasonMISSING_SOURCE_FOR_SLATE LiveStreamEventSlateError_Reason = "MISSING_SOURCE_FOR_SLATE"

	//
	// The slate is of an invalid type.
	//
	LiveStreamEventSlateError_ReasonINVALID_SLATE_TYPE LiveStreamEventSlateError_Reason = "INVALID_SLATE_TYPE"

	//
	// The slate video source url cannot change.
	//
	LiveStreamEventSlateError_ReasonCANNOT_CHANGE_SLATE_VIDEO_SOURCE_URL LiveStreamEventSlateError_Reason = "CANNOT_CHANGE_SLATE_VIDEO_SOURCE_URL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LiveStreamEventSlateError_ReasonUNKNOWN LiveStreamEventSlateError_Reason = "UNKNOWN"
)

//
// Possible reasons for {@link NetworkError}
//

type NetworkError_Reason string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NetworkError_ReasonUNKNOWN NetworkError_Reason = "UNKNOWN"

	//
	// Multi-currency support is not enabled for this network. This is an Ad Manager 360 feature.
	//
	NetworkError_ReasonMULTI_CURRENCY_NOT_SUPPORTED NetworkError_Reason = "MULTI_CURRENCY_NOT_SUPPORTED"

	//
	// Currency provided is not supported.
	//
	NetworkError_ReasonUNSUPPORTED_CURRENCY NetworkError_Reason = "UNSUPPORTED_CURRENCY"

	//
	// The network currency cannot also be specified as a secondary currency.
	//
	NetworkError_ReasonNETWORK_CURRENCY_CANNOT_BE_SAME_AS_SECONDARY NetworkError_Reason = "NETWORK_CURRENCY_CANNOT_BE_SAME_AS_SECONDARY"

	//
	// The currency cannot be deleted as it is still being used by active rate cards.
	//
	NetworkError_ReasonCANNOT_DELETE_CURRENCY_WITH_ACTIVE_RATE_CARDS NetworkError_Reason = "CANNOT_DELETE_CURRENCY_WITH_ACTIVE_RATE_CARDS"

	//
	// An MCM child network cannot become a parent network.
	//
	NetworkError_ReasonDELEGATION_CHILD_NETWORK_CANNOT_BECOME_A_PARENT NetworkError_Reason = "DELEGATION_CHILD_NETWORK_CANNOT_BECOME_A_PARENT"

	//
	// An MCM parent network cannot become a child of another network.
	//
	NetworkError_ReasonDELEGATION_PARENT_NETWORK_CANNOT_BECOME_A_CHILD NetworkError_Reason = "DELEGATION_PARENT_NETWORK_CANNOT_BECOME_A_CHILD"

	//
	// In MCM, a network cannot become a parent of itself.
	//
	NetworkError_ReasonCANNOT_ADD_SAME_NETWORK_AS_DELEGATION_CHILD NetworkError_Reason = "CANNOT_ADD_SAME_NETWORK_AS_DELEGATION_CHILD"

	//
	// The MCM parent network has exceeded the system limit of child networks.
	//
	NetworkError_ReasonMAX_APPROVED_DELEGATION_CHILD_NETWORKS_EXCEEDED NetworkError_Reason = "MAX_APPROVED_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	//
	// The MCM parent network has exceeded the system limit of child networks pending approval.
	//
	NetworkError_ReasonMAX_PENDING_DELEGATION_CHILD_NETWORKS_EXCEEDED NetworkError_Reason = "MAX_PENDING_DELEGATION_CHILD_NETWORKS_EXCEEDED"

	//
	// The network is already being managed by the parent network for MCM.
	//
	NetworkError_ReasonCHILD_NETWORK_ALREADY_EXISTS NetworkError_Reason = "CHILD_NETWORK_ALREADY_EXISTS"

	//
	// A child network must not be disapproved.
	//
	NetworkError_ReasonCHILD_NETWORK_CANNOT_BE_DISAPPROVED NetworkError_Reason = "CHILD_NETWORK_CANNOT_BE_DISAPPROVED"

	//
	// Only Ad Manager 360 networks are allowed to manage the inventory of other networks.
	//
	NetworkError_ReasonIN_PARENT_DELEGATION_UNSUPPORTED_FOR_NETWORK NetworkError_Reason = "IN_PARENT_DELEGATION_UNSUPPORTED_FOR_NETWORK"

	//
	// When an MCM child network self-signsup for ad exchange but disconnects from the parent, then
	// tries to re-enable again, this indicates that there was an error in re-enabling ad exchange.
	//
	NetworkError_ReasonERROR_REENABLING_AD_EXCHANGE_ON_MCM_CHILD NetworkError_Reason = "ERROR_REENABLING_AD_EXCHANGE_ON_MCM_CHILD"

	//
	// The error shown when there is an issue setting the approved site serving field when
	// re-enabling or disabling ad exchange on an MCM child.
	//
	NetworkError_ReasonERROR_SETTING_SITE_SERVING_MODE_ON_MCM_CHILD NetworkError_Reason = "ERROR_SETTING_SITE_SERVING_MODE_ON_MCM_CHILD"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// Describes reasons for precision errors.
//

type PrecisionError_Reason string

const (

	//
	// The lowest N digits of the number must be zero.
	//
	PrecisionError_ReasonWRONG_PRECISION PrecisionError_Reason = "WRONG_PRECISION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PrecisionError_ReasonUNKNOWN PrecisionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RequestError_Reason string

const (

	//
	// Error reason is unknown.
	//
	RequestError_ReasonUNKNOWN RequestError_Reason = "UNKNOWN"

	//
	// Invalid input.
	//
	RequestError_ReasonINVALID_INPUT RequestError_Reason = "INVALID_INPUT"

	//
	// The api version in the request has been discontinued. Please update
	// to the new AdWords API version.
	//
	RequestError_ReasonUNSUPPORTED_VERSION RequestError_Reason = "UNSUPPORTED_VERSION"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// Error reasons for set-top box creatives.
//

type SetTopBoxCreativeError_Reason string

const (

	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_IMMUTABLE"

	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_REQUIRED SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_REQUIRED"

	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonPROVIDER_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "PROVIDER_ID_IMMUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeError_ReasonUNKNOWN SetTopBoxCreativeError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// Reasons for inventory url errors.
//

type UrlError_Reason string

const (

	//
	// The URL has been reserved, and not available for usage.
	//
	UrlError_ReasonCANNOT_USE_RESERVED_URL UrlError_Reason = "CANNOT_USE_RESERVED_URL"

	//
	// The URL belongs to Google, and not available for usage.
	//
	UrlError_ReasonCANNOT_USE_GOOGLE_URL UrlError_Reason = "CANNOT_USE_GOOGLE_URL"

	//
	// The URL is invalid.
	//
	UrlError_ReasonINVALID_URL UrlError_Reason = "INVALID_URL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	UrlError_ReasonUNKNOWN UrlError_Reason = "UNKNOWN"
)

type GetAllNetworks struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAllNetworks"`
}

type GetAllNetworksResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAllNetworksResponse"`

	Rval []*Network `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetCurrentNetwork struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCurrentNetwork"`
}

type GetCurrentNetworkResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCurrentNetworkResponse"`

	Rval *Network `xml:"rval,omitempty" json:"rval,omitempty"`
}

type GetDefaultThirdPartyDataDeclaration struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getDefaultThirdPartyDataDeclaration"`
}

type GetDefaultThirdPartyDataDeclarationResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getDefaultThirdPartyDataDeclarationResponse"`

	Rval *ThirdPartyDataDeclaration `xml:"rval,omitempty" json:"rval,omitempty"`
}

type MakeTestNetwork struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 makeTestNetwork"`
}

type MakeTestNetworkResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 makeTestNetworkResponse"`

	Rval *Network `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateNetwork struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateNetwork"`

	Network *Network `xml:"network,omitempty" json:"network,omitempty"`
}

type UpdateNetworkResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateNetworkResponse"`

	Rval *Network `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ExchangeSignupApiError struct {
	*ApiError

	Reason *ExchangeSignupApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidEmailError struct {
	*ApiError

	Reason *InvalidEmailError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InventoryClientApiError struct {
	*ApiError

	Reason *InventoryClientApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LiveStreamEventSlateError struct {
	*ApiError

	Reason *LiveStreamEventSlateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Network struct {

	//
	// The unique ID of the {@code Network}. This value is readonly and is assigned by Google.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The display name of the network.
	//
	DisplayName string `xml:"displayName,omitempty" json:"displayName,omitempty"`

	//
	// The network code. If the current login has access to multiple networks, then the network code
	// must be provided in the SOAP request headers for all requests. Otherwise, it is optional to
	// provide the network code in the SOAP headers. This field is read-only.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The property code. This field is read-only.
	//
	PropertyCode string `xml:"propertyCode,omitempty" json:"propertyCode,omitempty"`

	//
	// The time zone associated with the delivery of orders and reporting. This field is read-only.
	//
	TimeZone string `xml:"timeZone,omitempty" json:"timeZone,omitempty"`

	//
	// The primary currency code. This field is read-only.
	//
	CurrencyCode string `xml:"currencyCode,omitempty" json:"currencyCode,omitempty"`

	//
	// Currencies that can be used as an alternative to the {@link Network#currencyCode} for
	// trafficking {@link LineItem line items}.
	//
	SecondaryCurrencyCodes []string `xml:"secondaryCurrencyCodes,omitempty" json:"secondaryCurrencyCodes,omitempty"`

	//
	// The {@link AdUnit#id} of the top most ad unit to which descendant ad units can be added. Should
	// be used for the {@link AdUnit#parentId} when first building inventory hierarchy. This field is
	// read-only.
	//
	EffectiveRootAdUnitId string `xml:"effectiveRootAdUnitId,omitempty" json:"effectiveRootAdUnitId,omitempty"`

	//
	// Whether this is a test network. This field is read-only.
	//
	IsTest bool `xml:"isTest,omitempty" json:"isTest,omitempty"`
}

type NetworkError struct {
	*ApiError

	Reason *NetworkError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PrecisionError struct {
	*ApiError

	Reason *PrecisionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequestError struct {
	*ApiError

	Reason *RequestError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetTopBoxCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *SetTopBoxCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ThirdPartyDataDeclaration struct {
	DeclarationType *DeclarationType `xml:"declarationType,omitempty" json:"declarationType,omitempty"`

	ThirdPartyCompanyIds []int64 `xml:"thirdPartyCompanyIds,omitempty" json:"thirdPartyCompanyIds,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type UrlError struct {
	*ApiError

	Reason *UrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NetworkServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the list of {@link Network} objects to which the current login has access.

	   <p>Intended to be used without a network code in the SOAP header when the login may have more
	   than one network associated with it.
	*/
	GetAllNetworks(request *GetAllNetworks) (*GetAllNetworksResponse, error)

	GetAllNetworksContext(ctx context.Context, request *GetAllNetworks) (*GetAllNetworksResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the current network for which requests are being made.
	*/
	GetCurrentNetwork(request *GetCurrentNetwork) (*GetCurrentNetworkResponse, error)

	GetCurrentNetworkContext(ctx context.Context, request *GetCurrentNetwork) (*GetCurrentNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the default {@link ThirdPartyDataDeclaration} for this network. If this setting has
	   never been updated on your network, then this API response will be empty.
	*/
	GetDefaultThirdPartyDataDeclaration(request *GetDefaultThirdPartyDataDeclaration) (*GetDefaultThirdPartyDataDeclarationResponse, error)

	GetDefaultThirdPartyDataDeclarationContext(ctx context.Context, request *GetDefaultThirdPartyDataDeclaration) (*GetDefaultThirdPartyDataDeclarationResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates a new blank network for testing purposes using the current login.

	   <p>Each login(i.e. email address) can only have one test network. Data from any of your
	   existing networks will not be transferred to the new test network. Once the test network is
	   created, the test network can be used in the API by supplying the {@link Network#networkCode}
	   in the SOAP header or by logging into the Ad Manager UI.

	   <p>Test networks are limited in the following ways:

	   <ul>
	   <li>Test networks cannot serve ads.
	   <li>Because test networks cannot serve ads, reports will always come back without data.
	   <li>Since forecasting requires serving history, forecast service results will be faked. See
	   {@link ForecastService} for more info.
	   <li>Test networks are, by default, Ad Manager networks and don't have any features from Ad
	   Manager 360. To have additional features turned on, please contact your account manager.
	   <li>Test networks are limited to 10,000 objects per entity type.
	   </ul>
	*/
	MakeTestNetwork(request *MakeTestNetwork) (*MakeTestNetworkResponse, error)

	MakeTestNetworkContext(ctx context.Context, request *MakeTestNetwork) (*MakeTestNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified network. Currently, only the network display name can be updated.
	*/
	UpdateNetwork(request *UpdateNetwork) (*UpdateNetworkResponse, error)

	UpdateNetworkContext(ctx context.Context, request *UpdateNetwork) (*UpdateNetworkResponse, error)
}

type networkServiceInterface struct {
	client *soap.Client
}

func NewNetworkServiceInterface(client *soap.Client) NetworkServiceInterface {
	return &networkServiceInterface{
		client: client,
	}
}

func (service *networkServiceInterface) GetAllNetworksContext(ctx context.Context, request *GetAllNetworks) (*GetAllNetworksResponse, error) {
	response := new(GetAllNetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetAllNetworks(request *GetAllNetworks) (*GetAllNetworksResponse, error) {
	return service.GetAllNetworksContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetCurrentNetworkContext(ctx context.Context, request *GetCurrentNetwork) (*GetCurrentNetworkResponse, error) {
	response := new(GetCurrentNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetCurrentNetwork(request *GetCurrentNetwork) (*GetCurrentNetworkResponse, error) {
	return service.GetCurrentNetworkContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) GetDefaultThirdPartyDataDeclarationContext(ctx context.Context, request *GetDefaultThirdPartyDataDeclaration) (*GetDefaultThirdPartyDataDeclarationResponse, error) {
	response := new(GetDefaultThirdPartyDataDeclarationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) GetDefaultThirdPartyDataDeclaration(request *GetDefaultThirdPartyDataDeclaration) (*GetDefaultThirdPartyDataDeclarationResponse, error) {
	return service.GetDefaultThirdPartyDataDeclarationContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) MakeTestNetworkContext(ctx context.Context, request *MakeTestNetwork) (*MakeTestNetworkResponse, error) {
	response := new(MakeTestNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) MakeTestNetwork(request *MakeTestNetwork) (*MakeTestNetworkResponse, error) {
	return service.MakeTestNetworkContext(
		context.Background(),
		request,
	)
}

func (service *networkServiceInterface) UpdateNetworkContext(ctx context.Context, request *UpdateNetwork) (*UpdateNetworkResponse, error) {
	response := new(UpdateNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *networkServiceInterface) UpdateNetwork(request *UpdateNetwork) (*UpdateNetworkResponse, error) {
	return service.UpdateNetworkContext(
		context.Background(),
		request,
	)
}
