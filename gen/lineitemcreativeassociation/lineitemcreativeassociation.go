// Code generated by gowsdl DO NOT EDIT.

package lineitemcreativeassociation

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type AdSenseAccountError_Reason string

const (

	//
	// An error occurred while trying to associate an AdSense account with Ad Manager. Unable to
	// create an association with AdSense or Ad Exchange account.
	//
	AdSenseAccountError_ReasonASSOCIATE_ACCOUNT_API_ERROR AdSenseAccountError_Reason = "ASSOCIATE_ACCOUNT_API_ERROR"

	//
	// An error occured while trying to get an associated web property's ad slots. Unable to
	// retrieve ad slot information from AdSense or Ad Exchange account.
	//
	AdSenseAccountError_ReasonGET_AD_SLOT_API_ERROR AdSenseAccountError_Reason = "GET_AD_SLOT_API_ERROR"

	//
	// An error occurred while trying to get an associated web property's ad channels.
	//
	AdSenseAccountError_ReasonGET_CHANNEL_API_ERROR AdSenseAccountError_Reason = "GET_CHANNEL_API_ERROR"

	//
	// An error occured while trying to retrieve account statues from AdSense API. Unable to
	// retrieve account status information. Please try again later.
	//
	AdSenseAccountError_ReasonGET_BULK_ACCOUNT_STATUSES_API_ERROR AdSenseAccountError_Reason = "GET_BULK_ACCOUNT_STATUSES_API_ERROR"

	//
	// An error occured while trying to resend the account association verification email. Error
	// resending verification email. Please try again.
	//
	AdSenseAccountError_ReasonRESEND_VERIFICATION_EMAIL_ERROR AdSenseAccountError_Reason = "RESEND_VERIFICATION_EMAIL_ERROR"

	//
	// An error occured while trying to retrieve a response from the AdSense API. There was a
	// problem processing your request. Please try again later.
	//
	AdSenseAccountError_ReasonUNEXPECTED_API_RESPONSE_ERROR AdSenseAccountError_Reason = "UNEXPECTED_API_RESPONSE_ERROR"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdSenseAccountError_ReasonUNKNOWN AdSenseAccountError_Reason = "UNKNOWN"
)

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type AssetError_Reason string

const (

	//
	// An asset name must be unique across advertiser.
	//
	AssetError_ReasonNON_UNIQUE_NAME AssetError_Reason = "NON_UNIQUE_NAME"

	//
	// The file name is too long.
	//
	AssetError_ReasonFILE_NAME_TOO_LONG AssetError_Reason = "FILE_NAME_TOO_LONG"

	//
	// The file size is too large.
	//
	AssetError_ReasonFILE_SIZE_TOO_LARGE AssetError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// Required client code is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT"

	//
	// Required height is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT"

	//
	// Required width is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH"

	//
	// Required format is not present in the mobile code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT"

	//
	// The parameter value in the code snippet is invalid.
	//
	AssetError_ReasonINVALID_CODE_SNIPPET_PARAMETER_VALUE AssetError_Reason = "INVALID_CODE_SNIPPET_PARAMETER_VALUE"

	//
	// Invalid asset Id.
	//
	AssetError_ReasonINVALID_ASSET_ID AssetError_Reason = "INVALID_ASSET_ID"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AssetError_ReasonUNKNOWN AssetError_Reason = "UNKNOWN"
)

//
// Specific audience extension error reasons.
//

type AudienceExtensionError_Reason string

const (

	//
	// Frequency caps are not supported by audience extension line items
	//
	AudienceExtensionError_ReasonFREQUENCY_CAPS_NOT_SUPPORTED AudienceExtensionError_Reason = "FREQUENCY_CAPS_NOT_SUPPORTED"

	//
	// Audience extension line items can only target geography
	//
	AudienceExtensionError_ReasonINVALID_TARGETING AudienceExtensionError_Reason = "INVALID_TARGETING"

	//
	// Audience extension line items can only target audience extension inventory units
	//
	AudienceExtensionError_ReasonINVENTORY_UNIT_TARGETING_INVALID AudienceExtensionError_Reason = "INVENTORY_UNIT_TARGETING_INVALID"

	//
	// Audience extension line items do not support {@link CreativeRotationType#SEQUENTIAL}.
	//
	AudienceExtensionError_ReasonINVALID_CREATIVE_ROTATION AudienceExtensionError_Reason = "INVALID_CREATIVE_ROTATION"

	//
	// The given ID of the external entity is not valid
	//
	AudienceExtensionError_ReasonINVALID_EXTERNAL_ENTITY_ID AudienceExtensionError_Reason = "INVALID_EXTERNAL_ENTITY_ID"

	//
	// Audience extension line items only support {@link LineItemType#STANDARD}.
	//
	AudienceExtensionError_ReasonINVALID_LINE_ITEM_TYPE AudienceExtensionError_Reason = "INVALID_LINE_ITEM_TYPE"

	//
	// Audience extension max bid is invalid when it is greater then the max budget.
	//
	AudienceExtensionError_ReasonINVALID_MAX_BID AudienceExtensionError_Reason = "INVALID_MAX_BID"

	//
	// Bulk update for audience extension line items is not allowed.
	//
	AudienceExtensionError_ReasonAUDIENCE_EXTENSION_BULK_UPDATE_NOT_ALLOWED AudienceExtensionError_Reason = "AUDIENCE_EXTENSION_BULK_UPDATE_NOT_ALLOWED"

	//
	// An unexpected error occurred.
	//
	AudienceExtensionError_ReasonUNEXPECTED_AUDIENCE_EXTENSION_ERROR AudienceExtensionError_Reason = "UNEXPECTED_AUDIENCE_EXTENSION_ERROR"

	//
	// The value entered for the maximum daily budget on an audience extension line item exceeds
	// the maximum allowed.
	//
	AudienceExtensionError_ReasonMAX_DAILY_BUDGET_AMOUNT_EXCEEDED AudienceExtensionError_Reason = "MAX_DAILY_BUDGET_AMOUNT_EXCEEDED"

	//
	// Creating a campaign for a line item that already has an associated campaign is not allowed.
	//
	AudienceExtensionError_ReasonEXTERNAL_CAMPAIGN_ALREADY_EXISTS AudienceExtensionError_Reason = "EXTERNAL_CAMPAIGN_ALREADY_EXISTS"

	//
	// Audience extension was specified on a line item but the feature was not
	// enabled.
	//
	AudienceExtensionError_ReasonAUDIENCE_EXTENSION_WITHOUT_FEATURE AudienceExtensionError_Reason = "AUDIENCE_EXTENSION_WITHOUT_FEATURE"

	//
	// Audience extension was specified on a line item but no audience extension account has
	// been linked.
	//
	AudienceExtensionError_ReasonAUDIENCE_EXTENSION_WITHOUT_LINKED_ACCOUNT AudienceExtensionError_Reason = "AUDIENCE_EXTENSION_WITHOUT_LINKED_ACCOUNT"

	//
	// Assocation creative size overrides are not allowed with audience extension.
	//
	AudienceExtensionError_ReasonCANNOT_OVERRIDE_CREATIVE_SIZE_WITH_AUDIENCE_EXTENSION AudienceExtensionError_Reason = "CANNOT_OVERRIDE_CREATIVE_SIZE_WITH_AUDIENCE_EXTENSION"

	//
	// Some association overrides are not allowed with audience extension.
	//
	AudienceExtensionError_ReasonCANNOT_OVERRIDE_FIELD_WITH_AUDIENCE_EXTENSION AudienceExtensionError_Reason = "CANNOT_OVERRIDE_FIELD_WITH_AUDIENCE_EXTENSION"

	//
	// Only one creative placeholder is allowed for an audience extension line item.
	//
	AudienceExtensionError_ReasonONLY_ONE_CREATIVE_PLACEHOLDER_ALLOWED AudienceExtensionError_Reason = "ONLY_ONE_CREATIVE_PLACEHOLDER_ALLOWED"

	//
	// Only one audience extension line item can be associated with a given order.
	//
	AudienceExtensionError_ReasonMULTIPLE_AUDIENCE_EXTENSION_LINE_ITEMS_ON_ORDER AudienceExtensionError_Reason = "MULTIPLE_AUDIENCE_EXTENSION_LINE_ITEMS_ON_ORDER"

	//
	// Audience extension line items must be copied separately from their associated creatives.
	//
	AudienceExtensionError_ReasonCANNOT_COPY_AUDIENCE_EXTENSION_LINE_ITEMS_AND_CREATIVES_TOGETHER AudienceExtensionError_Reason = "CANNOT_COPY_AUDIENCE_EXTENSION_LINE_ITEMS_AND_CREATIVES_TOGETHER"

	//
	// Audience extension is no longer supported and cannot be used.
	//
	AudienceExtensionError_ReasonFEATURE_DEPRECATED AudienceExtensionError_Reason = "FEATURE_DEPRECATED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AudienceExtensionError_ReasonUNKNOWN AudienceExtensionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeAssetMacroError_Reason string

const (

	//
	// Invalid macro name specified. Macro names must start with an alpha
	// character and consist only of alpha-numeric characters and underscores
	// and be between 1 and 64 characters.
	//
	CreativeAssetMacroError_ReasonINVALID_MACRO_NAME CreativeAssetMacroError_Reason = "INVALID_MACRO_NAME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeAssetMacroError_ReasonUNKNOWN CreativeAssetMacroError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeError_Reason string

const (

	//
	// {@link FlashRedirectCreative#flashUrl} and
	// {@link FlashRedirectCreative#fallbackUrl} are the same. The fallback URL
	// is used when the flash URL does not work and must be different from it.
	//
	CreativeError_ReasonFLASH_AND_FALLBACK_URL_ARE_SAME CreativeError_Reason = "FLASH_AND_FALLBACK_URL_ARE_SAME"

	//
	// The internal redirect URL was invalid. The URL must have the following
	// syntax http://ad.doubleclick.net/ad/sitename/;sz=size.
	//
	CreativeError_ReasonINVALID_INTERNAL_REDIRECT_URL CreativeError_Reason = "INVALID_INTERNAL_REDIRECT_URL"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} is required.
	//
	CreativeError_ReasonDESTINATION_URL_REQUIRED CreativeError_Reason = "DESTINATION_URL_REQUIRED"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} must be empty when its type is
	// {@link DestinationUrlType#NONE}.
	//
	CreativeError_ReasonDESTINATION_URL_NOT_EMPTY CreativeError_Reason = "DESTINATION_URL_NOT_EMPTY"

	//
	// The provided {@link DestinationUrlType} is not supported for the creative type it is
	// being used on.
	//
	CreativeError_ReasonDESTINATION_URL_TYPE_NOT_SUPPORTED CreativeError_Reason = "DESTINATION_URL_TYPE_NOT_SUPPORTED"

	//
	// Cannot create or update legacy DART For Publishers creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE"

	//
	// Cannot create or update legacy mobile creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE"

	//
	// The user is missing a necessary feature.
	//
	CreativeError_ReasonMISSING_FEATURE CreativeError_Reason = "MISSING_FEATURE"

	//
	// Company type should be one of Advertisers, House Advertisers and
	// Ad Networks.
	//
	CreativeError_ReasonINVALID_COMPANY_TYPE CreativeError_Reason = "INVALID_COMPANY_TYPE"

	//
	// Invalid size for AdSense dynamic allocation creative.
	// Only valid AFC sizes are allowed.
	//
	CreativeError_ReasonINVALID_ADSENSE_CREATIVE_SIZE CreativeError_Reason = "INVALID_ADSENSE_CREATIVE_SIZE"

	//
	// Invalid size for Ad Exchange dynamic allocation creative.
	// Only valid Ad Exchange sizes are allowed.
	//
	CreativeError_ReasonINVALID_AD_EXCHANGE_CREATIVE_SIZE CreativeError_Reason = "INVALID_AD_EXCHANGE_CREATIVE_SIZE"

	//
	// Assets associated with the same creative must be unique.
	//
	CreativeError_ReasonDUPLICATE_ASSET_IN_CREATIVE CreativeError_Reason = "DUPLICATE_ASSET_IN_CREATIVE"

	//
	// A creative asset cannot contain an asset ID and a byte array.
	//
	CreativeError_ReasonCREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY CreativeError_Reason = "CREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY"

	//
	// Cannot create or update unsupported creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE"

	//
	// Cannot create programmatic creatives.
	//
	CreativeError_ReasonCANNOT_CREATE_PROGRAMMATIC_CREATIVES CreativeError_Reason = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	//
	// A creative must have valid size to use the third-party impression tracker.
	//
	CreativeError_ReasonINVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER CreativeError_Reason = "INVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER"

	//
	// Ineligible creatives can not be deactivated.
	//
	CreativeError_ReasonCANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS CreativeError_Reason = "CANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS"

	//
	// Ad Manager hosted video creatives must contain a video asset.
	//
	CreativeError_ReasonHOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET CreativeError_Reason = "HOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET"

	//
	// {@link ImageCreative#thirdPartyImpressionTrackingUrls} should not contain more than one url.
	//
	CreativeError_ReasonCANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS CreativeError_Reason = "CANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeError_ReasonUNKNOWN CreativeError_Reason = "UNKNOWN"
)

type CreativePreviewError_Reason string

const (

	//
	// The creative cannot be previewed on this page.
	//
	CreativePreviewError_ReasonCANNOT_GENERATE_PREVIEW_URL CreativePreviewError_Reason = "CANNOT_GENERATE_PREVIEW_URL"

	//
	// Preview URLs for native creatives must be retrieved with {@link
	// LineItemCreativeAssociationService#getPreviewUrlsForNativeStyles}.
	//
	CreativePreviewError_ReasonCANNOT_GENERATE_PREVIEW_URL_FOR_NATIVE_CREATIVES CreativePreviewError_Reason = "CANNOT_GENERATE_PREVIEW_URL_FOR_NATIVE_CREATIVES"

	//
	// Third party creatives must have an html snippet set in order to obtain a preview URL.
	//
	CreativePreviewError_ReasonHTML_SNIPPET_REQUIRED_FOR_THIRD_PARTY_CREATIVE CreativePreviewError_Reason = "HTML_SNIPPET_REQUIRED_FOR_THIRD_PARTY_CREATIVE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativePreviewError_ReasonUNKNOWN CreativePreviewError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeSetError_Reason string

const (

	//
	// The 'video' feature is required but not enabled.
	//
	CreativeSetError_ReasonVIDEO_FEATURE_REQUIRED CreativeSetError_Reason = "VIDEO_FEATURE_REQUIRED"

	//
	// Video creatives (including overlays, VAST redirects, etc..) cannot be created
	// or updated through the API.
	//
	CreativeSetError_ReasonCANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES CreativeSetError_Reason = "CANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES"

	//
	// The 'roadblock' feature is required but not enabled.
	//
	CreativeSetError_ReasonROADBLOCK_FEATURE_REQUIRED CreativeSetError_Reason = "ROADBLOCK_FEATURE_REQUIRED"

	//
	// A master creative cannot be a companion creative in the same creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BE_COMPANION CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BE_COMPANION"

	//
	// Creatives in a creative set must be for the same advertiser.
	//
	CreativeSetError_ReasonINVALID_ADVERTISER CreativeSetError_Reason = "INVALID_ADVERTISER"

	//
	// Updating a master creative in a creative set is not allowed.
	//
	CreativeSetError_ReasonUPDATE_MASTER_CREATIVE_NOT_ALLOWED CreativeSetError_Reason = "UPDATE_MASTER_CREATIVE_NOT_ALLOWED"

	//
	// A master creative must belong to only one video creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS"

	//
	// The {@Code SkippableAdType} is not allowed.
	//
	CreativeSetError_ReasonSKIPPABLE_AD_TYPE_NOT_ALLOWED CreativeSetError_Reason = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeSetError_ReasonUNKNOWN CreativeSetError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateError_Reason string

const (

	//
	// The XML of the creative template definition is malformed and cannot be parsed.
	//
	CreativeTemplateError_ReasonCANNOT_PARSE_CREATIVE_TEMPLATE CreativeTemplateError_Reason = "CANNOT_PARSE_CREATIVE_TEMPLATE"

	//
	// A creative template has multiple variables with the same uniqueName.
	//
	CreativeTemplateError_ReasonVARIABLE_DUPLICATE_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_DUPLICATE_UNIQUE_NAME"

	//
	// The creative template contains a variable with invalid characters. Valid
	// characters are letters, numbers, spaces, forward slashes, dashes,
	// and underscores.
	//
	CreativeTemplateError_ReasonVARIABLE_INVALID_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_INVALID_UNIQUE_NAME"

	//
	// Multiple choices for a CreativeTemplateListStringVariable have the same value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_DUPLICATE_VALUE CreativeTemplateError_Reason = "LIST_CHOICE_DUPLICATE_VALUE"

	//
	// The choices for a CreativeTemplateListStringVariable do not contain the
	// default value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_NEEDS_DEFAULT CreativeTemplateError_Reason = "LIST_CHOICE_NEEDS_DEFAULT"

	//
	// There are no choices specified for the list variable.
	//
	CreativeTemplateError_ReasonLIST_CHOICES_EMPTY CreativeTemplateError_Reason = "LIST_CHOICES_EMPTY"

	//
	// No target platform is assigned to a creative template.
	//
	CreativeTemplateError_ReasonNO_TARGET_PLATFORMS CreativeTemplateError_Reason = "NO_TARGET_PLATFORMS"

	//
	// More than one target platform is assigned to a single creative template.
	//
	CreativeTemplateError_ReasonMULTIPLE_TARGET_PLATFORMS CreativeTemplateError_Reason = "MULTIPLE_TARGET_PLATFORMS"

	//
	// The formatter contains a placeholder which is not defined as a variable.
	//
	CreativeTemplateError_ReasonUNRECOGNIZED_PLACEHOLDER CreativeTemplateError_Reason = "UNRECOGNIZED_PLACEHOLDER"

	//
	// There are variables defined which are not being used in the formatter.
	//
	CreativeTemplateError_ReasonPLACEHOLDERS_NOT_IN_FORMATTER CreativeTemplateError_Reason = "PLACEHOLDERS_NOT_IN_FORMATTER"

	//
	// The creative template is interstitial, but the formatter doesn't contain
	// an interstitial macro.
	//
	CreativeTemplateError_ReasonMISSING_INTERSTITIAL_MACRO CreativeTemplateError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateError_ReasonUNKNOWN CreativeTemplateError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateOperationError_Reason string

const (

	//
	// The current user is not allowed to modify this creative template.
	//
	CreativeTemplateOperationError_ReasonNOT_ALLOWED CreativeTemplateOperationError_Reason = "NOT_ALLOWED"

	//
	// The operation is not applicable to the current state.
	// (e.g. Trying to activate an active creative template)
	//
	CreativeTemplateOperationError_ReasonNOT_APPLICABLE CreativeTemplateOperationError_Reason = "NOT_APPLICABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateOperationError_ReasonUNKNOWN CreativeTemplateOperationError_Reason = "UNKNOWN"
)

//
// The reason of the error.
//

type CrossSellError_Reason string

const (

	//
	// A company for cross-sell partner must be of type {@link Company.Type#PARTNER}.
	//
	CrossSellError_ReasonCOMPANY_IS_NOT_DISTRIBUTION_PARTNER CrossSellError_Reason = "COMPANY_IS_NOT_DISTRIBUTION_PARTNER"

	//
	// The network code of a cross-sell partner cannot be changed.
	//
	CrossSellError_ReasonCHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED CrossSellError_Reason = "CHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED"

	//
	// A cross-sell partner must have a partner name.
	//
	CrossSellError_ReasonMISSING_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "MISSING_DISTRIBUTOR_PARTNER_NAME"

	//
	// The cross-sell distributor publisher feature must be enabled.
	//
	CrossSellError_ReasonDISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "DISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell publisher features must be enabled on the partner's network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell partner name conflicts with an ad unit name on the partner's network.
	//
	CrossSellError_ReasonINVALID_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "INVALID_DISTRIBUTOR_PARTNER_NAME"

	//
	// The network code of a cross-sell partner is invalid.
	//
	CrossSellError_ReasonINVALID_CONTENT_PROVIDER_NETWORK CrossSellError_Reason = "INVALID_CONTENT_PROVIDER_NETWORK"

	//
	// The content provider network must be different than the distributor network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK"

	//
	// The same network code was already enabled for cross-sell in a different company.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is an error.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_ERROR CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_ERROR"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is a warning.
	//
	// <p>By setting {@link LineItem#skipCrossSellingRuleWarningChecks}, the content partner can
	// suppress the warning (and create or save the line item).
	//
	// <p>This flag is available beginning in V201411.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_WARNING CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_WARNING"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CrossSellError_ReasonUNKNOWN CrossSellError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomCreativeError_Reason string

const (

	//
	// Macros associated with a single custom creative must have unique names.
	//
	CustomCreativeError_ReasonDUPLICATE_MACRO_NAME_FOR_CREATIVE CustomCreativeError_Reason = "DUPLICATE_MACRO_NAME_FOR_CREATIVE"

	//
	// The file macro referenced in the snippet does not exist.
	//
	CustomCreativeError_ReasonSNIPPET_REFERENCES_MISSING_MACRO CustomCreativeError_Reason = "SNIPPET_REFERENCES_MISSING_MACRO"

	//
	// The macro referenced in the snippet is not valid.
	//
	CustomCreativeError_ReasonUNRECOGNIZED_MACRO CustomCreativeError_Reason = "UNRECOGNIZED_MACRO"

	//
	// Custom creatives are not allowed in this context.
	//
	CustomCreativeError_ReasonCUSTOM_CREATIVE_NOT_ALLOWED CustomCreativeError_Reason = "CUSTOM_CREATIVE_NOT_ALLOWED"

	//
	// The custom creative is an interstitial, but the snippet is missing an
	// interstitial macro.
	//
	CustomCreativeError_ReasonMISSING_INTERSTITIAL_MACRO CustomCreativeError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// Macros associated with the same custom creative cannot share the same
	// asset.
	//
	CustomCreativeError_ReasonDUPLICATE_ASSET_IN_MACROS CustomCreativeError_Reason = "DUPLICATE_ASSET_IN_MACROS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomCreativeError_ReasonUNKNOWN CustomCreativeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomFieldValueError_Reason string

const (

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_NOT_FOUND"

	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_INACTIVE CustomFieldValueError_Reason = "CUSTOM_FIELD_INACTIVE"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_OPTION_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueError_ReasonINVALID_ENTITY_TYPE CustomFieldValueError_Reason = "INVALID_ENTITY_TYPE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueError_ReasonUNKNOWN CustomFieldValueError_Reason = "UNKNOWN"
)

//
// The reasons for the entity children limit reached error.
//

type EntityChildrenLimitReachedError_Reason string

const (

	//
	// The number of line items on the order exceeds the max number of line items allowed per order
	// in the network.
	//
	EntityChildrenLimitReachedError_ReasonLINE_ITEM_LIMIT_FOR_ORDER_REACHED EntityChildrenLimitReachedError_Reason = "LINE_ITEM_LIMIT_FOR_ORDER_REACHED"

	//
	// The number of creatives associated with the line item exceeds the max number of creatives
	// allowed to be associated with a line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonCREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "CREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED"

	//
	// The number of ad units on the placement exceeds the max number of ad units
	// allowed per placement in the network.
	//
	EntityChildrenLimitReachedError_ReasonAD_UNIT_LIMIT_FOR_PLACEMENT_REACHED EntityChildrenLimitReachedError_Reason = "AD_UNIT_LIMIT_FOR_PLACEMENT_REACHED"

	//
	// The number of targeting expressions on the line item exceeds the max number of targeting
	// expressions allowed per line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED"

	//
	// The size of a single targeting expression tree exceeds the max size allowed by the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_SIZE_LIMIT_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_SIZE_LIMIT_REACHED"

	//
	// The number of custom targeting values for the free-form or predefined custom targeting key
	// exceeds the max number allowed.
	//
	EntityChildrenLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED EntityChildrenLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED"

	//
	// The total number of targeting expressions on the creatives for the line item exceeds
	// the max number allowed per line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED"

	//
	// The number of attachments added to the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedError_ReasonATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED EntityChildrenLimitReachedError_Reason = "ATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED"

	//
	// The number of proposal line items on the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedError_ReasonPROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED EntityChildrenLimitReachedError_Reason = "PROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED"

	//
	// The number of product package items on the product package exceeds the max number
	// allowed per product package in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED"

	//
	// The number of product template and product base rates on the rate card (including excluded
	// product base rates) exceeds the max number allowed per rate card in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of product package item base rates on the rate card exceeds the max number
	// allowed per rate card in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of premiums of the rate card exceeds the max number allowed per rate card
	// in the network.
	//
	EntityChildrenLimitReachedError_ReasonPREMIUM_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PREMIUM_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of ad units on {@link AdExclusionRule#inventoryTargeting} exceeds the max number
	// of ad units allowed per ad exclusion rule inventory targeting in the network.
	//
	EntityChildrenLimitReachedError_ReasonAD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED EntityChildrenLimitReachedError_Reason = "AD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED"

	//
	// The number of native styles under the native creative template exceeds the
	// max number of native styles allowed per native creative template in the
	// network.
	//
	EntityChildrenLimitReachedError_ReasonNATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED EntityChildrenLimitReachedError_Reason = "NATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED"

	//
	// The number of targeting expressions on the native style exceeds the max number of targeting
	// expressions allowed per native style in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityChildrenLimitReachedError_ReasonUNKNOWN EntityChildrenLimitReachedError_Reason = "UNKNOWN"
)

//
// The reasons for the entity limit reached error.
//

type EntityLimitReachedError_Reason string

const (

	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_LIMIT_REACHED EntityLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonAD_EXCLUSION_RULES_LIMIT_REACHED EntityLimitReachedError_Reason = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonPLACEMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "PLACEMENTS_LIMIT_REACHED"

	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonLINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_LINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonDAI_ENCODING_PROFILES_LIMIT_REACHED EntityLimitReachedError_Reason = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonTRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFORECAST_ADJUSTMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_EXPERIMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonSITES_LIMIT_REACHED EntityLimitReachedError_Reason = "SITES_LIMIT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedError_ReasonUNKNOWN EntityLimitReachedError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type FileError_Reason string

const (

	//
	// The provided byte array is empty.
	//
	FileError_ReasonMISSING_CONTENTS FileError_Reason = "MISSING_CONTENTS"

	//
	// The provided file is larger than the maximum size defined for the
	// network.
	//
	FileError_ReasonSIZE_TOO_LARGE FileError_Reason = "SIZE_TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FileError_ReasonUNKNOWN FileError_Reason = "UNKNOWN"
)

//
// Error reasons that may arise during HTML5 bundle processing.
//

type HtmlBundleProcessorError_Reason string

const (

	//
	// Cannot extract files from HTML5 bundle.
	//
	HtmlBundleProcessorError_ReasonCANNOT_EXTRACT_FILES_FROM_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_EXTRACT_FILES_FROM_BUNDLE"

	//
	// Bundle cannot have hard-coded click tag url(s).
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_HARD_CODED HtmlBundleProcessorError_Reason = "CLICK_TAG_HARD_CODED"

	//
	// Bundles created using GWD (Google Web Designer) cannot have click tags. GWD-published
	// bundles should use exit events instead of defining var {@code clickTAG}.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_IN_GWD_UNUPPORTED HtmlBundleProcessorError_Reason = "CLICK_TAG_IN_GWD_UNUPPORTED"

	//
	// Click tag detected outside of primary HTML file.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_NOT_IN_PRIMARY_HTML HtmlBundleProcessorError_Reason = "CLICK_TAG_NOT_IN_PRIMARY_HTML"

	//
	// Click tag or exit function has invalid name or url.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_INVALID HtmlBundleProcessorError_Reason = "CLICK_TAG_INVALID"

	//
	// HTML5 bundle or total size of extracted files cannot be more than 1000 KB.
	//
	HtmlBundleProcessorError_ReasonFILE_SIZE_TOO_LARGE HtmlBundleProcessorError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// HTML5 bundle cannot have more than 50 files.
	//
	HtmlBundleProcessorError_ReasonFILES_TOO_MANY HtmlBundleProcessorError_Reason = "FILES_TOO_MANY"

	//
	// Flash files in HTML5 bundles are not supported. Any file with a .swf or .flv extension
	// causes this error.
	//
	HtmlBundleProcessorError_ReasonFLASH_UNSUPPORTED HtmlBundleProcessorError_Reason = "FLASH_UNSUPPORTED"

	//
	// The HTML5 bundle contains unsupported GWD component(s).
	//
	HtmlBundleProcessorError_ReasonGWD_COMPONENTS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_COMPONENTS_UNSUPPORTED"

	//
	// The HTML5 bundle contains Unsupported GWD Enabler method(s).
	//
	HtmlBundleProcessorError_ReasonGWD_ENABLER_METHODS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_ENABLER_METHODS_UNSUPPORTED"

	//
	// GWD properties are invalid.
	//
	HtmlBundleProcessorError_ReasonGWD_PROPERTIES_INVALID HtmlBundleProcessorError_Reason = "GWD_PROPERTIES_INVALID"

	//
	// The HTML5 bundle contains broken relative file reference(s).
	//
	HtmlBundleProcessorError_ReasonLINKED_FILES_NOT_FOUND HtmlBundleProcessorError_Reason = "LINKED_FILES_NOT_FOUND"

	//
	// No primary HTML file detected.
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_MISSING HtmlBundleProcessorError_Reason = "PRIMARY_HTML_MISSING"

	//
	// Multiple HTML files are detected. One of them should be named as {@code index.html}
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_UNDETERMINED HtmlBundleProcessorError_Reason = "PRIMARY_HTML_UNDETERMINED"

	//
	// An SVG block could not be parsed.
	//
	HtmlBundleProcessorError_ReasonSVG_BLOCK_INVALID HtmlBundleProcessorError_Reason = "SVG_BLOCK_INVALID"

	//
	// The HTML5 bundle cannot be decoded.
	//
	HtmlBundleProcessorError_ReasonCANNOT_DECODE_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_DECODE_BUNDLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	HtmlBundleProcessorError_ReasonUNKNOWN HtmlBundleProcessorError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ImageError_Reason string

const (

	//
	// The file's format is invalid.
	//
	ImageError_ReasonINVALID_IMAGE ImageError_Reason = "INVALID_IMAGE"

	//
	// {@link Size#width} and {@link Size#height} cannot be negative.
	//
	ImageError_ReasonINVALID_SIZE ImageError_Reason = "INVALID_SIZE"

	//
	// The actual image size does not match the expected image size.
	//
	ImageError_ReasonUNEXPECTED_SIZE ImageError_Reason = "UNEXPECTED_SIZE"

	//
	// The size of the asset is larger than that of the overlay creative.
	//
	ImageError_ReasonOVERLAY_SIZE_TOO_LARGE ImageError_Reason = "OVERLAY_SIZE_TOO_LARGE"

	//
	// Animated images are not allowed.
	//
	ImageError_ReasonANIMATED_NOT_ALLOWED ImageError_Reason = "ANIMATED_NOT_ALLOWED"

	//
	// Animation length exceeded the allowed policy limit.
	//
	ImageError_ReasonANIMATION_TOO_LONG ImageError_Reason = "ANIMATION_TOO_LONG"

	//
	// Images in CMYK color formats are not allowed.
	//
	ImageError_ReasonCMYK_JPEG_NOT_ALLOWED ImageError_Reason = "CMYK_JPEG_NOT_ALLOWED"

	//
	// Flash files are not allowed.
	//
	ImageError_ReasonFLASH_NOT_ALLOWED ImageError_Reason = "FLASH_NOT_ALLOWED"

	//
	// If {@link FlashCreative#clickTagRequired} is {@code true}, then the flash
	// file is required to have a click tag embedded in it.
	//
	ImageError_ReasonFLASH_WITHOUT_CLICKTAG ImageError_Reason = "FLASH_WITHOUT_CLICKTAG"

	//
	// Animated visual effect is not allowed.
	//
	ImageError_ReasonANIMATED_VISUAL_EFFECT ImageError_Reason = "ANIMATED_VISUAL_EFFECT"

	//
	// An error was encountered in the flash file.
	//
	ImageError_ReasonFLASH_ERROR ImageError_Reason = "FLASH_ERROR"

	//
	// Incorrect image layout.
	//
	ImageError_ReasonLAYOUT_PROBLEM ImageError_Reason = "LAYOUT_PROBLEM"

	//
	// Flash files with network objects are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_OBJECTS ImageError_Reason = "FLASH_HAS_NETWORK_OBJECTS"

	//
	// Flash files with network methods are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_METHODS ImageError_Reason = "FLASH_HAS_NETWORK_METHODS"

	//
	// Flash files with hard-coded click thru URLs are not allowed.
	//
	ImageError_ReasonFLASH_HAS_URL ImageError_Reason = "FLASH_HAS_URL"

	//
	// Flash files with mouse tracking are not allowed.
	//
	ImageError_ReasonFLASH_HAS_MOUSE_TRACKING ImageError_Reason = "FLASH_HAS_MOUSE_TRACKING"

	//
	// Flash files that generate or use random numbers are not allowed.
	//
	ImageError_ReasonFLASH_HAS_RANDOM_NUM ImageError_Reason = "FLASH_HAS_RANDOM_NUM"

	//
	// Flash files with self targets are not allowed.
	//
	ImageError_ReasonFLASH_SELF_TARGETS ImageError_Reason = "FLASH_SELF_TARGETS"

	//
	// Flash file contains a bad geturl target.
	//
	ImageError_ReasonFLASH_BAD_GETURL_TARGET ImageError_Reason = "FLASH_BAD_GETURL_TARGET"

	//
	// Flash or ActionScript version in the submitted file is not supported.
	//
	ImageError_ReasonFLASH_VERSION_NOT_SUPPORTED ImageError_Reason = "FLASH_VERSION_NOT_SUPPORTED"

	//
	// The uploaded file is too large.
	//
	ImageError_ReasonFILE_TOO_LARGE ImageError_Reason = "FILE_TOO_LARGE"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_IRS ImageError_Reason = "SYSTEM_ERROR_IRS"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_SCS ImageError_Reason = "SYSTEM_ERROR_SCS"

	//
	// The image density for a primary asset was not one of the expected image densities.
	//
	ImageError_ReasonUNEXPECTED_PRIMARY_ASSET_DENSITY ImageError_Reason = "UNEXPECTED_PRIMARY_ASSET_DENSITY"

	//
	// Two or more assets have the same image density.
	//
	ImageError_ReasonDUPLICATE_ASSET_DENSITY ImageError_Reason = "DUPLICATE_ASSET_DENSITY"

	//
	// The creative does not contain a primary asset. (For high-density creatives, the primary
	// asset must be a standard image file with 1x density.)
	//
	ImageError_ReasonMISSING_DEFAULT_ASSET ImageError_Reason = "MISSING_DEFAULT_ASSET"

	//
	// preverified_mime_type is not in the client spec's allowlist.
	//
	ImageError_ReasonPREVERIFIED_MIMETYPE_NOT_ALLOWED ImageError_Reason = "PREVERIFIED_MIMETYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageError_ReasonUNKNOWN ImageError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type InvalidPhoneNumberError_Reason string

const (

	//
	// The phone number is invalid.
	//
	InvalidPhoneNumberError_ReasonINVALID_FORMAT InvalidPhoneNumberError_Reason = "INVALID_FORMAT"

	//
	// The phone number is too short.
	//
	InvalidPhoneNumberError_ReasonTOO_SHORT InvalidPhoneNumberError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidPhoneNumberError_ReasonUNKNOWN InvalidPhoneNumberError_Reason = "UNKNOWN"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LabelEntityAssociationError_Reason string

const (

	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION"

	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationError_ReasonINVALID_ASSOCIATION LabelEntityAssociationError_Reason = "INVALID_ASSOCIATION"

	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationError_ReasonNEGATION_NOT_ALLOWED LabelEntityAssociationError_Reason = "NEGATION_NOT_ALLOWED"

	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION_WITH_NEGATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationError_ReasonUNKNOWN LabelEntityAssociationError_Reason = "UNKNOWN"
)

//
// Describes the status of the association.
//

type LineItemCreativeAssociation_Status string

const (

	//
	// The association is active and the associated {@link Creative} can be served.
	//
	LineItemCreativeAssociation_StatusACTIVE LineItemCreativeAssociation_Status = "ACTIVE"

	//
	// The association is active but the associated {@link Creative} may not be served, because its
	// size is not targeted by the line item.
	//
	LineItemCreativeAssociation_StatusNOT_SERVING LineItemCreativeAssociation_Status = "NOT_SERVING"

	//
	// The association is inactive and the associated {@link Creative} is ineligible for being
	// served.
	//
	LineItemCreativeAssociation_StatusINACTIVE LineItemCreativeAssociation_Status = "INACTIVE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociation_StatusUNKNOWN LineItemCreativeAssociation_Status = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LineItemCreativeAssociationError_Reason string

const (

	//
	// Cannot associate a creative to the wrong advertiser
	//
	LineItemCreativeAssociationError_ReasonCREATIVE_IN_WRONG_ADVERTISERS_LIBRARY LineItemCreativeAssociationError_Reason = "CREATIVE_IN_WRONG_ADVERTISERS_LIBRARY"

	//
	// The creative type being associated is a invalid for the line item type.
	//
	LineItemCreativeAssociationError_ReasonINVALID_LINEITEM_CREATIVE_PAIRING LineItemCreativeAssociationError_Reason = "INVALID_LINEITEM_CREATIVE_PAIRING"

	//
	// Association start date cannot be before line item start date
	//
	LineItemCreativeAssociationError_ReasonSTARTDATE_BEFORE_LINEITEM_STARTDATE LineItemCreativeAssociationError_Reason = "STARTDATE_BEFORE_LINEITEM_STARTDATE"

	//
	// Association start date cannot be same as or after line item end date
	//
	LineItemCreativeAssociationError_ReasonSTARTDATE_NOT_BEFORE_LINEITEM_ENDDATE LineItemCreativeAssociationError_Reason = "STARTDATE_NOT_BEFORE_LINEITEM_ENDDATE"

	//
	// Association end date cannot be after line item end date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_AFTER_LINEITEM_ENDDATE LineItemCreativeAssociationError_Reason = "ENDDATE_AFTER_LINEITEM_ENDDATE"

	//
	// Association end date cannot be same as or before line item start date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_NOT_AFTER_LINEITEM_STARTDATE LineItemCreativeAssociationError_Reason = "ENDDATE_NOT_AFTER_LINEITEM_STARTDATE"

	//
	// Association end date cannot be same as or before its start date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_NOT_AFTER_STARTDATE LineItemCreativeAssociationError_Reason = "ENDDATE_NOT_AFTER_STARTDATE"

	//
	// Association end date cannot be in the past.
	//
	LineItemCreativeAssociationError_ReasonENDDATE_IN_THE_PAST LineItemCreativeAssociationError_Reason = "ENDDATE_IN_THE_PAST"

	//
	// Cannot copy an association to the same line item without
	// creating new creative
	//
	LineItemCreativeAssociationError_ReasonCANNOT_COPY_WITHIN_SAME_LINE_ITEM LineItemCreativeAssociationError_Reason = "CANNOT_COPY_WITHIN_SAME_LINE_ITEM"

	//
	// Programmatic only supports the "Video" redirect type.
	//
	LineItemCreativeAssociationError_ReasonUNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE LineItemCreativeAssociationError_Reason = "UNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE"

	//
	// Programmatic does not support YouTube hosted creatives.
	//
	LineItemCreativeAssociationError_ReasonUNSUPPORTED_YOUTUBE_HOSTED_CREATIVE LineItemCreativeAssociationError_Reason = "UNSUPPORTED_YOUTUBE_HOSTED_CREATIVE"

	//
	// Programmatic creatives can only be assigned to one line item.
	//
	LineItemCreativeAssociationError_ReasonPROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM LineItemCreativeAssociationError_Reason = "PROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM"

	//
	// Cannot activate a line item creative association if the associated creative is inactive.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE LineItemCreativeAssociationError_Reason = "CANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE"

	//
	// Cannot create programmatic creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_CREATE_PROGRAMMATIC_CREATIVES LineItemCreativeAssociationError_Reason = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	//
	// Cannot update programmatic creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_UPDATE_PROGRAMMATIC_CREATIVES LineItemCreativeAssociationError_Reason = "CANNOT_UPDATE_PROGRAMMATIC_CREATIVES"

	//
	// Cannot associate a creative with a line item if only one of them is set-top box enabled.
	//
	LineItemCreativeAssociationError_ReasonCREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED LineItemCreativeAssociationError_Reason = "CREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED"

	//
	// Cannot delete associations between set-top box enabled line items and set-top box enabled
	// creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS LineItemCreativeAssociationError_Reason = "CANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS"

	//
	// Creative rotation weights must be integers.
	//
	LineItemCreativeAssociationError_ReasonSET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER LineItemCreativeAssociationError_Reason = "SET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER"

	//
	// Creative rotation weights are only valid when creative rotation type is set to
	// {@link CreativeRotationType#MANUAL}.
	//
	LineItemCreativeAssociationError_ReasonINVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT LineItemCreativeAssociationError_Reason = "INVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT"

	//
	// The code snippet of a creative must contain a click macro
	// (%%CLICK_URL_ESC%% or %%CLICK_URL_UNESC%%).
	//
	LineItemCreativeAssociationError_ReasonCLICK_MACROS_REQUIRED LineItemCreativeAssociationError_Reason = "CLICK_MACROS_REQUIRED"

	//
	// The code snippet of a creative must not contain a view macro
	// (%%VIEW_URL_ESC%% or %%VIEW_URL_UNESC%%).
	//
	LineItemCreativeAssociationError_ReasonVIEW_MACROS_NOT_ALLOWED LineItemCreativeAssociationError_Reason = "VIEW_MACROS_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationError_ReasonUNKNOWN LineItemCreativeAssociationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LineItemCreativeAssociationOperationError_Reason string

const (

	//
	// The operation is not allowed due to permissions
	//
	LineItemCreativeAssociationOperationError_ReasonNOT_ALLOWED LineItemCreativeAssociationOperationError_Reason = "NOT_ALLOWED"

	//
	// The operation is not applicable to the current state
	//
	LineItemCreativeAssociationOperationError_ReasonNOT_APPLICABLE LineItemCreativeAssociationOperationError_Reason = "NOT_APPLICABLE"

	//
	// Cannot activate an invalid creative
	//
	LineItemCreativeAssociationOperationError_ReasonCANNOT_ACTIVATE_INVALID_CREATIVE LineItemCreativeAssociationOperationError_Reason = "CANNOT_ACTIVATE_INVALID_CREATIVE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationOperationError_ReasonUNKNOWN LineItemCreativeAssociationOperationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LineItemError_Reason string

const (

	//
	// Some changes may not be allowed because a line item has already started.
	//
	LineItemError_ReasonALREADY_STARTED LineItemError_Reason = "ALREADY_STARTED"

	//
	// Update reservation is not allowed because a line item has
	// already started, users must pause the line item first.
	//
	LineItemError_ReasonUPDATE_RESERVATION_NOT_ALLOWED LineItemError_Reason = "UPDATE_RESERVATION_NOT_ALLOWED"

	//
	// Roadblocking to display all creatives is not allowed.
	//
	LineItemError_ReasonALL_ROADBLOCK_NOT_ALLOWED LineItemError_Reason = "ALL_ROADBLOCK_NOT_ALLOWED"

	//
	// Companion delivery to display all creatives is not allowed.
	//
	LineItemError_ReasonALL_COMPANION_DELIVERY_NOT_ALLOWED LineItemError_Reason = "ALL_COMPANION_DELIVERY_NOT_ALLOWED"

	//
	// Roadblocking to display all master and companion creative set is not allowed.
	//
	LineItemError_ReasonCREATIVE_SET_ROADBLOCK_NOT_ALLOWED LineItemError_Reason = "CREATIVE_SET_ROADBLOCK_NOT_ALLOWED"

	//
	// Fractional percentage is not allowed.
	//
	LineItemError_ReasonFRACTIONAL_PERCENTAGE_NOT_ALLOWED LineItemError_Reason = "FRACTIONAL_PERCENTAGE_NOT_ALLOWED"

	//
	// For certain LineItem configurations discounts are not allowed.
	//
	LineItemError_ReasonDISCOUNT_NOT_ALLOWED LineItemError_Reason = "DISCOUNT_NOT_ALLOWED"

	//
	// Updating a canceled line item is not allowed.
	//
	LineItemError_ReasonUPDATE_CANCELED_LINE_ITEM_NOT_ALLOWED LineItemError_Reason = "UPDATE_CANCELED_LINE_ITEM_NOT_ALLOWED"

	//
	// Updating a pending approval line item is not allowed.
	//
	LineItemError_ReasonUPDATE_PENDING_APPROVAL_LINE_ITEM_NOT_ALLOWED LineItemError_Reason = "UPDATE_PENDING_APPROVAL_LINE_ITEM_NOT_ALLOWED"

	//
	// Updating an archived line item is not allowed.
	//
	LineItemError_ReasonUPDATE_ARCHIVED_LINE_ITEM_NOT_ALLOWED LineItemError_Reason = "UPDATE_ARCHIVED_LINE_ITEM_NOT_ALLOWED"

	//
	// Create or update legacy dfp line item type is not allowed.
	//
	LineItemError_ReasonCREATE_OR_UPDATE_LEGACY_DFP_LINE_ITEM_TYPE_NOT_ALLOWED LineItemError_Reason = "CREATE_OR_UPDATE_LEGACY_DFP_LINE_ITEM_TYPE_NOT_ALLOWED"

	//
	// Copying line item from different company (advertiser)
	// to the same order is not allowed.
	//
	LineItemError_ReasonCOPY_LINE_ITEM_FROM_DIFFERENT_COMPANY_NOT_ALLOWED LineItemError_Reason = "COPY_LINE_ITEM_FROM_DIFFERENT_COMPANY_NOT_ALLOWED"

	//
	// The size is invalid for the specified platform.
	//
	LineItemError_ReasonINVALID_SIZE_FOR_PLATFORM LineItemError_Reason = "INVALID_SIZE_FOR_PLATFORM"

	//
	// The line item type is invalid for the specified platform.
	//
	LineItemError_ReasonINVALID_LINE_ITEM_TYPE_FOR_PLATFORM LineItemError_Reason = "INVALID_LINE_ITEM_TYPE_FOR_PLATFORM"

	//
	// The web property cannot be served on the specified platform.
	//
	LineItemError_ReasonINVALID_WEB_PROPERTY_FOR_PLATFORM LineItemError_Reason = "INVALID_WEB_PROPERTY_FOR_PLATFORM"

	//
	// The web property cannot be served on the specified environment.
	//
	LineItemError_ReasonINVALID_WEB_PROPERTY_FOR_ENVIRONMENT LineItemError_Reason = "INVALID_WEB_PROPERTY_FOR_ENVIRONMENT"

	//
	// AFMA backfill not supported.
	//
	LineItemError_ReasonAFMA_BACKFILL_NOT_ALLOWED LineItemError_Reason = "AFMA_BACKFILL_NOT_ALLOWED"

	//
	// Environment type cannot change once saved.
	//
	LineItemError_ReasonUPDATE_ENVIRONMENT_TYPE_NOT_ALLOWED LineItemError_Reason = "UPDATE_ENVIRONMENT_TYPE_NOT_ALLOWED"

	//
	// The placeholders are invalid because they contain companions,
	// but the line item does not support companions.
	//
	LineItemError_ReasonCOMPANIONS_NOT_ALLOWED LineItemError_Reason = "COMPANIONS_NOT_ALLOWED"

	//
	// The placeholders are invalid because some of them are roadblocks,
	// and some are not.  Either all roadblock placeholders must contain
	// companions, or no placeholders may contain companions.  This does
	// not apply to video creative sets.
	//
	LineItemError_ReasonROADBLOCKS_WITH_NONROADBLOCKS_NOT_ALLOWED LineItemError_Reason = "ROADBLOCKS_WITH_NONROADBLOCKS_NOT_ALLOWED"

	//
	// A line item cannot be updated from having
	// {@link RoadblockingType#CREATIVE_SET} to having a different
	// RoadblockingType, or vice versa.
	//
	LineItemError_ReasonCANNOT_UPDATE_TO_OR_FROM_CREATIVE_SET_ROADBLOCK LineItemError_Reason = "CANNOT_UPDATE_TO_OR_FROM_CREATIVE_SET_ROADBLOCK"

	//
	// Can not change from a backfill line item type once creatives have been
	// assigned.
	//
	LineItemError_ReasonUPDATE_FROM_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED LineItemError_Reason = "UPDATE_FROM_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED"

	//
	// Can not change to a backfill line item type once creatives have been
	// assigned.
	//
	LineItemError_ReasonUPDATE_TO_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED LineItemError_Reason = "UPDATE_TO_BACKFILL_LINE_ITEM_TYPE_NOT_ALLOWED"

	//
	// Can not change to backfill web property once creatives have been
	// assigned.
	//
	LineItemError_ReasonUPDATE_BACKFILL_WEB_PROPERTY_NOT_ALLOWED LineItemError_Reason = "UPDATE_BACKFILL_WEB_PROPERTY_NOT_ALLOWED"

	//
	// The companion delivery option is not valid for your environment type.
	//
	LineItemError_ReasonINVALID_COMPANION_DELIVERY_OPTION_FOR_ENVIRONMENT_TYPE LineItemError_Reason = "INVALID_COMPANION_DELIVERY_OPTION_FOR_ENVIRONMENT_TYPE"

	//
	// Companion backfill is enabled but environment type not video.
	//
	LineItemError_ReasonCOMPANION_BACKFILL_REQUIRES_VIDEO LineItemError_Reason = "COMPANION_BACKFILL_REQUIRES_VIDEO"

	//
	// Companion delivery options require Ad Manager 360 networks.
	//
	LineItemError_ReasonCOMPANION_DELIVERY_OPTION_REQUIRE_PREMIUM LineItemError_Reason = "COMPANION_DELIVERY_OPTION_REQUIRE_PREMIUM"

	//
	// The master size of placeholders have duplicates.
	//
	LineItemError_ReasonDUPLICATE_MASTER_SIZES LineItemError_Reason = "DUPLICATE_MASTER_SIZES"

	//
	// The line item priority is invalid if for dynamic allocation line items
	// it is different than the default for free publishers.  When allowed,
	// Ad Manager 360 users can change the priority to any value.
	//
	LineItemError_ReasonINVALID_PRIORITY_FOR_LINE_ITEM_TYPE LineItemError_Reason = "INVALID_PRIORITY_FOR_LINE_ITEM_TYPE"

	//
	// The environment type is not valid.
	//
	LineItemError_ReasonINVALID_ENVIRONMENT_TYPE LineItemError_Reason = "INVALID_ENVIRONMENT_TYPE"

	//
	// The environment type is not valid for the target platform.
	//
	LineItemError_ReasonINVALID_ENVIRONMENT_TYPE_FOR_PLATFORM LineItemError_Reason = "INVALID_ENVIRONMENT_TYPE_FOR_PLATFORM"

	//
	// Only {@link LineItemType#STANDARD} line items can be auto extended.
	//
	LineItemError_ReasonINVALID_TYPE_FOR_AUTO_EXTENSION LineItemError_Reason = "INVALID_TYPE_FOR_AUTO_EXTENSION"

	//
	// Video line items cannot change the roadblocking type.
	//
	LineItemError_ReasonVIDEO_INVALID_ROADBLOCKING LineItemError_Reason = "VIDEO_INVALID_ROADBLOCKING"

	//
	// The backfill feature is not enabled according to your features.
	//
	LineItemError_ReasonBACKFILL_TYPE_NOT_ALLOWED LineItemError_Reason = "BACKFILL_TYPE_NOT_ALLOWED"

	//
	// The web property is invalid. A line item must have an appropriate web property selected.
	//
	LineItemError_ReasonINVALID_BACKFILL_LINK_TYPE LineItemError_Reason = "INVALID_BACKFILL_LINK_TYPE"

	//
	// All line items in a programmatic order must have web property codes from the same account.
	//
	LineItemError_ReasonDIFFERENT_BACKFILL_ACCOUNT LineItemError_Reason = "DIFFERENT_BACKFILL_ACCOUNT"

	//
	// Companion delivery options are not allowed with dynamic allocation line
	// items.
	//
	LineItemError_ReasonCOMPANION_DELIVERY_OPTIONS_NOT_ALLOWED_WITH_BACKFILL LineItemError_Reason = "COMPANION_DELIVERY_OPTIONS_NOT_ALLOWED_WITH_BACKFILL"

	//
	// Dynamic allocation using the AdExchange should always use an AFC web
	// property.
	//
	LineItemError_ReasonINVALID_WEB_PROPERTY_FOR_ADX_BACKFILL LineItemError_Reason = "INVALID_WEB_PROPERTY_FOR_ADX_BACKFILL"

	//
	// CPM for backfill inventory must be 0.
	//
	LineItemError_ReasonINVALID_COST_PER_UNIT_FOR_BACKFILL LineItemError_Reason = "INVALID_COST_PER_UNIT_FOR_BACKFILL"

	//
	// Aspect ratio sizes cannot be used with video line items.
	//
	LineItemError_ReasonINVALID_SIZE_FOR_ENVIRONMENT LineItemError_Reason = "INVALID_SIZE_FOR_ENVIRONMENT"

	//
	// The specified target platform is not allowed.
	//
	LineItemError_ReasonTARGET_PLATOFRM_NOT_ALLOWED LineItemError_Reason = "TARGET_PLATOFRM_NOT_ALLOWED"

	//
	// Currency on a line item must be one of the specified network currencies.
	//
	LineItemError_ReasonINVALID_LINE_ITEM_CURRENCY LineItemError_Reason = "INVALID_LINE_ITEM_CURRENCY"

	//
	// All money fields on a line item must specify the same currency.
	//
	LineItemError_ReasonLINE_ITEM_CANNOT_HAVE_MULTIPLE_CURRENCIES LineItemError_Reason = "LINE_ITEM_CANNOT_HAVE_MULTIPLE_CURRENCIES"

	//
	// Once a line item has moved into a a delivering state the currency cannot be changed.
	//
	LineItemError_ReasonCANNOT_CHANGE_CURRENCY LineItemError_Reason = "CANNOT_CHANGE_CURRENCY"

	//
	// A DateTime associated with the line item is not valid.
	//
	LineItemError_ReasonINVALID_LINE_ITEM_DATE_TIME LineItemError_Reason = "INVALID_LINE_ITEM_DATE_TIME"

	//
	// CPA {@link LineItem line items} must specify a zero cost for the
	// {@link LineItem#costPerUnit}.
	//
	LineItemError_ReasonINVALID_COST_PER_UNIT_FOR_CPA LineItemError_Reason = "INVALID_COST_PER_UNIT_FOR_CPA"

	//
	// Once a {@link LineItem} is activated its {@link LineItem#costPerUnit} cannot be updated
	// to/from CPA.
	//
	LineItemError_ReasonUPDATE_CPA_COST_TYPE_NOT_ALLOWED LineItemError_Reason = "UPDATE_CPA_COST_TYPE_NOT_ALLOWED"

	//
	// Once a {@link LineItem} is activated its {@link LineItem#costPerUnit} cannot be updated
	// to/from Viewable CPM.
	//
	LineItemError_ReasonUPDATE_VCPM_COST_TYPE_NOT_ALLOWED LineItemError_Reason = "UPDATE_VCPM_COST_TYPE_NOT_ALLOWED"

	//
	// A {@link LineItem} with master/companion creative placeholders cannot have Viewable CPM
	// as its {@link LineItem#costPerUnit}.
	//
	LineItemError_ReasonMASTER_COMPANION_LINE_ITEM_CANNOT_HAVE_VCPM_COST_TYPE LineItemError_Reason = "MASTER_COMPANION_LINE_ITEM_CANNOT_HAVE_VCPM_COST_TYPE"

	//
	// There cannot be goals with duplicated unit type among the secondary goals for a
	// {@link LineItem line items}.
	//
	LineItemError_ReasonDUPLICATED_UNIT_TYPE LineItemError_Reason = "DUPLICATED_UNIT_TYPE"

	//
	// The secondary goals of a {@link LineItem line items} must have the same goal type.
	//
	LineItemError_ReasonMULTIPLE_GOAL_TYPE_NOT_ALLOWED LineItemError_Reason = "MULTIPLE_GOAL_TYPE_NOT_ALLOWED"

	//
	// For a CPA {@link LineItem line item}, the possible combinations for secondary goals must
	// be either click-through conversion only, click-through conversion with view-through
	// conversion or total conversion only. For a Viewable CPM {@link LineItem line item} or a
	// CPM based Sponsorship {@link LineItem line item}, its secondary goal has to be
	// impression-based.
	//
	LineItemError_ReasonINVALID_UNIT_TYPE_COMBINATION_FOR_SECONDARY_GOALS LineItemError_Reason = "INVALID_UNIT_TYPE_COMBINATION_FOR_SECONDARY_GOALS"

	//
	// One or more of the targeting names specified by a creative placeholder or line item
	// creative association were not found on the line item.
	//
	LineItemError_ReasonINVALID_CREATIVE_TARGETING_NAME LineItemError_Reason = "INVALID_CREATIVE_TARGETING_NAME"

	//
	// Creative targeting expressions on the line item can only have custom criteria targeting
	// with {@link CustomTargetingValue.MatchType#EXACT}.
	//
	LineItemError_ReasonINVALID_CREATIVE_CUSTOM_TARGETING_MATCH_TYPE LineItemError_Reason = "INVALID_CREATIVE_CUSTOM_TARGETING_MATCH_TYPE"

	//
	// Line item with creative targeting expressions cannot have creative rotation type set to
	// {@link CreativeRotationType#SEQUENTIAL}.
	//
	LineItemError_ReasonINVALID_CREATIVE_ROTATION_TYPE_WITH_CREATIVE_TARGETING LineItemError_Reason = "INVALID_CREATIVE_ROTATION_TYPE_WITH_CREATIVE_TARGETING"

	//
	// Line items cannot overbook inventory when applying creative-level targeting if the
	// originating proposal line item did not overbook inventory. Remove creative-level targeting
	// and try again.
	//
	LineItemError_ReasonCANNOT_OVERBOOK_WITH_CREATIVE_TARGETING LineItemError_Reason = "CANNOT_OVERBOOK_WITH_CREATIVE_TARGETING"

	//
	// For a managed line item, inventory sizes must match sizes that are set on the originating
	// proposal line item. In the case that a size is broken out by creative-level targeting,
	// the sum of the creative counts for each size must equal the expected creative count that
	// is set for that size on the originating proposal line item.
	//
	LineItemError_ReasonPLACEHOLDERS_DO_NOT_MATCH_PROPOSAL LineItemError_Reason = "PLACEHOLDERS_DO_NOT_MATCH_PROPOSAL"

	//
	// The line item type is not supported for this API version.
	//
	LineItemError_ReasonUNSUPPORTED_LINE_ITEM_TYPE_FOR_THIS_API_VERSION LineItemError_Reason = "UNSUPPORTED_LINE_ITEM_TYPE_FOR_THIS_API_VERSION"

	//
	// Placeholders can only have native creative templates.
	//
	LineItemError_ReasonNATIVE_CREATIVE_TEMPLATE_REQUIRED LineItemError_Reason = "NATIVE_CREATIVE_TEMPLATE_REQUIRED"

	//
	// Non-native placeholders cannot have creative templates.
	//
	LineItemError_ReasonCANNOT_HAVE_CREATIVE_TEMPLATE LineItemError_Reason = "CANNOT_HAVE_CREATIVE_TEMPLATE"

	//
	// Cannot include native creative templates in the placeholders for Ad Exchange line items.
	//
	LineItemError_ReasonCANNOT_INCLUDE_NATIVE_CREATIVE_TEMPLATE LineItemError_Reason = "CANNOT_INCLUDE_NATIVE_CREATIVE_TEMPLATE"

	//
	// Cannot include native placeholders without native creative templates for direct-sold line
	// items.
	//
	LineItemError_ReasonCANNOT_INCLUDE_NATIVE_PLACEHOLDER_WITHOUT_TEMPLATE_ID LineItemError_Reason = "CANNOT_INCLUDE_NATIVE_PLACEHOLDER_WITHOUT_TEMPLATE_ID"

	//
	// For forecasting only, error when line item has duration, but no creative sizes specified.
	//
	LineItemError_ReasonNO_SIZE_WITH_DURATION LineItemError_Reason = "NO_SIZE_WITH_DURATION"

	//
	// Used when the company pointed to by the viewabilityProviderCompanyId is not of type
	// VIEWABILITY_PROVIDER.
	//
	LineItemError_ReasonINVALID_VIEWABILITY_PROVIDER_COMPANY LineItemError_Reason = "INVALID_VIEWABILITY_PROVIDER_COMPANY"

	//
	// An error occurred while accessing the custom pacing curve Google Cloud Storage bucket.
	//
	LineItemError_ReasonCANNOT_ACCESS_CUSTOM_PACING_CURVE_CLOUD_STORAGE_BUCKET LineItemError_Reason = "CANNOT_ACCESS_CUSTOM_PACING_CURVE_CLOUD_STORAGE_BUCKET"

	//
	// CMS Metadata targeting is only supported for video line items.
	//
	LineItemError_ReasonCMS_METADATA_LINE_ITEM_ENVIRONMENT_TYPE_NOT_SUPPORTED LineItemError_Reason = "CMS_METADATA_LINE_ITEM_ENVIRONMENT_TYPE_NOT_SUPPORTED"

	//
	// The {@code SkippableAdType} is not allowed.
	//
	LineItemError_ReasonSKIPPABLE_AD_TYPE_NOT_ALLOWED LineItemError_Reason = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	//
	// Custom pacing curve start time must match the line item's start time.
	//
	LineItemError_ReasonCUSTOM_PACING_CURVE_START_TIME_MUST_MATCH_LINE_ITEM_START_TIME LineItemError_Reason = "CUSTOM_PACING_CURVE_START_TIME_MUST_MATCH_LINE_ITEM_START_TIME"

	//
	// Custom pacing curve goal start time must be before line item end time.
	//
	LineItemError_ReasonCUSTOM_PACING_CURVE_START_TIME_PAST_LINE_ITEM_END_TIME LineItemError_Reason = "CUSTOM_PACING_CURVE_START_TIME_PAST_LINE_ITEM_END_TIME"

	//
	// The line item type is invalid for the specified delivery forecast source.
	//
	LineItemError_ReasonINVALID_LINE_ITEM_TYPE_FOR_DELIVERY_FORECAST_SOURCE LineItemError_Reason = "INVALID_LINE_ITEM_TYPE_FOR_DELIVERY_FORECAST_SOURCE"

	//
	// The sum of the custom pacing goal amounts is invalid.
	//
	LineItemError_ReasonINVALID_TOTAL_CUSTOM_PACING_GOAL_AMOUNTS LineItemError_Reason = "INVALID_TOTAL_CUSTOM_PACING_GOAL_AMOUNTS"

	//
	// Copying line items with custom pacing curves that are totally in the past is not allowed.
	//
	LineItemError_ReasonCOPY_LINE_ITEM_WITH_CUSTOM_PACING_CURVE_FULLY_IN_PAST_NOT_ALLOWED LineItemError_Reason = "COPY_LINE_ITEM_WITH_CUSTOM_PACING_CURVE_FULLY_IN_PAST_NOT_ALLOWED"

	//
	// The last custom pacing goal cannot be zero.
	//
	LineItemError_ReasonLAST_CUSTOM_PACING_GOAL_AMOUNT_CANNOT_BE_ZERO LineItemError_Reason = "LAST_CUSTOM_PACING_GOAL_AMOUNT_CANNOT_BE_ZERO"

	//
	// GRP paced line items cannot have absolute custom pacing curve goals.
	//
	LineItemError_ReasonGRP_PACED_LINE_ITEM_CANNOT_HAVE_ABSOLUTE_CUSTOM_PACING_CURVE_GOALS LineItemError_Reason = "GRP_PACED_LINE_ITEM_CANNOT_HAVE_ABSOLUTE_CUSTOM_PACING_CURVE_GOALS"

	//
	// {@link LineItem line item} has invalid video creative duration.
	//
	LineItemError_ReasonINVALID_MAX_VIDEO_CREATIVE_DURATION LineItemError_Reason = "INVALID_MAX_VIDEO_CREATIVE_DURATION"

	//
	// Native size types must by 1x1.
	//
	LineItemError_ReasonINVALID_NATIVE_SIZE LineItemError_Reason = "INVALID_NATIVE_SIZE"

	//
	// For AdExchange Line Items, the targeted request platform must match the syndication type of
	// the web property code.
	//
	LineItemError_ReasonINVALID_TARGETED_REQUEST_PLATFORM_FOR_WEB_PROPERTY_CODE LineItemError_Reason = "INVALID_TARGETED_REQUEST_PLATFORM_FOR_WEB_PROPERTY_CODE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemError_ReasonUNKNOWN LineItemError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the validation error.
//

type NullError_Reason string

const (

	//
	// Specified list/container must not contain any null elements
	//
	NullError_ReasonNULL_CONTENT NullError_Reason = "NULL_CONTENT"
)

//
// The reasons for the target error.
//

type OrderError_Reason string

const (

	//
	// Updating a canceled order is not allowed.
	//
	OrderError_ReasonUPDATE_CANCELED_ORDER_NOT_ALLOWED OrderError_Reason = "UPDATE_CANCELED_ORDER_NOT_ALLOWED"

	//
	// Updating an order that has its approval pending is not allowed.
	//
	OrderError_ReasonUPDATE_PENDING_APPROVAL_ORDER_NOT_ALLOWED OrderError_Reason = "UPDATE_PENDING_APPROVAL_ORDER_NOT_ALLOWED"

	//
	// Updating an archived order is not allowed.
	//
	OrderError_ReasonUPDATE_ARCHIVED_ORDER_NOT_ALLOWED OrderError_Reason = "UPDATE_ARCHIVED_ORDER_NOT_ALLOWED"

	//
	// DSM can set the proposal ID only at the time of creation of order.
	// Setting or changing proposal ID at the time of order update is not
	// allowed.
	//
	OrderError_ReasonCANNOT_MODIFY_PROPOSAL_ID OrderError_Reason = "CANNOT_MODIFY_PROPOSAL_ID"

	//
	// Cannot have secondary user without a primary user.
	//
	OrderError_ReasonPRIMARY_USER_REQUIRED OrderError_Reason = "PRIMARY_USER_REQUIRED"

	//
	// Primary user cannot be added as a secondary user too.
	//
	OrderError_ReasonPRIMARY_USER_CANNOT_BE_SECONDARY OrderError_Reason = "PRIMARY_USER_CANNOT_BE_SECONDARY"

	//
	// A team associated with the order must also be associated with the
	// advertiser.
	//
	OrderError_ReasonORDER_TEAM_NOT_ASSOCIATED_WITH_ADVERTISER OrderError_Reason = "ORDER_TEAM_NOT_ASSOCIATED_WITH_ADVERTISER"

	//
	// The user assigned to the order, like salesperson or trafficker, must
	// be on one of the order's teams.
	//
	OrderError_ReasonUSER_NOT_ON_ORDERS_TEAMS OrderError_Reason = "USER_NOT_ON_ORDERS_TEAMS"

	//
	// The agency assigned to the order must belong to one of the order's teams.
	//
	OrderError_ReasonAGENCY_NOT_ON_ORDERS_TEAMS OrderError_Reason = "AGENCY_NOT_ON_ORDERS_TEAMS"

	//
	// Programmatic info fields should not be set for a non-programmatic order.
	//
	OrderError_ReasonINVALID_FIELDS_SET_FOR_NON_PROGRAMMATIC_ORDER OrderError_Reason = "INVALID_FIELDS_SET_FOR_NON_PROGRAMMATIC_ORDER"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	OrderError_ReasonUNKNOWN OrderError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RangeError_Reason string

const (
	RangeError_ReasonTOO_HIGH RangeError_Reason = "TOO_HIGH"

	RangeError_ReasonTOO_LOW RangeError_Reason = "TOO_LOW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeError_ReasonUNKNOWN RangeError_Reason = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

type RequiredSizeError_Reason string

const (

	//
	// {@link Creative#size} or {@link LineItem#creativePlaceholders} size is
	// missing.
	//
	RequiredSizeError_ReasonREQUIRED RequiredSizeError_Reason = "REQUIRED"

	//
	// {@link LineItemCreativeAssociation#sizes} must be a subset of
	// {@link LineItem#creativePlaceholders} sizes.
	//
	RequiredSizeError_ReasonNOT_ALLOWED RequiredSizeError_Reason = "NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredSizeError_ReasonUNKNOWN RequiredSizeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RichMediaStudioCreativeError_Reason string

const (

	//
	// Only Studio can create a {@code RichMediaStudioCreative}.
	//
	RichMediaStudioCreativeError_ReasonCREATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "CREATION_NOT_ALLOWED"

	//
	// Unknown error
	//
	RichMediaStudioCreativeError_ReasonUKNOWN_ERROR RichMediaStudioCreativeError_Reason = "UKNOWN_ERROR"

	//
	// Invalid request indicating missing/invalid request parameters.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CODE_GENERATION_REQUEST RichMediaStudioCreativeError_Reason = "INVALID_CODE_GENERATION_REQUEST"

	//
	// Invalid creative object.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CREATIVE_OBJECT RichMediaStudioCreativeError_Reason = "INVALID_CREATIVE_OBJECT"

	//
	// Unable to connect to Rich Media Studio to save the creative. Please try again later.
	//
	RichMediaStudioCreativeError_ReasonSTUDIO_CONNECTION_ERROR RichMediaStudioCreativeError_Reason = "STUDIO_CONNECTION_ERROR"

	//
	// The push down duration is not allowed
	//
	RichMediaStudioCreativeError_ReasonPUSHDOWN_DURATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "PUSHDOWN_DURATION_NOT_ALLOWED"

	//
	// The position is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_POSITION RichMediaStudioCreativeError_Reason = "INVALID_POSITION"

	//
	// The Z-index is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_Z_INDEX RichMediaStudioCreativeError_Reason = "INVALID_Z_INDEX"

	//
	// The push-down duration is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_PUSHDOWN_DURATION RichMediaStudioCreativeError_Reason = "INVALID_PUSHDOWN_DURATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RichMediaStudioCreativeError_ReasonUNKNOWN RichMediaStudioCreativeError_Reason = "UNKNOWN"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// Error reasons for set-top box creatives.
//

type SetTopBoxCreativeError_Reason string

const (

	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_IMMUTABLE"

	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_REQUIRED SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_REQUIRED"

	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonPROVIDER_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "PROVIDER_ID_IMMUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeError_ReasonUNKNOWN SetTopBoxCreativeError_Reason = "UNKNOWN"
)

//
// Specifies the start type to use for an entity with a start date time field.
// For example, a {@link LineItem} or {@link LineItemCreativeAssociation}.
//

type StartDateTimeType string

const (

	//
	// Use the value in {@link #startDateTime}.
	//
	StartDateTimeTypeUSE_START_DATE_TIME StartDateTimeType = "USE_START_DATE_TIME"

	//
	// The entity will start serving immediately. {@link #startDateTime} in the
	// request is ignored and will be set to the current time. Additionally,
	// {@link #startDateTimeType} will be set to
	// {@link StartDateTimeType#USE_START_DATE_TIME}.
	//
	StartDateTimeTypeIMMEDIATELY StartDateTimeType = "IMMEDIATELY"

	//
	// The entity will start serving one hour from now. {@link #startDateTime}
	// in the request is ignored and will be set to one hour from the current
	// time. Additionally, {@link #startDateTimeType} will be set to
	// {@link StartDateTimeType#USE_START_DATE_TIME}.
	//
	StartDateTimeTypeONE_HOUR_FROM_NOW StartDateTimeType = "ONE_HOUR_FROM_NOW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StartDateTimeTypeUNKNOWN StartDateTimeType = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// Error reason for {@link SwiffyConversionError}.
//

type SwiffyConversionError_Reason string

const (

	//
	// Indicates the Swiffy service has an internal error that prevents the flash
	// asset being converted.
	//
	SwiffyConversionError_ReasonSERVER_ERROR SwiffyConversionError_Reason = "SERVER_ERROR"

	//
	// Indicates the uploaded flash asset is not a valid flash file.
	//
	SwiffyConversionError_ReasonINVALID_FLASH_FILE SwiffyConversionError_Reason = "INVALID_FLASH_FILE"

	//
	// Indicates the Swiffy service currently does not support converting this
	// flash asset.
	//
	SwiffyConversionError_ReasonUNSUPPORTED_FLASH SwiffyConversionError_Reason = "UNSUPPORTED_FLASH"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SwiffyConversionError_ReasonUNKNOWN SwiffyConversionError_Reason = "UNKNOWN"
)

//
// The reason for the error
//

type TemplateInstantiatedCreativeError_Reason string

const (

	//
	// A new creative cannot be created from an inactive creative template.
	//
	TemplateInstantiatedCreativeError_ReasonINACTIVE_CREATIVE_TEMPLATE TemplateInstantiatedCreativeError_Reason = "INACTIVE_CREATIVE_TEMPLATE"

	//
	// An uploaded file type is not allowed
	//
	TemplateInstantiatedCreativeError_ReasonFILE_TYPE_NOT_ALLOWED TemplateInstantiatedCreativeError_Reason = "FILE_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TemplateInstantiatedCreativeError_ReasonUNKNOWN TemplateInstantiatedCreativeError_Reason = "UNKNOWN"
)

//
// The type of transcode request rejection.
//

type TranscodingError_Reason string

const (

	//
	// The request to copy the creative(s) was rejected because the source is not transcoded.
	//
	TranscodingError_ReasonCANNOT_COPY_CREATIVE_PENDING_TRANSCODE TranscodingError_Reason = "CANNOT_COPY_CREATIVE_PENDING_TRANSCODE"

	//
	// The request to copy the creative(s) was rejected because the source is invalid.
	//
	TranscodingError_ReasonCANNOT_COPY_INVALID_CREATIVE TranscodingError_Reason = "CANNOT_COPY_INVALID_CREATIVE"

	//
	// The creative is still being transcoded or processed. Please try again later.
	//
	TranscodingError_ReasonTRANSCODING_IS_IN_PROGRESS TranscodingError_Reason = "TRANSCODING_IS_IN_PROGRESS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TranscodingError_ReasonUNKNOWN TranscodingError_Reason = "UNKNOWN"
)

type CreateLineItemCreativeAssociations struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createLineItemCreativeAssociations"`

	LineItemCreativeAssociations []*LineItemCreativeAssociation `xml:"lineItemCreativeAssociations,omitempty" json:"lineItemCreativeAssociations,omitempty"`
}

type CreateLineItemCreativeAssociationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createLineItemCreativeAssociationsResponse"`

	Rval []*LineItemCreativeAssociation `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetLineItemCreativeAssociationsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getLineItemCreativeAssociationsByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetLineItemCreativeAssociationsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getLineItemCreativeAssociationsByStatementResponse"`

	Rval *LineItemCreativeAssociationPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type GetPreviewUrl struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getPreviewUrl"`

	LineItemId int64 `xml:"lineItemId,omitempty" json:"lineItemId,omitempty"`

	CreativeId int64 `xml:"creativeId,omitempty" json:"creativeId,omitempty"`

	SiteUrl string `xml:"siteUrl,omitempty" json:"siteUrl,omitempty"`
}

type GetPreviewUrlResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getPreviewUrlResponse"`

	Rval string `xml:"rval,omitempty" json:"rval,omitempty"`
}

type GetPreviewUrlsForNativeStyles struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getPreviewUrlsForNativeStyles"`

	LineItemId int64 `xml:"lineItemId,omitempty" json:"lineItemId,omitempty"`

	CreativeId int64 `xml:"creativeId,omitempty" json:"creativeId,omitempty"`

	SiteUrl string `xml:"siteUrl,omitempty" json:"siteUrl,omitempty"`
}

type GetPreviewUrlsForNativeStylesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getPreviewUrlsForNativeStylesResponse"`

	Rval []*CreativeNativeStylePreview `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformLineItemCreativeAssociationAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performLineItemCreativeAssociationAction"`

	LineItemCreativeAssociationAction *LineItemCreativeAssociationAction `xml:"lineItemCreativeAssociationAction,omitempty" json:"lineItemCreativeAssociationAction,omitempty"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type PerformLineItemCreativeAssociationActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performLineItemCreativeAssociationActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PushCreativeToDevices struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 pushCreativeToDevices"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`

	Options *CreativePushOptions `xml:"options,omitempty" json:"options,omitempty"`
}

type PushCreativeToDevicesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 pushCreativeToDevicesResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateLineItemCreativeAssociations struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateLineItemCreativeAssociations"`

	LineItemCreativeAssociations []*LineItemCreativeAssociation `xml:"lineItemCreativeAssociations,omitempty" json:"lineItemCreativeAssociations,omitempty"`
}

type UpdateLineItemCreativeAssociationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateLineItemCreativeAssociationsResponse"`

	Rval []*LineItemCreativeAssociation `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type ActivateLineItemCreativeAssociations struct {
	*LineItemCreativeAssociationAction
}

type AdSenseAccountError struct {
	*ApiError

	Reason *AdSenseAccountError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AssetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AssetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AudienceExtensionError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AudienceExtensionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeAssetMacroError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeAssetMacroError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeNativeStylePreview struct {

	//
	// The id of the {@link NativeStyle}.
	//
	NativeStyleId int64 `xml:"nativeStyleId,omitempty" json:"nativeStyleId,omitempty"`

	//
	// The URL for previewing this creative using this particular {@link NativeStyle}
	//
	PreviewUrl string `xml:"previewUrl,omitempty" json:"previewUrl,omitempty"`
}

type CreativePreviewError struct {
	*ApiError

	Reason *CreativePreviewError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativePushOptions struct {

	//
	// The ID of the LineItem to preview.
	//
	// <p>This field is required.
	//
	LineItemId int64 `xml:"lineItemId,omitempty" json:"lineItemId,omitempty"`

	//
	// The ID of the Creative to preview.
	//
	// <p>This field is required.
	//
	CreativeId int64 `xml:"creativeId,omitempty" json:"creativeId,omitempty"`

	//
	// The ID of the native style to preview the creative with.
	//
	// <p>This field is optional but the referenced object must exist.
	//
	NativeStyleId int64 `xml:"nativeStyleId,omitempty" json:"nativeStyleId,omitempty"`
}

type CreativeSetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeSetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTemplateError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTemplateOperationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateOperationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CrossSellError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CrossSellError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomFieldValueError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomFieldValueError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type DeactivateLineItemCreativeAssociations struct {
	*LineItemCreativeAssociationAction
}

type DeleteLineItemCreativeAssociations struct {
	*LineItemCreativeAssociationAction
}

type EntityChildrenLimitReachedError struct {
	*ApiError

	Reason *EntityChildrenLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type EntityLimitReachedError struct {
	*ApiError

	Reason *EntityLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type FileError struct {
	*ApiError

	Reason *FileError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type HtmlBundleProcessorError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *HtmlBundleProcessorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ImageError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ImageError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidPhoneNumberError struct {
	*ApiError

	Reason *InvalidPhoneNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelEntityAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LabelEntityAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LineItemCreativeAssociationAction struct {
}

type LineItemCreativeAssociation struct {

	//
	// The ID of the {@link LineItem} to which the {@link Creative} should be associated. This
	// attribute is required.
	//
	LineItemId int64 `xml:"lineItemId,omitempty" json:"lineItemId,omitempty"`

	//
	// The ID of the {@link Creative} being associated with a {@link LineItem}.
	//
	// <p>This attribute is required if this is an association between a line item and a creative.
	// <br>
	// This attribute is ignored if this is an association between a line item and a creative set.
	//
	// <p>If this is an association between a line item and a creative, when retrieving the line item
	// creative association, the {@link #creativeId} will be the creative's ID. <br>
	// If this is an association between a line item and a creative set, when retrieving the line item
	// creative association, the {@link #creativeId} will be the ID of the {@link
	// CreativeSet#masterCreativeId master creative}.
	//
	CreativeId int64 `xml:"creativeId,omitempty" json:"creativeId,omitempty"`

	//
	// The ID of the {@link CreativeSet} being associated with a {@link LineItem}. This attribute is
	// required if this is an association between a line item and a creative set.
	//
	// <p>This field will be {@code null} when retrieving associations between line items and
	// creatives not belonging to a set.
	//
	CreativeSetId int64 `xml:"creativeSetId,omitempty" json:"creativeSetId,omitempty"`

	//
	// The weight of the {@link Creative}. This value is only used if the line item's {@code
	// creativeRotationType} is set to {@link CreativeRotationType#MANUAL}. This attribute is optional
	// and defaults to 10.
	//
	ManualCreativeRotationWeight float64 `xml:"manualCreativeRotationWeight,omitempty" json:"manualCreativeRotationWeight,omitempty"`

	//
	// The sequential rotation index of the {@link Creative}. This value is used only if the
	// associated line item's {@link LineItem#creativeRotationType} is set to {@link
	// CreativeRotationType#SEQUENTIAL}. This attribute is optional and defaults to 1.
	//
	SequentialCreativeRotationIndex int32 `xml:"sequentialCreativeRotationIndex,omitempty" json:"sequentialCreativeRotationIndex,omitempty"`

	//
	// Overrides the value set for {@link LineItem#startDateTime}. This value is optional and is only
	// valid for Ad Manager 360 networks. If unset, the {@link LineItem#startDateTime} will be used.
	//
	StartDateTime soap.XSDDateTime `xml:"startDateTime,omitempty" json:"startDateTime,omitempty"`

	//
	// Specifies whether to start serving to the {@code LineItemCreativeAssociation} right away, in an
	// hour, etc. This attribute is optional and defaults to {@link
	// StartDateTimeType#USE_START_DATE_TIME}.
	//
	StartDateTimeType *StartDateTimeType `xml:"startDateTimeType,omitempty" json:"startDateTimeType,omitempty"`

	//
	// Overrides {@link LineItem#endDateTime}. This value is optional and is only valid for Ad Manager
	// 360 networks. If unset, the {@link LineItem#endDateTime} will be used.
	//
	EndDateTime soap.XSDDateTime `xml:"endDateTime,omitempty" json:"endDateTime,omitempty"`

	//
	// Overrides the value set for {@link HasDestinationUrlCreative#destinationUrl}. This value is
	// optional and is only valid for Ad Manager 360 networks.
	//
	DestinationUrl string `xml:"destinationUrl,omitempty" json:"destinationUrl,omitempty"`

	//
	// Overrides the value set for {@link Creative#size}, which allows the creative to be served to ad
	// units that would otherwise not be compatible for its actual size. This value is optional.
	//
	Sizes []*Size `xml:"sizes,omitempty" json:"sizes,omitempty"`

	//
	// The status of the association. This attribute is read-only.
	//
	Status *LineItemCreativeAssociation_Status `xml:"status,omitempty" json:"status,omitempty"`

	//
	// Contains trafficking statistics for the association. This attribute is readonly and is
	// populated by Google. This will be {@code null} in case there are no statistics for the
	// association yet.
	//
	Stats *LineItemCreativeAssociationStats `xml:"stats,omitempty" json:"stats,omitempty"`

	//
	// The date and time this association was last modified.
	//
	LastModifiedDateTime soap.XSDDateTime `xml:"lastModifiedDateTime,omitempty" json:"lastModifiedDateTime,omitempty"`

	//
	// Specifies {@link CreativeTargeting} for this line item creative association.
	//
	// <p>This attribute is optional. It should match the creative targeting specified on the
	// corresponding {@link CreativePlaceholder} in the {@link LineItem} that is being associated with
	// the {@link Creative}.
	//
	TargetingName string `xml:"targetingName,omitempty" json:"targetingName,omitempty"`
}

type LineItemCreativeAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LineItemCreativeAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LineItemCreativeAssociationOperationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LineItemCreativeAssociationOperationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LineItemCreativeAssociationPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of line item creative associations contained within this
	// page.
	//
	Results []*LineItemCreativeAssociation `xml:"results,omitempty" json:"results,omitempty"`
}

type LineItemCreativeAssociationStats struct {

	//
	// A {@link Stats} object that holds delivered impressions and clicks statistics.
	//
	Stats *Stats `xml:"stats,omitempty" json:"stats,omitempty"`

	//
	// A map containing {@link Stats} objects for each creative belonging to a creative set, {@code
	// null} for non creative set associations.
	//
	CreativeSetStats []*Long_StatsMapEntry `xml:"creativeSetStats,omitempty" json:"creativeSetStats,omitempty"`

	//
	// The revenue generated thus far by the creative from its association with the particular line
	// item in the publisher's currency.
	//
	CostInOrderCurrency *Money `xml:"costInOrderCurrency,omitempty" json:"costInOrderCurrency,omitempty"`
}

type LineItemError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LineItemError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Long_StatsMapEntry struct {
	Key int64 `xml:"key,omitempty" json:"key,omitempty"`

	Value *Stats `xml:"value,omitempty" json:"value,omitempty"`
}

type Money struct {

	//
	// Three letter currency code in string format.
	//
	CurrencyCode string `xml:"currencyCode,omitempty" json:"currencyCode,omitempty"`

	//
	// Money values are always specified in terms of micros which are a millionth
	// of the fundamental currency unit. For US dollars, $1 is 1,000,000 micros.
	//
	MicroAmount int64 `xml:"microAmount,omitempty" json:"microAmount,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type OrderError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *OrderError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RangeError struct {
	*ApiError

	Reason *RangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredSizeError struct {
	*ApiError

	Reason *RequiredSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RichMediaStudioCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RichMediaStudioCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetTopBoxCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *SetTopBoxCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type Size struct {

	//
	// The width of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Width int32 `xml:"width,omitempty" json:"width,omitempty"`

	//
	// The height of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Height int32 `xml:"height,omitempty" json:"height,omitempty"`

	//
	// Whether this size represents an aspect ratio.
	//
	IsAspectRatio bool `xml:"isAspectRatio,omitempty" json:"isAspectRatio,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Stats struct {

	//
	// The number of impressions delivered.
	//
	ImpressionsDelivered int64 `xml:"impressionsDelivered,omitempty" json:"impressionsDelivered,omitempty"`

	//
	// The number of clicks delivered.
	//
	ClicksDelivered int64 `xml:"clicksDelivered,omitempty" json:"clicksDelivered,omitempty"`

	//
	// The number of video completions delivered.
	//
	VideoCompletionsDelivered int64 `xml:"videoCompletionsDelivered,omitempty" json:"videoCompletionsDelivered,omitempty"`

	//
	// The number of video starts delivered.
	//
	VideoStartsDelivered int64 `xml:"videoStartsDelivered,omitempty" json:"videoStartsDelivered,omitempty"`

	//
	// The number of viewable impressions delivered.
	//
	ViewableImpressionsDelivered int64 `xml:"viewableImpressionsDelivered,omitempty" json:"viewableImpressionsDelivered,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type SwiffyConversionError struct {
	*ApiError

	Reason *SwiffyConversionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TemplateInstantiatedCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *TemplateInstantiatedCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TranscodingError struct {
	*ApiError

	Reason *TranscodingError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type _Value struct {
}

type LineItemCreativeAssociationServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates new {@link LineItemCreativeAssociation} objects
	*/
	CreateLineItemCreativeAssociations(request *CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error)

	CreateLineItemCreativeAssociationsContext(ctx context.Context, request *CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link LineItemCreativeAssociationPage} of {@link LineItemCreativeAssociation} objects
	   that satisfy the given {@link Statement#query}. The following fields are supported for
	   filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code creativeId}</td>
	   <td>{@link LineItemCreativeAssociation#creativeId}</td>
	   </tr>
	   <tr>
	   <td>{@code manualCreativeRotationWeight}</td>
	   <td>{@link LineItemCreativeAssociation#manualCreativeRotationWeight}</td>
	   </tr>
	   <tr>
	   <td>{@code destinationUrl}</td>
	   <td>{@link LineItemCreativeAssociation#destinationUrl}</td>
	   </tr>
	   <tr>
	   <td>{@code lineItemId}</td>
	   <td>{@link LineItemCreativeAssociation#lineItemId}</td>
	   </tr>
	   <tr>
	   <td>{@code status}</td>
	   <td>{@link LineItemCreativeAssociation#status}</td>
	   </tr>
	   <tr>
	   <td>{@code lastModifiedDateTime}</td>
	   <td>{@link LineItemCreativeAssociation#lastModifiedDateTime}</td>
	   </tr>
	   </table>
	*/
	GetLineItemCreativeAssociationsByStatement(request *GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error)

	GetLineItemCreativeAssociationsByStatementContext(ctx context.Context, request *GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns an insite preview URL that references the specified site URL with the specified
	   creative from the association served to it. For Creative Set previewing you may specify the
	   master creative Id.
	*/
	GetPreviewUrl(request *GetPreviewUrl) (*GetPreviewUrlResponse, error)

	GetPreviewUrlContext(ctx context.Context, request *GetPreviewUrl) (*GetPreviewUrlResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns a list of URLs that reference the specified site URL with the specified creative from
	   the association served to it. For Creative Set previewing you may specify the master creative
	   Id. Each URL corresponds to one available native style for previewing the specified creative.
	*/
	GetPreviewUrlsForNativeStyles(request *GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error)

	GetPreviewUrlsForNativeStylesContext(ctx context.Context, request *GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs actions on {@link LineItemCreativeAssociation} objects that match the given {@link
	   Statement#query}.
	*/
	PerformLineItemCreativeAssociationAction(request *PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error)

	PerformLineItemCreativeAssociationActionContext(ctx context.Context, request *PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Pushes a creative to devices that that satisfy the given {@link Statement#query}. *
	*/
	PushCreativeToDevices(request *PushCreativeToDevices) (*PushCreativeToDevicesResponse, error)

	PushCreativeToDevicesContext(ctx context.Context, request *PushCreativeToDevices) (*PushCreativeToDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link LineItemCreativeAssociation} objects
	*/
	UpdateLineItemCreativeAssociations(request *UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error)

	UpdateLineItemCreativeAssociationsContext(ctx context.Context, request *UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error)
}

type lineItemCreativeAssociationServiceInterface struct {
	client *soap.Client
}

func NewLineItemCreativeAssociationServiceInterface(client *soap.Client) LineItemCreativeAssociationServiceInterface {
	return &lineItemCreativeAssociationServiceInterface{
		client: client,
	}
}

func (service *lineItemCreativeAssociationServiceInterface) CreateLineItemCreativeAssociationsContext(ctx context.Context, request *CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error) {
	response := new(CreateLineItemCreativeAssociationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) CreateLineItemCreativeAssociations(request *CreateLineItemCreativeAssociations) (*CreateLineItemCreativeAssociationsResponse, error) {
	return service.CreateLineItemCreativeAssociationsContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) GetLineItemCreativeAssociationsByStatementContext(ctx context.Context, request *GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error) {
	response := new(GetLineItemCreativeAssociationsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) GetLineItemCreativeAssociationsByStatement(request *GetLineItemCreativeAssociationsByStatement) (*GetLineItemCreativeAssociationsByStatementResponse, error) {
	return service.GetLineItemCreativeAssociationsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) GetPreviewUrlContext(ctx context.Context, request *GetPreviewUrl) (*GetPreviewUrlResponse, error) {
	response := new(GetPreviewUrlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) GetPreviewUrl(request *GetPreviewUrl) (*GetPreviewUrlResponse, error) {
	return service.GetPreviewUrlContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) GetPreviewUrlsForNativeStylesContext(ctx context.Context, request *GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error) {
	response := new(GetPreviewUrlsForNativeStylesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) GetPreviewUrlsForNativeStyles(request *GetPreviewUrlsForNativeStyles) (*GetPreviewUrlsForNativeStylesResponse, error) {
	return service.GetPreviewUrlsForNativeStylesContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) PerformLineItemCreativeAssociationActionContext(ctx context.Context, request *PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error) {
	response := new(PerformLineItemCreativeAssociationActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) PerformLineItemCreativeAssociationAction(request *PerformLineItemCreativeAssociationAction) (*PerformLineItemCreativeAssociationActionResponse, error) {
	return service.PerformLineItemCreativeAssociationActionContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) PushCreativeToDevicesContext(ctx context.Context, request *PushCreativeToDevices) (*PushCreativeToDevicesResponse, error) {
	response := new(PushCreativeToDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) PushCreativeToDevices(request *PushCreativeToDevices) (*PushCreativeToDevicesResponse, error) {
	return service.PushCreativeToDevicesContext(
		context.Background(),
		request,
	)
}

func (service *lineItemCreativeAssociationServiceInterface) UpdateLineItemCreativeAssociationsContext(ctx context.Context, request *UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error) {
	response := new(UpdateLineItemCreativeAssociationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *lineItemCreativeAssociationServiceInterface) UpdateLineItemCreativeAssociations(request *UpdateLineItemCreativeAssociations) (*UpdateLineItemCreativeAssociationsResponse, error) {
	return service.UpdateLineItemCreativeAssociationsContext(
		context.Background(),
		request,
	)
}
