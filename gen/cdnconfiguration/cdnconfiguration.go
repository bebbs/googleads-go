// Code generated by gowsdl DO NOT EDIT.

package cdnconfiguration

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

//
// The reasons for the {@link CdnConfigurationError}.
//

type CdnConfigurationError_Reason string

const (

	//
	// URL prefixes should not contain schemes.
	//
	CdnConfigurationError_ReasonURL_SHOULD_NOT_CONTAIN_SCHEME CdnConfigurationError_Reason = "URL_SHOULD_NOT_CONTAIN_SCHEME"

	//
	// Invalid delivery setting name. Names for new delivery settings must be null or empty. Names
	// for existing delivery settings cannot be modified.
	//
	CdnConfigurationError_ReasonINVALID_DELIVERY_LOCATION_NAMES CdnConfigurationError_Reason = "INVALID_DELIVERY_LOCATION_NAMES"

	//
	// A CDN configuration cannot be archived if it is used by active content sources.
	//
	CdnConfigurationError_ReasonCANNOT_ARCHIVE_IF_USED_BY_ACTIVE_CONTENT_SOURCES CdnConfigurationError_Reason = "CANNOT_ARCHIVE_IF_USED_BY_ACTIVE_CONTENT_SOURCES"

	//
	// A CDN configuration cannot be archived if it is used by active live streams.
	//
	CdnConfigurationError_ReasonCANNOT_ARCHIVE_IF_USED_BY_ACTIVE_LIVE_STREAMS CdnConfigurationError_Reason = "CANNOT_ARCHIVE_IF_USED_BY_ACTIVE_LIVE_STREAMS"

	//
	// The security policy type is not supported for the current settings.
	//
	CdnConfigurationError_ReasonUNSUPPORTED_SECURITY_POLICY_TYPE CdnConfigurationError_Reason = "UNSUPPORTED_SECURITY_POLICY_TYPE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CdnConfigurationError_ReasonUNKNOWN CdnConfigurationError_Reason = "UNKNOWN"
)

//
// Indicates the status of the {@link CdnConfiguration}.
//

type CdnConfigurationStatus string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CdnConfigurationStatusUNKNOWN CdnConfigurationStatus = "UNKNOWN"

	//
	// The CDN configuration is in use.
	//
	CdnConfigurationStatusACTIVE CdnConfigurationStatus = "ACTIVE"

	//
	// The CDN configuration is no longer used.
	//
	CdnConfigurationStatusARCHIVED CdnConfigurationStatus = "ARCHIVED"
)

//
// Indicates the type of CDN configuration for {@link CdnConfiguration}.
//

type CdnConfigurationType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CdnConfigurationTypeUNKNOWN CdnConfigurationType = "UNKNOWN"

	//
	// A configuration that specifies where and how {@link LiveStreamEvent} content should be ingested
	// and delivered.
	//
	CdnConfigurationTypeLIVE_STREAM_SOURCE_CONTENT CdnConfigurationType = "LIVE_STREAM_SOURCE_CONTENT"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// Indicates the type of origin forwarding used to support Akamai authentication policies for
// {@link LiveStreamEvent}
//

type OriginForwardingType string

const (

	//
	// Indicates that origin forwarding is set up by passing an originpath query
	// string parameter (necessary for Akamai dynamic packaging to work)
	//
	OriginForwardingTypeORIGIN_PATH OriginForwardingType = "ORIGIN_PATH"

	//
	// Indicates that conventional origin forwarding is used.
	//
	OriginForwardingTypeCONVENTIONAL OriginForwardingType = "CONVENTIONAL"

	//
	// Indicates that origin forwarding is not being used.
	//
	OriginForwardingTypeNONE OriginForwardingType = "NONE"

	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	OriginForwardingTypeUNKNOWN OriginForwardingType = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Indicates the type of security policy associated with access to a CDN. Different security
// policies require different parameters in a {@link SecurityPolicy}.
//

type SecurityPolicyType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SecurityPolicyTypeUNKNOWN SecurityPolicyType = "UNKNOWN"

	//
	// Indicates that no authentication is necessary.
	//
	SecurityPolicyTypeNONE SecurityPolicyType = "NONE"

	//
	// Security policy for accessing content on the Akamai CDN.
	//
	SecurityPolicyTypeAKAMAI SecurityPolicyType = "AKAMAI"

	//
	// Security policy for access content on Google Cloud Media CDN.
	//
	SecurityPolicyTypeCLOUD_MEDIA SecurityPolicyType = "CLOUD_MEDIA"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

type CreateCdnConfigurations struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCdnConfigurations"`

	CdnConfigurations []*CdnConfiguration `xml:"cdnConfigurations,omitempty" json:"cdnConfigurations,omitempty"`
}

type CreateCdnConfigurationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCdnConfigurationsResponse"`

	Rval []*CdnConfiguration `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetCdnConfigurationsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCdnConfigurationsByStatement"`

	Statement *Statement `xml:"statement,omitempty" json:"statement,omitempty"`
}

type GetCdnConfigurationsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCdnConfigurationsByStatementResponse"`

	Rval *CdnConfigurationPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformCdnConfigurationAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCdnConfigurationAction"`

	CdnConfigurationAction *CdnConfigurationAction `xml:"cdnConfigurationAction,omitempty" json:"cdnConfigurationAction,omitempty"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type PerformCdnConfigurationActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCdnConfigurationActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateCdnConfigurations struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCdnConfigurations"`

	CdnConfigurations []*CdnConfiguration `xml:"cdnConfigurations,omitempty" json:"cdnConfigurations,omitempty"`
}

type UpdateCdnConfigurationsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCdnConfigurationsResponse"`

	Rval []*CdnConfiguration `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type ActivateCdnConfigurations struct {
	*CdnConfigurationAction
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type ArchiveCdnConfigurations struct {
	*CdnConfigurationAction
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CdnConfigurationAction struct {
}

type CdnConfiguration struct {

	//
	// The unique ID of the {@link CdnConfiguration}. This value is read-only and is assigned by
	// Google.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The name of the {@link CdnConfiguration}. This value is required to create a CDN configuration
	// and has a maximum length of 255 characters.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// The type of CDN configuration represented by this {@link CdnConfiguration}. This value is
	// required to create a CDN configuration
	//
	CdnConfigurationType *CdnConfigurationType `xml:"cdnConfigurationType,omitempty" json:"cdnConfigurationType,omitempty"`

	//
	// Parameters about this CDN configuration as a source of content. This facilitates fetching the
	// original content for conditioning and delivering the original content as part of a modified
	// stream.
	//
	SourceContentConfiguration *SourceContentConfiguration `xml:"sourceContentConfiguration,omitempty" json:"sourceContentConfiguration,omitempty"`

	//
	// The status of the CDN configuration.
	//
	CdnConfigurationStatus *CdnConfigurationStatus `xml:"cdnConfigurationStatus,omitempty" json:"cdnConfigurationStatus,omitempty"`
}

type CdnConfigurationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CdnConfigurationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CdnConfigurationPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of CDN configurations contained within this page.
	//
	Results []*CdnConfiguration `xml:"results,omitempty" json:"results,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type MediaLocationSettings struct {

	//
	// The name of the media location. This value is read-only and is assigned by Google.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// The url prefix of the media location. This value is required for a valid media location.
	//
	UrlPrefix string `xml:"urlPrefix,omitempty" json:"urlPrefix,omitempty"`

	//
	// The security policy and authentication credentials needed to access the content in this media
	// location. This value is required for a valid media location.
	//
	SecurityPolicy *SecurityPolicySettings `xml:"securityPolicy,omitempty" json:"securityPolicy,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SecurityPolicySettings struct {

	//
	// Type of security policy. This determines which other fields should be populated. This value is
	// required for a valid security policy.
	//
	SecurityPolicyType *SecurityPolicyType `xml:"securityPolicyType,omitempty" json:"securityPolicyType,omitempty"`

	//
	// Shared security key used to generate the Akamai HMAC token for authenticating requests. This
	// field is only applicable when the value of {@link #securityPolicyType} is equal to {@link
	// SecurityPolicyType#AKAMAI} and will be set to null otherwise.
	//
	// <p>This field is required when the {@link CdnConfiguration#cdnConfigurationType} is equal to
	// {@link CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT} and this {@link SecurityPolicyDto} is
	// being configured for {@link SourceContentConfiguration#ingestSettings}.
	//
	TokenAuthenticationKey string `xml:"tokenAuthenticationKey,omitempty" json:"tokenAuthenticationKey,omitempty"`

	//
	// Whether the segment URLs should be signed using the {@link #tokenAuthenticationKey} on the
	// server. This is only applicable for delivery media locations that have token authentication
	// enabled.
	//
	DisableServerSideUrlSigning bool `xml:"disableServerSideUrlSigning,omitempty" json:"disableServerSideUrlSigning,omitempty"`

	//
	// The type of origin forwarding used to support Akamai authentication policies for the master
	// playlist. This field is not applicable to ingest locations, and is only applicable to delivery
	// media locations with the {@link #securityPolicyType} set to {@link SecurityPolicyType#AKAMAI}.
	// If set elsewhere it will be reset to null.
	//
	OriginForwardingType *OriginForwardingType `xml:"originForwardingType,omitempty" json:"originForwardingType,omitempty"`

	//
	// The origin path prefix provided by the publisher for the master playlist. This field is only
	// applicable for delivery media locations with the value of {@link #originForwardingType} set to
	// {@link OriginForwardingType#CONVENTIONAL}, and will be set to null otherwise.
	//
	OriginPathPrefix string `xml:"originPathPrefix,omitempty" json:"originPathPrefix,omitempty"`

	//
	// The type of origin forwarding used to support Akamai authentication policies for media
	// playlists. This setting can only be used with CDN configurations with a {@code
	// cdnConfigurationType} of {@link CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT}, is not
	// applicable to ingest locations, and is only applicable to delivery media locations with the
	// {@link #securityPolicyType} set to {@link SecurityPolicyType#AKAMAI}. Valid options are {@code
	// OriginForwardingType#NONE} or {@code OriginForwardingType#ORIGIN_PATH}.
	//
	// <p>This setting can only be used with CDN configurations with a {@code cdnConfigurationType} of
	// {@link CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT}.
	//
	MediaPlaylistOriginForwardingType *OriginForwardingType `xml:"mediaPlaylistOriginForwardingType,omitempty" json:"mediaPlaylistOriginForwardingType,omitempty"`

	//
	// The origin path prefix provided by the publisher for the media playlists. This field is only
	// applicable for delivery media locations with the value of {@link
	// #mediaPlaylistOriginForwardingType} set to {@link OriginForwardingType#CONVENTIONAL}, and will
	// be set to null otherwise.
	//
	MediaPlaylistOriginPathPrefix string `xml:"mediaPlaylistOriginPathPrefix,omitempty" json:"mediaPlaylistOriginPathPrefix,omitempty"`

	//
	// The name of the EdgeCacheKeyset on the Media CDN configuration that will be used to validate
	// signed requests from DAI to ingest content.
	//
	KeysetName string `xml:"keysetName,omitempty" json:"keysetName,omitempty"`

	//
	// The amount of time in seconds for which a request signed with a short token will be valid. Only
	// required if signedRequestMaximumExpirationTtl has been set in the Media CDN configuration.
	//
	SignedRequestExpirationTtlSeconds int64 `xml:"signedRequestExpirationTtlSeconds,omitempty" json:"signedRequestExpirationTtlSeconds,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type SourceContentConfiguration struct {

	//
	// Configuration for how DAI should ingest media. At ingest time, we match the url prefix of media
	// in a stream's playlist with an ingest location and use the authentication credentials from the
	// corresponding ingest settings to download the media. This value is required for a valid source
	// content configuration.
	//
	IngestSettings *MediaLocationSettings `xml:"ingestSettings,omitempty" json:"ingestSettings,omitempty"`

	//
	// Default configuration for how DAI should deliver the non-modified media segments. At delivery
	// time, we replace the ingest location's url prefix with the delivery location's URL prefix and
	// use the security policy from the delivery settings to determine how DAI needs to deliver the
	// media so that users can access it. This value is required for a valid source content
	// configuration.
	//
	DefaultDeliverySettings *MediaLocationSettings `xml:"defaultDeliverySettings,omitempty" json:"defaultDeliverySettings,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type _Value struct {
}

type CdnConfigurationServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates new {@link CdnConfiguration} objects.
	*/
	CreateCdnConfigurations(request *CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error)

	CreateCdnConfigurationsContext(ctx context.Context, request *CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link CdnConfigurationPage} of {@link CdnConfiguration} objects that satisfy the given
	   {@link Statement#query}. Currently only CDN Configurations of type {@link
	   CdnConfigurationType#LIVE_STREAM_SOURCE_CONTENT} will be returned. The following fields are
	   supported for filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link CdnConfiguration#id}</td>
	   </tr>
	   <tr>
	   <td>{@code name}</td>
	   <td>{@link CdnConfiguration#name}</td>
	   </tr>
	   </table>
	*/
	GetCdnConfigurationsByStatement(request *GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error)

	GetCdnConfigurationsByStatementContext(ctx context.Context, request *GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs actions on {@link CdnConfiguration} objects that match the given {@link
	   Statement#query}.
	*/
	PerformCdnConfigurationAction(request *PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error)

	PerformCdnConfigurationActionContext(ctx context.Context, request *PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link CdnConfiguration} objects.
	*/
	UpdateCdnConfigurations(request *UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error)

	UpdateCdnConfigurationsContext(ctx context.Context, request *UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error)
}

type cdnConfigurationServiceInterface struct {
	client *soap.Client
}

func NewCdnConfigurationServiceInterface(client *soap.Client) CdnConfigurationServiceInterface {
	return &cdnConfigurationServiceInterface{
		client: client,
	}
}

func (service *cdnConfigurationServiceInterface) CreateCdnConfigurationsContext(ctx context.Context, request *CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error) {
	response := new(CreateCdnConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cdnConfigurationServiceInterface) CreateCdnConfigurations(request *CreateCdnConfigurations) (*CreateCdnConfigurationsResponse, error) {
	return service.CreateCdnConfigurationsContext(
		context.Background(),
		request,
	)
}

func (service *cdnConfigurationServiceInterface) GetCdnConfigurationsByStatementContext(ctx context.Context, request *GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error) {
	response := new(GetCdnConfigurationsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cdnConfigurationServiceInterface) GetCdnConfigurationsByStatement(request *GetCdnConfigurationsByStatement) (*GetCdnConfigurationsByStatementResponse, error) {
	return service.GetCdnConfigurationsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *cdnConfigurationServiceInterface) PerformCdnConfigurationActionContext(ctx context.Context, request *PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error) {
	response := new(PerformCdnConfigurationActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cdnConfigurationServiceInterface) PerformCdnConfigurationAction(request *PerformCdnConfigurationAction) (*PerformCdnConfigurationActionResponse, error) {
	return service.PerformCdnConfigurationActionContext(
		context.Background(),
		request,
	)
}

func (service *cdnConfigurationServiceInterface) UpdateCdnConfigurationsContext(ctx context.Context, request *UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error) {
	response := new(UpdateCdnConfigurationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *cdnConfigurationServiceInterface) UpdateCdnConfigurations(request *UpdateCdnConfigurations) (*UpdateCdnConfigurationsResponse, error) {
	return service.UpdateCdnConfigurationsContext(
		context.Background(),
		request,
	)
}
