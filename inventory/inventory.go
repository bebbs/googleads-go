// Code generated by gowsdl DO NOT EDIT.

package inventory

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type AdSenseAccountError_Reason string

const (

	//
	// An error occurred while trying to associate an AdSense account with Ad Manager. Unable to
	// create an association with AdSense or Ad Exchange account.
	//
	AdSenseAccountError_ReasonASSOCIATE_ACCOUNT_API_ERROR AdSenseAccountError_Reason = "ASSOCIATE_ACCOUNT_API_ERROR"

	//
	// An error occured while trying to get an associated web property's ad slots. Unable to
	// retrieve ad slot information from AdSense or Ad Exchange account.
	//
	AdSenseAccountError_ReasonGET_AD_SLOT_API_ERROR AdSenseAccountError_Reason = "GET_AD_SLOT_API_ERROR"

	//
	// An error occurred while trying to get an associated web property's ad channels.
	//
	AdSenseAccountError_ReasonGET_CHANNEL_API_ERROR AdSenseAccountError_Reason = "GET_CHANNEL_API_ERROR"

	//
	// An error occured while trying to retrieve account statues from AdSense API. Unable to
	// retrieve account status information. Please try again later.
	//
	AdSenseAccountError_ReasonGET_BULK_ACCOUNT_STATUSES_API_ERROR AdSenseAccountError_Reason = "GET_BULK_ACCOUNT_STATUSES_API_ERROR"

	//
	// An error occured while trying to resend the account association verification email. Error
	// resending verification email. Please try again.
	//
	AdSenseAccountError_ReasonRESEND_VERIFICATION_EMAIL_ERROR AdSenseAccountError_Reason = "RESEND_VERIFICATION_EMAIL_ERROR"

	//
	// An error occured while trying to retrieve a response from the AdSense API. There was a
	// problem processing your request. Please try again later.
	//
	AdSenseAccountError_ReasonUNEXPECTED_API_RESPONSE_ERROR AdSenseAccountError_Reason = "UNEXPECTED_API_RESPONSE_ERROR"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdSenseAccountError_ReasonUNKNOWN AdSenseAccountError_Reason = "UNKNOWN"
)

//
// Specifies the type of ads that can be served through this {@link AdUnit}.
//

type AdSenseSettings_AdType string

const (

	//
	// Allows text-only ads.
	//
	AdSenseSettings_AdTypeTEXT AdSenseSettings_AdType = "TEXT"

	//
	// Allows image-only ads.
	//
	AdSenseSettings_AdTypeIMAGE AdSenseSettings_AdType = "IMAGE"

	//
	// Allows both text and image ads.
	//
	AdSenseSettings_AdTypeTEXT_AND_IMAGE AdSenseSettings_AdType = "TEXT_AND_IMAGE"
)

//
// Describes the border of the HTML elements used to surround an ad displayed by the {@link
// AdUnit}.
//

type AdSenseSettings_BorderStyle string

const (

	//
	// Uses the default border-style of the browser.
	//
	AdSenseSettings_BorderStyleDEFAULT AdSenseSettings_BorderStyle = "DEFAULT"

	//
	// Uses a cornered border-style.
	//
	AdSenseSettings_BorderStyleNOT_ROUNDED AdSenseSettings_BorderStyle = "NOT_ROUNDED"

	//
	// Uses a slightly rounded border-style.
	//
	AdSenseSettings_BorderStyleSLIGHTLY_ROUNDED AdSenseSettings_BorderStyle = "SLIGHTLY_ROUNDED"

	//
	// Uses a rounded border-style.
	//
	AdSenseSettings_BorderStyleVERY_ROUNDED AdSenseSettings_BorderStyle = "VERY_ROUNDED"
)

//
// List of all possible font families.
//

type AdSenseSettings_FontFamily string

const (
	AdSenseSettings_FontFamilyDEFAULT AdSenseSettings_FontFamily = "DEFAULT"

	AdSenseSettings_FontFamilyARIAL AdSenseSettings_FontFamily = "ARIAL"

	AdSenseSettings_FontFamilyTAHOMA AdSenseSettings_FontFamily = "TAHOMA"

	AdSenseSettings_FontFamilyGEORGIA AdSenseSettings_FontFamily = "GEORGIA"

	AdSenseSettings_FontFamilyTIMES AdSenseSettings_FontFamily = "TIMES"

	AdSenseSettings_FontFamilyVERDANA AdSenseSettings_FontFamily = "VERDANA"
)

//
// List of all possible font sizes the user can choose.
//

type AdSenseSettings_FontSize string

const (
	AdSenseSettings_FontSizeDEFAULT AdSenseSettings_FontSize = "DEFAULT"

	AdSenseSettings_FontSizeSMALL AdSenseSettings_FontSize = "SMALL"

	AdSenseSettings_FontSizeMEDIUM AdSenseSettings_FontSize = "MEDIUM"

	AdSenseSettings_FontSizeLARGE AdSenseSettings_FontSize = "LARGE"
)

type AdUnitCodeError_Reason string

const (

	//
	// For {@link AdUnit#adUnitCode}, only alpha-numeric characters,
	// underscores, hyphens, periods, asterisks, double quotes, back slashes,
	// forward slashes, exclamations, left angle brackets, colons and
	// parentheses are allowed.
	//
	AdUnitCodeError_ReasonINVALID_CHARACTERS AdUnitCodeError_Reason = "INVALID_CHARACTERS"

	//
	// For {@link AdUnit#adUnitCode}, only letters, numbers,
	// underscores, hyphens, periods, asterisks, double quotes, back slashes,
	// forward slashes, exclamations, left angle brackets, colons and
	// parentheses are allowed.
	//
	AdUnitCodeError_ReasonINVALID_CHARACTERS_WHEN_UTF_CHARACTERS_ARE_ALLOWED AdUnitCodeError_Reason = "INVALID_CHARACTERS_WHEN_UTF_CHARACTERS_ARE_ALLOWED"

	//
	// For {@link AdUnit#adUnitCode} representing slot codes, only alphanumeric characters,
	// underscores, hyphens, periods and colons are allowed.
	//
	AdUnitCodeError_ReasonINVALID_CHARACTERS_FOR_LEGACY_AD_EXCHANGE_TAG AdUnitCodeError_Reason = "INVALID_CHARACTERS_FOR_LEGACY_AD_EXCHANGE_TAG"

	//
	// For {@link AdUnit#adUnitCode}, forward slashes are not allowed as
	// the first character.
	//
	AdUnitCodeError_ReasonLEADING_FORWARD_SLASH AdUnitCodeError_Reason = "LEADING_FORWARD_SLASH"

	//
	// Specific codes matching ca-*pub-*-tag are reserved for "Web Property IUs"
	// generated as part of the SlotCode migration.
	//
	AdUnitCodeError_ReasonRESERVED_CODE AdUnitCodeError_Reason = "RESERVED_CODE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdUnitCodeError_ReasonUNKNOWN AdUnitCodeError_Reason = "UNKNOWN"
)

//
// Corresponds to an HTML link's {@code target} attribute.
//

type AdUnit_TargetWindow string

const (

	//
	// Specifies that the link should open in the full body of the page.
	//
	AdUnit_TargetWindowTOP AdUnit_TargetWindow = "TOP"

	//
	// Specifies that the link should open in a new window.
	//
	AdUnit_TargetWindowBLANK AdUnit_TargetWindow = "BLANK"
)

type AdUnitHierarchyError_Reason string

const (

	//
	// The depth of the {@link AdUnit} in the inventory hierarchy is greater
	// than is allowed. The maximum allowed depth is two below the effective
	// root ad unit for Ad Manager 360 accounts and is one level below the
	// effective root ad unit for Ad Manager accounts.
	//
	AdUnitHierarchyError_ReasonINVALID_DEPTH AdUnitHierarchyError_Reason = "INVALID_DEPTH"

	//
	// The only valid {@link AdUnit#parentId} for an Ad Manager account is the
	// {@link Network#effectiveRootAdUnitId}, Ad Manager 360 accounts can specify an ad unit
	// hierarchy with more than two levels.
	//
	AdUnitHierarchyError_ReasonINVALID_PARENT AdUnitHierarchyError_Reason = "INVALID_PARENT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdUnitHierarchyError_ReasonUNKNOWN AdUnitHierarchyError_Reason = "UNKNOWN"
)

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// Enumerates all possible company specific errors.
//

type CompanyError_Reason string

const (

	//
	// Indicates that an attempt was made to set a third party company for a
	// company whose type is not the same as the third party company.
	//
	CompanyError_ReasonCANNOT_SET_THIRD_PARTY_COMPANY_DUE_TO_TYPE CompanyError_Reason = "CANNOT_SET_THIRD_PARTY_COMPANY_DUE_TO_TYPE"

	//
	// Indicates that an invalid attempt was made to change a company's type.
	//
	CompanyError_ReasonCANNOT_UPDATE_COMPANY_TYPE CompanyError_Reason = "CANNOT_UPDATE_COMPANY_TYPE"

	//
	// Indicates that this type of company is not supported.
	//
	CompanyError_ReasonINVALID_COMPANY_TYPE CompanyError_Reason = "INVALID_COMPANY_TYPE"

	//
	// Indicates that an attempt was made to assign a primary contact who
	// does not belong to the specified company.
	//
	CompanyError_ReasonPRIMARY_CONTACT_DOES_NOT_BELONG_TO_THIS_COMPANY CompanyError_Reason = "PRIMARY_CONTACT_DOES_NOT_BELONG_TO_THIS_COMPANY"

	//
	// Indicates that the user specified as the third party stats provider
	// is of the wrong role type.  The user must have the third party stats
	// provider role.
	//
	CompanyError_ReasonTHIRD_PARTY_STATS_PROVIDER_IS_WRONG_ROLE_TYPE CompanyError_Reason = "THIRD_PARTY_STATS_PROVIDER_IS_WRONG_ROLE_TYPE"

	//
	// Labels can only be applied to {@link Company.Type#ADVERTISER},
	// {@link Company.Type#HOUSE_ADVERTISER}, and {@link Company.Type#AD_NETWORK} company types.
	//
	CompanyError_ReasonINVALID_LABEL_ASSOCIATION CompanyError_Reason = "INVALID_LABEL_ASSOCIATION"

	//
	// Indicates that the {@link Company.Type} does not support default billing settings.
	//
	CompanyError_ReasonINVALID_COMPANY_TYPE_FOR_DEFAULT_BILLING_SETTING CompanyError_Reason = "INVALID_COMPANY_TYPE_FOR_DEFAULT_BILLING_SETTING"

	//
	// Indicates that the format of the default billing setting is wrong.
	//
	CompanyError_ReasonINVALID_DEFAULT_BILLING_SETTING CompanyError_Reason = "INVALID_DEFAULT_BILLING_SETTING"

	//
	// Cannot remove the cross selling config from a company that has active share assignments.
	//
	CompanyError_ReasonCOMPANY_HAS_ACTIVE_SHARE_ASSIGNMENTS CompanyError_Reason = "COMPANY_HAS_ACTIVE_SHARE_ASSIGNMENTS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CompanyError_ReasonUNKNOWN CompanyError_Reason = "UNKNOWN"
)

//
// The reasons for the creative wrapper error.
//

type CreativeWrapperError_Reason string

const (

	//
	// The label is already associated with a {@link CreativeWrapper}.
	//
	CreativeWrapperError_ReasonLABEL_ALREADY_ASSOCIATED_WITH_CREATIVE_WRAPPER CreativeWrapperError_Reason = "LABEL_ALREADY_ASSOCIATED_WITH_CREATIVE_WRAPPER"

	//
	// The label type of a creative wrapper must be {@link LabelType#CREATIVE_WRAPPER}.
	//
	CreativeWrapperError_ReasonINVALID_LABEL_TYPE CreativeWrapperError_Reason = "INVALID_LABEL_TYPE"

	//
	// A macro used inside the snippet is not recognized.
	//
	CreativeWrapperError_ReasonUNRECOGNIZED_MACRO CreativeWrapperError_Reason = "UNRECOGNIZED_MACRO"

	//
	// When creating a new creative wrapper, either header or footer should exist.
	//
	CreativeWrapperError_ReasonNEITHER_HEADER_NOR_FOOTER_SPECIFIED CreativeWrapperError_Reason = "NEITHER_HEADER_NOR_FOOTER_SPECIFIED"

	//
	// Creative wrapper must have either header and/or footer, or video tracking URLs.
	//
	CreativeWrapperError_ReasonNEITHER_HEADER_NOR_FOOTER_NOR_VIDEO_TRACKING_URLS_SPECIFIED CreativeWrapperError_Reason = "NEITHER_HEADER_NOR_FOOTER_NOR_VIDEO_TRACKING_URLS_SPECIFIED"

	//
	// The network has not been enabled for creating labels of type
	// {@link LabelType#CREATIVE_WRAPPER}.
	//
	CreativeWrapperError_ReasonCANNOT_USE_CREATIVE_WRAPPER_TYPE CreativeWrapperError_Reason = "CANNOT_USE_CREATIVE_WRAPPER_TYPE"

	//
	// Cannot update {@link CreativeWrapper#labelId}.
	//
	CreativeWrapperError_ReasonCANNOT_UPDATE_LABEL_ID CreativeWrapperError_Reason = "CANNOT_UPDATE_LABEL_ID"

	//
	// Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels to an ad unit
	// if it has no descendants with {@link AdUnit#adUnitSizes} of
	// {@code AdUnitSize#environmentType}  as
	// {@link EnvironmentType#BROWSER}.
	//
	CreativeWrapperError_ReasonCANNOT_APPLY_TO_AD_UNIT_WITH_VIDEO_SIZES CreativeWrapperError_Reason = "CANNOT_APPLY_TO_AD_UNIT_WITH_VIDEO_SIZES"

	//
	// Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels with a {@link
	// CreativeWrapper#VIDEO_TRACKING_URL} type to an ad unit if it has no descendants with {@link
	// AdUnit#adUnitSizes} of {@code AdUnitSize#environmentType} as {@link
	// EnvironmentType#VIDEO_PLAYER}.
	//
	CreativeWrapperError_ReasonCANNOT_APPLY_TO_AD_UNIT_WITHOUT_VIDEO_SIZES CreativeWrapperError_Reason = "CANNOT_APPLY_TO_AD_UNIT_WITHOUT_VIDEO_SIZES"

	//
	// Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels to an ad unit if the label is not
	// associated with a creative wrapper.
	//
	CreativeWrapperError_ReasonCANNOT_APPLY_TO_AD_UNIT_WITHOUT_LABEL_ASSOCIATION CreativeWrapperError_Reason = "CANNOT_APPLY_TO_AD_UNIT_WITHOUT_LABEL_ASSOCIATION"

	//
	// Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels to an ad unit
	// if {@link AdUnit#targetPlatform} is of type {@code TargetPlatform#MOBILE}
	//
	CreativeWrapperError_ReasonCANNOT_APPLY_TO_MOBILE_AD_UNIT CreativeWrapperError_Reason = "CANNOT_APPLY_TO_MOBILE_AD_UNIT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeWrapperError_ReasonUNKNOWN CreativeWrapperError_Reason = "UNKNOWN"
)

//
// The reason of the error.
//

type CrossSellError_Reason string

const (

	//
	// A company for cross-sell partner must be of type {@link Company.Type#PARTNER}.
	//
	CrossSellError_ReasonCOMPANY_IS_NOT_DISTRIBUTION_PARTNER CrossSellError_Reason = "COMPANY_IS_NOT_DISTRIBUTION_PARTNER"

	//
	// The network code of a cross-sell partner cannot be changed.
	//
	CrossSellError_ReasonCHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED CrossSellError_Reason = "CHANGING_PARTNER_NETWORK_IS_NOT_SUPPORTED"

	//
	// A cross-sell partner must have a partner name.
	//
	CrossSellError_ReasonMISSING_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "MISSING_DISTRIBUTOR_PARTNER_NAME"

	//
	// The cross-sell distributor publisher feature must be enabled.
	//
	CrossSellError_ReasonDISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "DISTRIBUTOR_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell publisher features must be enabled on the partner's network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_MISSING_PUBLISHER_FEATURE"

	//
	// The cross-sell partner name conflicts with an ad unit name on the partner's network.
	//
	CrossSellError_ReasonINVALID_DISTRIBUTOR_PARTNER_NAME CrossSellError_Reason = "INVALID_DISTRIBUTOR_PARTNER_NAME"

	//
	// The network code of a cross-sell partner is invalid.
	//
	CrossSellError_ReasonINVALID_CONTENT_PROVIDER_NETWORK CrossSellError_Reason = "INVALID_CONTENT_PROVIDER_NETWORK"

	//
	// The content provider network must be different than the distributor network.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_CANNOT_BE_ACTIVE_NETWORK"

	//
	// The same network code was already enabled for cross-sell in a different company.
	//
	CrossSellError_ReasonCONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING CrossSellError_Reason = "CONTENT_PROVIDER_NETWORK_ALREADY_ENABLED_FOR_CROSS_SELLING"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is an error.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_ERROR CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_ERROR"

	//
	// A rule defined by the cross selling distributor has been violated by a line item targeting
	// a shared ad unit. Violating this rule is a warning.
	//
	// <p>By setting {@link LineItem#skipCrossSellingRuleWarningChecks}, the content partner can
	// suppress the warning (and create or save the line item).
	//
	// <p>This flag is available beginning in V201411.
	//
	CrossSellError_ReasonDISTRIBUTOR_RULE_VIOLATION_WARNING CrossSellError_Reason = "DISTRIBUTOR_RULE_VIOLATION_WARNING"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CrossSellError_ReasonUNKNOWN CrossSellError_Reason = "UNKNOWN"
)

//
// The reasons for the entity children limit reached error.
//

type EntityChildrenLimitReachedError_Reason string

const (

	//
	// The number of line items on the order exceeds the max number of line items allowed per order
	// in the network.
	//
	EntityChildrenLimitReachedError_ReasonLINE_ITEM_LIMIT_FOR_ORDER_REACHED EntityChildrenLimitReachedError_Reason = "LINE_ITEM_LIMIT_FOR_ORDER_REACHED"

	//
	// The number of creatives associated with the line item exceeds the max number of creatives
	// allowed to be associated with a line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonCREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "CREATIVE_ASSOCIATION_LIMIT_FOR_LINE_ITEM_REACHED"

	//
	// The number of ad units on the placement exceeds the max number of ad units
	// allowed per placement in the network.
	//
	EntityChildrenLimitReachedError_ReasonAD_UNIT_LIMIT_FOR_PLACEMENT_REACHED EntityChildrenLimitReachedError_Reason = "AD_UNIT_LIMIT_FOR_PLACEMENT_REACHED"

	//
	// The number of targeting expressions on the line item exceeds the max number of targeting
	// expressions allowed per line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_LINE_ITEM_REACHED"

	//
	// The size of a single targeting expression tree exceeds the max size allowed by the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_SIZE_LIMIT_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_SIZE_LIMIT_REACHED"

	//
	// The number of custom targeting values for the free-form or predefined custom targeting key
	// exceeds the max number allowed.
	//
	EntityChildrenLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED EntityChildrenLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_FOR_KEY_LIMIT_REACHED"

	//
	// The total number of targeting expressions on the creatives for the line item exceeds
	// the max number allowed per line item in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_CREATIVES_ON_LINE_ITEM_REACHED"

	//
	// The number of attachments added to the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedError_ReasonATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED EntityChildrenLimitReachedError_Reason = "ATTACHMENT_LIMIT_FOR_PROPOSAL_REACHED"

	//
	// The number of proposal line items on the proposal exceeds the max number
	// allowed per proposal in the network.
	//
	EntityChildrenLimitReachedError_ReasonPROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED EntityChildrenLimitReachedError_Reason = "PROPOSAL_LINE_ITEM_LIMIT_FOR_PROPOSAL_REACHED"

	//
	// The number of product package items on the product package exceeds the max number
	// allowed per product package in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_LIMIT_FOR_PRODUCT_PACKAGE_REACHED"

	//
	// The number of product template and product base rates on the rate card (including excluded
	// product base rates) exceeds the max number allowed per rate card in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_TEMPLATE_AND_PRODUCT_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of product package item base rates on the rate card exceeds the max number
	// allowed per rate card in the network.
	//
	EntityChildrenLimitReachedError_ReasonPRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PRODUCT_PACKAGE_ITEM_BASE_RATE_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of premiums of the rate card exceeds the max number allowed per rate card
	// in the network.
	//
	EntityChildrenLimitReachedError_ReasonPREMIUM_LIMIT_FOR_RATE_CARD_REACHED EntityChildrenLimitReachedError_Reason = "PREMIUM_LIMIT_FOR_RATE_CARD_REACHED"

	//
	// The number of ad units on {@link AdExclusionRule#inventoryTargeting} exceeds the max number
	// of ad units allowed per ad exclusion rule inventory targeting in the network.
	//
	EntityChildrenLimitReachedError_ReasonAD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED EntityChildrenLimitReachedError_Reason = "AD_UNIT_LIMIT_FOR_AD_EXCLUSION_RULE_TARGETING_REACHED"

	//
	// The number of native styles under the native creative template exceeds the
	// max number of native styles allowed per native creative template in the
	// network.
	//
	EntityChildrenLimitReachedError_ReasonNATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED EntityChildrenLimitReachedError_Reason = "NATIVE_STYLE_LIMIT_FOR_NATIVE_AD_FORMAT_REACHED"

	//
	// The number of targeting expressions on the native style exceeds the max number of targeting
	// expressions allowed per native style in the network.
	//
	EntityChildrenLimitReachedError_ReasonTARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED EntityChildrenLimitReachedError_Reason = "TARGETING_EXPRESSION_LIMIT_FOR_PRESENTATION_ASSIGNMENT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityChildrenLimitReachedError_ReasonUNKNOWN EntityChildrenLimitReachedError_Reason = "UNKNOWN"
)

//
// The reasons for the entity limit reached error.
//

type EntityLimitReachedError_Reason string

const (

	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_LIMIT_REACHED EntityLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonAD_EXCLUSION_RULES_LIMIT_REACHED EntityLimitReachedError_Reason = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonPLACEMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "PLACEMENTS_LIMIT_REACHED"

	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonLINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_LINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonDAI_ENCODING_PROFILES_LIMIT_REACHED EntityLimitReachedError_Reason = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonTRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFORECAST_ADJUSTMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_EXPERIMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonSITES_LIMIT_REACHED EntityLimitReachedError_Reason = "SITES_LIMIT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedError_ReasonUNKNOWN EntityLimitReachedError_Reason = "UNKNOWN"
)

//
// Enum for the valid environments in which ads can be shown.
//

type EnvironmentType string

const (

	//
	// A regular web browser.
	//
	EnvironmentTypeBROWSER EnvironmentType = "BROWSER"

	//
	// Video players.
	//
	EnvironmentTypeVIDEO_PLAYER EnvironmentType = "VIDEO_PLAYER"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type FrequencyCapError_Reason string

const (
	FrequencyCapError_ReasonIMPRESSION_LIMIT_EXCEEDED FrequencyCapError_Reason = "IMPRESSION_LIMIT_EXCEEDED"

	FrequencyCapError_ReasonIMPRESSIONS_TOO_LOW FrequencyCapError_Reason = "IMPRESSIONS_TOO_LOW"

	FrequencyCapError_ReasonRANGE_LIMIT_EXCEEDED FrequencyCapError_Reason = "RANGE_LIMIT_EXCEEDED"

	FrequencyCapError_ReasonRANGE_TOO_LOW FrequencyCapError_Reason = "RANGE_TOO_LOW"

	FrequencyCapError_ReasonDUPLICATE_TIME_RANGE FrequencyCapError_Reason = "DUPLICATE_TIME_RANGE"

	FrequencyCapError_ReasonTOO_MANY_FREQUENCY_CAPS FrequencyCapError_Reason = "TOO_MANY_FREQUENCY_CAPS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FrequencyCapError_ReasonUNKNOWN FrequencyCapError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type InvalidColorError_Reason string

const (

	//
	// The provided value is not a valid hexadecimal color.
	//
	InvalidColorError_ReasonINVALID_FORMAT InvalidColorError_Reason = "INVALID_FORMAT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidColorError_ReasonUNKNOWN InvalidColorError_Reason = "UNKNOWN"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// Represents the status of objects that represent inventory - ad units and
// placements.
//

type InventoryStatus string

const (

	//
	// The object is active.
	//
	InventoryStatusACTIVE InventoryStatus = "ACTIVE"

	//
	// The object is no longer active.
	//
	InventoryStatusINACTIVE InventoryStatus = "INACTIVE"

	//
	// The object has been archived.
	//
	InventoryStatusARCHIVED InventoryStatus = "ARCHIVED"
)

//
// Possible reasons for the error.
//

type InventoryUnitError_Reason string

const (

	//
	// {@link AdUnit#explicitlyTargeted} can be set to {@code true} only in an
	// Ad Manager 360 account.
	//
	InventoryUnitError_ReasonEXPLICIT_TARGETING_NOT_ALLOWED InventoryUnitError_Reason = "EXPLICIT_TARGETING_NOT_ALLOWED"

	//
	// The specified target platform is not applicable for the inventory unit.
	//
	InventoryUnitError_ReasonTARGET_PLATFORM_NOT_APPLICABLE InventoryUnitError_Reason = "TARGET_PLATFORM_NOT_APPLICABLE"

	//
	// AdSense cannot be enabled on this inventory unit if it is disabled for the network.
	//
	InventoryUnitError_ReasonADSENSE_CANNOT_BE_ENABLED InventoryUnitError_Reason = "ADSENSE_CANNOT_BE_ENABLED"

	//
	// A root unit cannot be deactivated.
	//
	InventoryUnitError_ReasonROOT_UNIT_CANNOT_BE_DEACTIVATED InventoryUnitError_Reason = "ROOT_UNIT_CANNOT_BE_DEACTIVATED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InventoryUnitError_ReasonUNKNOWN InventoryUnitError_Reason = "UNKNOWN"
)

//
// Reasons for the error.
//

type InventoryUnitRefreshRateError_Reason string

const (

	//
	// The refresh rate must be between 30 and 120 seconds.
	//
	InventoryUnitRefreshRateError_ReasonINVALID_RANGE InventoryUnitRefreshRateError_Reason = "INVALID_RANGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InventoryUnitRefreshRateError_ReasonUNKNOWN InventoryUnitRefreshRateError_Reason = "UNKNOWN"
)

//
// All possible reasons the error can be thrown.
//

type InventoryUnitSizesError_Reason string

const (

	//
	// A size in the ad unit is too large or too small.
	//
	InventoryUnitSizesError_ReasonINVALID_SIZES InventoryUnitSizesError_Reason = "INVALID_SIZES"

	//
	// A size is an aspect ratio, but the ad unit is not a mobile ad unit.
	//
	InventoryUnitSizesError_ReasonINVALID_SIZE_FOR_PLATFORM InventoryUnitSizesError_Reason = "INVALID_SIZE_FOR_PLATFORM"

	//
	// A size is video, but the video feature is not enabled.
	//
	InventoryUnitSizesError_ReasonVIDEO_FEATURE_MISSING InventoryUnitSizesError_Reason = "VIDEO_FEATURE_MISSING"

	//
	// A size is video in a mobile ad unit,
	// but the mobile video feature is not enabled.
	//
	InventoryUnitSizesError_ReasonVIDEO_MOBILE_LINE_ITEM_FEATURE_MISSING InventoryUnitSizesError_Reason = "VIDEO_MOBILE_LINE_ITEM_FEATURE_MISSING"

	//
	// A size that has companions must have an environment of VIDEO_PLAYER.
	//
	InventoryUnitSizesError_ReasonINVALID_SIZE_FOR_MASTER InventoryUnitSizesError_Reason = "INVALID_SIZE_FOR_MASTER"

	//
	// A size that is a companion must have an environment of BROWSER.
	//
	InventoryUnitSizesError_ReasonINVALID_SIZE_FOR_COMPANION InventoryUnitSizesError_Reason = "INVALID_SIZE_FOR_COMPANION"

	//
	// Duplicate video master sizes are not allowed.
	//
	InventoryUnitSizesError_ReasonDUPLICATE_MASTER_SIZES InventoryUnitSizesError_Reason = "DUPLICATE_MASTER_SIZES"

	//
	// A size is an aspect ratio, but aspect ratio sizes are not enabled.
	//
	InventoryUnitSizesError_ReasonASPECT_RATIO_NOT_SUPPORTED InventoryUnitSizesError_Reason = "ASPECT_RATIO_NOT_SUPPORTED"

	//
	// A video size has companions, but companions are not allowed for the network
	//
	InventoryUnitSizesError_ReasonVIDEO_COMPANIONS_NOT_SUPPORTED InventoryUnitSizesError_Reason = "VIDEO_COMPANIONS_NOT_SUPPORTED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InventoryUnitSizesError_ReasonUNKNOWN InventoryUnitSizesError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LabelEntityAssociationError_Reason string

const (

	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION"

	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationError_ReasonINVALID_ASSOCIATION LabelEntityAssociationError_Reason = "INVALID_ASSOCIATION"

	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationError_ReasonNEGATION_NOT_ALLOWED LabelEntityAssociationError_Reason = "NEGATION_NOT_ALLOWED"

	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION_WITH_NEGATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationError_ReasonUNKNOWN LabelEntityAssociationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the validation error.
//

type NullError_Reason string

const (

	//
	// Specified list/container must not contain any null elements
	//
	NullError_ReasonNULL_CONTENT NullError_Reason = "NULL_CONTENT"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// Identifies the source of a field's value.
//

type ValueSourceType string

const (

	//
	// The field's value is inherited from the parent object.
	//
	ValueSourceTypePARENT ValueSourceType = "PARENT"

	//
	// The field's value is user specified and not inherited.
	//
	ValueSourceTypeDIRECTLY_SPECIFIED ValueSourceType = "DIRECTLY_SPECIFIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ValueSourceTypeUNKNOWN ValueSourceType = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RangeError_Reason string

const (
	RangeError_ReasonTOO_HIGH RangeError_Reason = "TOO_HIGH"

	RangeError_ReasonTOO_LOW RangeError_Reason = "TOO_LOW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeError_ReasonUNKNOWN RangeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RegExError_Reason string

const (

	//
	// Invalid value found.
	//
	RegExError_ReasonINVALID RegExError_Reason = "INVALID"

	//
	// Null value found.
	//
	RegExError_ReasonNULL RegExError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RegExError_ReasonUNKNOWN RegExError_Reason = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// Represents smart size modes.
//

type SmartSizeMode string

const (

	//
	// The value returned if the actual value is not exposed by the requested
	// API version.
	//
	SmartSizeModeUNKNOWN SmartSizeMode = "UNKNOWN"

	//
	// Fixed size mode (default).
	//
	SmartSizeModeNONE SmartSizeMode = "NONE"

	//
	// The height is fixed for the request, the width is a range.
	//
	SmartSizeModeSMART_BANNER SmartSizeMode = "SMART_BANNER"

	//
	// Height and width are ranges.
	//
	SmartSizeModeDYNAMIC_SIZE SmartSizeMode = "DYNAMIC_SIZE"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type TeamError_Reason string

const (

	//
	// User cannot use this entity because it is not on any of the user's teams.
	//
	TeamError_ReasonENTITY_NOT_ON_USERS_TEAMS TeamError_Reason = "ENTITY_NOT_ON_USERS_TEAMS"

	//
	// The targeted or excluded ad unit must be on the order's teams.
	//
	TeamError_ReasonAD_UNITS_NOT_ON_ORDER_TEAMS TeamError_Reason = "AD_UNITS_NOT_ON_ORDER_TEAMS"

	//
	// The targeted placement must be on the order's teams.
	//
	TeamError_ReasonPLACEMENTS_NOT_ON_ORDER_TEAMS TeamError_Reason = "PLACEMENTS_NOT_ON_ORDER_TEAMS"

	//
	// Entity cannot be created because it is not on any of the user's teams.
	//
	TeamError_ReasonMISSING_USERS_TEAM TeamError_Reason = "MISSING_USERS_TEAM"

	//
	// A team that gives access to all entities of a given type cannot be
	// associated with an entity of that type.
	//
	TeamError_ReasonALL_TEAM_ASSOCIATION_NOT_ALLOWED TeamError_Reason = "ALL_TEAM_ASSOCIATION_NOT_ALLOWED"

	//
	// The assignment of team to entities is invalid.
	//
	TeamError_ReasonINVALID_TEAM_ASSIGNMENT TeamError_Reason = "INVALID_TEAM_ASSIGNMENT"

	//
	// Cannot modify or create a team with an inactive status.
	//
	TeamError_ReasonCANNOT_UPDATE_INACTIVE_TEAM TeamError_Reason = "CANNOT_UPDATE_INACTIVE_TEAM"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TeamError_ReasonUNKNOWN TeamError_Reason = "UNKNOWN"
)

//
// Represent the possible time units for frequency capping.
//

type TimeUnit string

const (
	TimeUnitMINUTE TimeUnit = "MINUTE"

	TimeUnitHOUR TimeUnit = "HOUR"

	TimeUnitDAY TimeUnit = "DAY"

	TimeUnitWEEK TimeUnit = "WEEK"

	TimeUnitMONTH TimeUnit = "MONTH"

	TimeUnitLIFETIME TimeUnit = "LIFETIME"

	//
	// Per pod of ads in a video stream. Only valid for entities in a
	// {@link EnvironmentType#VIDEO_PLAYER} environment.
	//
	TimeUnitPOD TimeUnit = "POD"

	//
	// Per video stream. Only valid for entities in a
	// {@link EnvironmentType#VIDEO_PLAYER} environment.
	//
	TimeUnitSTREAM TimeUnit = "STREAM"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TimeUnitUNKNOWN TimeUnit = "UNKNOWN"
)

type CreateAdUnits struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createAdUnits"`

	AdUnits []*AdUnit `xml:"adUnits,omitempty" json:"adUnits,omitempty"`
}

type CreateAdUnitsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createAdUnitsResponse"`

	Rval []*AdUnit `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetAdUnitSizesByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAdUnitSizesByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetAdUnitSizesByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAdUnitSizesByStatementResponse"`

	Rval []*AdUnitSize `xml:"rval,omitempty" json:"rval,omitempty"`
}

type GetAdUnitsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAdUnitsByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetAdUnitsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getAdUnitsByStatementResponse"`

	Rval *AdUnitPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformAdUnitAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performAdUnitAction"`

	AdUnitAction *AdUnitAction `xml:"adUnitAction,omitempty" json:"adUnitAction,omitempty"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type PerformAdUnitActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performAdUnitActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateAdUnits struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateAdUnits"`

	AdUnits []*AdUnit `xml:"adUnits,omitempty" json:"adUnits,omitempty"`
}

type UpdateAdUnitsResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateAdUnitsResponse"`

	Rval []*AdUnit `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type ActivateAdUnits struct {
	*AdUnitAction
}

type AdSenseAccountError struct {
	*ApiError

	Reason *AdSenseAccountError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AdSenseSettings struct {

	//
	// Specifies whether or not the {@link AdUnit} is enabled for serving ads from the AdSense content
	// network. This attribute is optional and defaults to the ad unit's parent or ancestor's setting
	// if one has been set. If no ancestor of the ad unit has set {@code adSenseEnabled}, the
	// attribute is defaulted to {@code true}.
	//
	AdSenseEnabled bool `xml:"adSenseEnabled,omitempty" json:"adSenseEnabled,omitempty"`

	//
	// Specifies the Hexadecimal border color, from {@code 000000} to {@code FFFFFF}. This attribute
	// is optional and defaults to the ad unit's parent or ancestor's setting if one has been set. If
	// no ancestor of the ad unit has set {@code borderColor}, the attribute is defaulted to {@code
	// FFFFFF}.
	//
	BorderColor string `xml:"borderColor,omitempty" json:"borderColor,omitempty"`

	//
	// Specifies the Hexadecimal title color of an ad, from {@code 000000} to {@code FFFFFF}. This
	// attribute is optional and defaults to the ad unit's parent or ancestor's setting if one has
	// been set. If no ancestor of the ad unit has set {@code titleColor}, the attribute is defaulted
	// to {@code 0000FF}.
	//
	TitleColor string `xml:"titleColor,omitempty" json:"titleColor,omitempty"`

	//
	// Specifies the Hexadecimal background color of an ad, from {@code 000000} to {@code FFFFFF}.
	// This attribute is optional and defaults to the ad unit's parent or ancestor's setting if one
	// has been set. If no ancestor of the ad unit has set {@code backgroundColor}, the attribute is
	// defaulted to {@code FFFFFF}.
	//
	BackgroundColor string `xml:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`

	//
	// Specifies the Hexadecimal color of the text of an ad, from {@code 000000} to {@code FFFFFF}.
	// This attribute is optional and defaults to the ad unit's parent or ancestor's setting if one
	// has been set. If no ancestor of the ad unit has set {@code textColor}, the attribute is
	// defaulted to {@code 000000}.
	//
	TextColor string `xml:"textColor,omitempty" json:"textColor,omitempty"`

	//
	// Specifies the Hexadecimal color of the URL of an ad, from {@code 000000} to {@code FFFFFF}.
	// This attribute is optional and defaults to the ad unit's parent or ancestor's setting if one
	// has been set. If no ancestor of the ad unit has set {@code urlColor}, the attribute is
	// defaulted to {@code 008000} .
	//
	UrlColor string `xml:"urlColor,omitempty" json:"urlColor,omitempty"`

	//
	// Specifies what kind of ad can be served by this {@link AdUnit} from the AdSense Content
	// Network. This attribute is optional and defaults to the ad unit's parent or ancestor's setting
	// if one has been set. If no ancestor of the ad unit has set {@code adType}, the attribute is
	// defaulted to {@link AdType#TEXT_AND_IMAGE}.
	//
	AdType *AdSenseSettings_AdType `xml:"adType,omitempty" json:"adType,omitempty"`

	//
	// Specifies the border-style of the {@link AdUnit}. This attribute is optional and defaults to
	// the ad unit's parent or ancestor's setting if one has been set. If no ancestor of the ad unit
	// has set {@code borderStyle}, the attribute is defaulted to {@link BorderStyle#DEFAULT}.
	//
	BorderStyle *AdSenseSettings_BorderStyle `xml:"borderStyle,omitempty" json:"borderStyle,omitempty"`

	//
	// Specifies the font family of the {@link AdUnit}. This attribute is optional and defaults to the
	// ad unit's parent or ancestor's setting if one has been set. If no ancestor of the ad unit has
	// set {@code fontFamily}, the attribute is defaulted to {@link FontFamily#DEFAULT}.
	//
	FontFamily *AdSenseSettings_FontFamily `xml:"fontFamily,omitempty" json:"fontFamily,omitempty"`

	//
	// Specifies the font size of the {@link AdUnit}. This attribute is optional and defaults to the
	// ad unit's parent or ancestor's setting if one has been set. If no ancestor of the ad unit has
	// set {@code fontSize}, the attribute is defaulted to {@link FontSize#DEFAULT}.
	//
	FontSize *AdSenseSettings_FontSize `xml:"fontSize,omitempty" json:"fontSize,omitempty"`
}

type AdUnitAction struct {
}

type AdUnitCodeError struct {
	*ApiError

	Reason *AdUnitCodeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AdUnit struct {

	//
	// Uniquely identifies the {@code AdUnit}. This value is read-only and is assigned by Google when
	// an ad unit is created. This attribute is required for updates.
	//
	Id string `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The ID of the ad unit's parent. Every ad unit has a parent except for the root ad unit, which
	// is created by Google. This attribute is required when creating the ad unit. Once the ad unit is
	// created this value will be read-only.
	//
	ParentId string `xml:"parentId,omitempty" json:"parentId,omitempty"`

	//
	// This field is set to {@code true} if the ad unit has any children. This attribute is read-only
	// and is populated by Google.
	//
	HasChildren bool `xml:"hasChildren,omitempty" json:"hasChildren,omitempty"`

	//
	// The path to this ad unit in the ad unit hierarchy represented as a list from the root to this
	// ad unit's parent. For root ad units, this list is empty. This attribute is read-only and is
	// populated by Google.
	//
	ParentPath []*AdUnitParent `xml:"parentPath,omitempty" json:"parentPath,omitempty"`

	//
	// The name of the ad unit. This attribute is required and its maximum length is 255 characters.
	// This attribute must also be case-insensitive unique.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// A description of the ad unit. This value is optional and its maximum length is 65,535
	// characters.
	//
	Description string `xml:"description,omitempty" json:"description,omitempty"`

	//
	// The value to use for the HTML link's {@code target} attribute. This value is optional and will
	// be interpreted as {@link TargetWindow#TOP} if left blank.
	//
	TargetWindow *AdUnit_TargetWindow `xml:"targetWindow,omitempty" json:"targetWindow,omitempty"`

	//
	// The status of this ad unit. It defaults to {@link InventoryStatus#ACTIVE}. This value cannot be
	// updated directly using {@link InventoryService#updateAdUnit}. It can only be modified by
	// performing actions via {@link InventoryService#performAdUnitAction}.
	//
	Status *InventoryStatus `xml:"status,omitempty" json:"status,omitempty"`

	//
	// A string used to uniquely identify the ad unit for the purposes of serving the ad. This
	// attribute is optional and can be set during ad unit creation. If it is not provided, it will be
	// assigned by Google based off of the inventory unit ID. Once an ad unit is created, its {@code
	// adUnitCode} cannot be changed.
	//
	AdUnitCode string `xml:"adUnitCode,omitempty" json:"adUnitCode,omitempty"`

	//
	// The permissible creative sizes that can be served inside this ad unit. This attribute is
	// optional. This attribute replaces the {@code sizes} attribute.
	//
	AdUnitSizes []*AdUnitSize `xml:"adUnitSizes,omitempty" json:"adUnitSizes,omitempty"`

	//
	// Whether this is an interstitial ad unit.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`

	//
	// Whether this is a native ad unit.
	//
	IsNative bool `xml:"isNative,omitempty" json:"isNative,omitempty"`

	//
	// Whether this is a fluid ad unit.
	//
	IsFluid bool `xml:"isFluid,omitempty" json:"isFluid,omitempty"`

	//
	// If this field is set to {@code true}, then the {@code AdUnit} will not be implicitly targeted
	// when its parent is. Traffickers must explicitly target such an ad unit or else no line items
	// will serve to it. This feature is only available for Ad Manager 360 accounts.
	//
	ExplicitlyTargeted bool `xml:"explicitlyTargeted,omitempty" json:"explicitlyTargeted,omitempty"`

	//
	// AdSense specific settings. To overwrite this, set the {@link #adSenseSettingsSource} to {@link
	// PropertySourceType#DIRECTLY_SPECIFIED} when setting the value of this field.
	//
	AdSenseSettings *AdSenseSettings `xml:"adSenseSettings,omitempty" json:"adSenseSettings,omitempty"`

	//
	// Specifies the source of {@link #adSenseSettings} value. To revert an overridden value to its
	// default, set this field to {@link PropertySourceType#PARENT}.
	//
	AdSenseSettingsSource *_ValueSourceType `xml:"adSenseSettingsSource,omitempty" json:"adSenseSettingsSource,omitempty"`

	//
	// The set of label frequency caps applied directly to this ad unit. There is a limit of 10 label
	// frequency caps per ad unit.
	//
	AppliedLabelFrequencyCaps []*LabelFrequencyCap `xml:"appliedLabelFrequencyCaps,omitempty" json:"appliedLabelFrequencyCaps,omitempty"`

	//
	// Contains the set of labels applied directly to the ad unit as well as those inherited from
	// parent ad units. This field is readonly and is assigned by Google.
	//
	EffectiveLabelFrequencyCaps []*LabelFrequencyCap `xml:"effectiveLabelFrequencyCaps,omitempty" json:"effectiveLabelFrequencyCaps,omitempty"`

	//
	// The set of labels applied directly to this ad unit.
	//
	AppliedLabels []*AppliedLabel `xml:"appliedLabels,omitempty" json:"appliedLabels,omitempty"`

	//
	// Contains the set of labels applied directly to the ad unit as well as those inherited from the
	// parent ad units. If a label has been negated, only the negated label is returned. This field is
	// readonly and is assigned by Google.
	//
	EffectiveAppliedLabels []*AppliedLabel `xml:"effectiveAppliedLabels,omitempty" json:"effectiveAppliedLabels,omitempty"`

	//
	// The IDs of all teams that this ad unit is on as well as those inherited from parent ad units.
	// This value is read-only and is set by Google.
	//
	EffectiveTeamIds []int64 `xml:"effectiveTeamIds,omitempty" json:"effectiveTeamIds,omitempty"`

	//
	// The IDs of all teams that this ad unit is on directly.
	//
	AppliedTeamIds []int64 `xml:"appliedTeamIds,omitempty" json:"appliedTeamIds,omitempty"`

	//
	// The date and time this ad unit was last modified.
	//
	LastModifiedDateTime soap.XSDDateTime `xml:"lastModifiedDateTime,omitempty" json:"lastModifiedDateTime,omitempty"`

	//
	// The smart size mode for this ad unit. This attribute is optional and defaults to {@link
	// SmartSizeMode#NONE} for fixed sizes.
	//
	SmartSizeMode *SmartSizeMode `xml:"smartSizeMode,omitempty" json:"smartSizeMode,omitempty"`

	//
	// The interval in seconds which ad units in mobile apps automatically refresh. Valid values are
	// between 30 and 120 seconds. This attribute is optional and only applies to ad units in mobile
	// apps. If this value is not set, then the mobile app ad will not refresh.
	//
	RefreshRate int32 `xml:"refreshRate,omitempty" json:"refreshRate,omitempty"`

	//
	// Specifies an ID for a channel in an external set-top box campaign management system. This
	// attribute is only meaningful if {@link #isSetTopBoxEnabled} is {@code true}. This attribute is
	// read-only.
	//
	ExternalSetTopBoxChannelId string `xml:"externalSetTopBoxChannelId,omitempty" json:"externalSetTopBoxChannelId,omitempty"`

	//
	// Flag that specifies whether this ad unit represents an external set-top box channel. This
	// attribute is read-only.
	//
	IsSetTopBoxEnabled bool `xml:"isSetTopBoxEnabled,omitempty" json:"isSetTopBoxEnabled,omitempty"`

	//
	// The {@link MobileApplication#applicationId} for the CTV application that this ad unit is
	// within. This attribute is optional.
	//
	ApplicationId int64 `xml:"applicationId,omitempty" json:"applicationId,omitempty"`
}

type AdUnitHierarchyError struct {
	*ApiError

	Reason *AdUnitHierarchyError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AdUnitPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of ad units contained within this page.
	//
	Results []*AdUnit `xml:"results,omitempty" json:"results,omitempty"`
}

type AdUnitParent struct {

	//
	// The ID of the parent {@code AdUnit}. This value is readonly and is populated by Google.
	//
	Id string `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The name of the parent {@code AdUnit}. This value is readonly and is populated by Google.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// A string used to uniquely identify the ad unit for the purposes of serving the ad. This
	// attribute is read-only and is assigned by Google when an ad unit is created.
	//
	AdUnitCode string `xml:"adUnitCode,omitempty" json:"adUnitCode,omitempty"`
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AppliedLabel struct {

	//
	// The ID of a created {@link Label}.
	//
	LabelId int64 `xml:"labelId,omitempty" json:"labelId,omitempty"`

	//
	// {@code isNegated} should be set to {@code true} to negate the effects of {@code labelId}.
	//
	IsNegated bool `xml:"isNegated,omitempty" json:"isNegated,omitempty"`
}

type ArchiveAdUnits struct {
	*AdUnitAction
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CompanyError struct {
	*ApiError

	Reason *CompanyError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeWrapperError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeWrapperError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CrossSellError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CrossSellError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type DeactivateAdUnits struct {
	*AdUnitAction
}

type EntityChildrenLimitReachedError struct {
	*ApiError

	Reason *EntityChildrenLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type EntityLimitReachedError struct {
	*ApiError

	Reason *EntityLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type FrequencyCap struct {

	//
	// The maximum number of impressions than can be served to a user within a specified time period.
	//
	MaxImpressions int32 `xml:"maxImpressions,omitempty" json:"maxImpressions,omitempty"`

	//
	// The number of {@code FrequencyCap#timeUnit} to represent the total time period.
	//
	NumTimeUnits int32 `xml:"numTimeUnits,omitempty" json:"numTimeUnits,omitempty"`

	//
	// The unit of time for specifying the time period.
	//
	TimeUnit *TimeUnit `xml:"timeUnit,omitempty" json:"timeUnit,omitempty"`
}

type FrequencyCapError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *FrequencyCapError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidColorError struct {
	*ApiError

	Reason *InvalidColorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InventoryUnitError struct {
	*ApiError

	Reason *InventoryUnitError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InventoryUnitRefreshRateError struct {
	*ApiError

	Reason *InventoryUnitRefreshRateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AdUnitSize struct {

	//
	// The permissible creative size that can be served inside this ad unit.
	//
	Size *Size `xml:"size,omitempty" json:"size,omitempty"`

	//
	// The environment type of the ad unit size. The default value is {@link EnvironmentType#BROWSER}.
	//
	EnvironmentType *EnvironmentType `xml:"environmentType,omitempty" json:"environmentType,omitempty"`

	//
	// The companions for this ad unit size. Companions are only valid if the environment is {@link
	// EnvironmentType#VIDEO_PLAYER}. If the environment is {@link EnvironmentType#BROWSER} including
	// companions results in an error.
	//
	Companions []*AdUnitSize `xml:"companions,omitempty" json:"companions,omitempty"`

	//
	// The full (including companion sizes, if applicable) display string of the size, e.g. {@code
	// "300x250"} or {@code "300x250v (180x150)"}
	//
	FullDisplayString string `xml:"fullDisplayString,omitempty" json:"fullDisplayString,omitempty"`

	//
	// Whether the inventory size is audio. If set to true, {@code Size} will be set to {@code "1x1"}
	// and {@code EnvironmentType} will be set to {@link EnvironmentType#VIDEO_PLAYER} regardless of
	// user input.
	//
	IsAudio bool `xml:"isAudio,omitempty" json:"isAudio,omitempty"`
}

type InventoryUnitSizesError struct {
	*ApiError

	Reason *InventoryUnitSizesError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelEntityAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LabelEntityAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelFrequencyCap struct {

	//
	// The frequency cap to be applied with this label. *
	//
	FrequencyCap *FrequencyCap `xml:"frequencyCap,omitempty" json:"frequencyCap,omitempty"`

	//
	// ID of the label being capped on the {@link AdUnit}. *
	//
	LabelId int64 `xml:"labelId,omitempty" json:"labelId,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RangeError struct {
	*ApiError

	Reason *RangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RegExError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RegExError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type Size struct {

	//
	// The width of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Width int32 `xml:"width,omitempty" json:"width,omitempty"`

	//
	// The height of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Height int32 `xml:"height,omitempty" json:"height,omitempty"`

	//
	// Whether this size represents an aspect ratio.
	//
	IsAspectRatio bool `xml:"isAspectRatio,omitempty" json:"isAspectRatio,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type TeamError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *TeamError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type _Value struct {
}

type InventoryServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates new {@link AdUnit} objects.
	*/
	CreateAdUnits(request *CreateAdUnits) (*CreateAdUnitsResponse, error)

	CreateAdUnitsContext(ctx context.Context, request *CreateAdUnits) (*CreateAdUnitsResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns a set of all relevant {@link AdUnitSize} objects.

	   <p>The given {@link Statement} is currently ignored but may be honored in future versions.
	*/
	GetAdUnitSizesByStatement(request *GetAdUnitSizesByStatement) (*GetAdUnitSizesByStatementResponse, error)

	GetAdUnitSizesByStatementContext(ctx context.Context, request *GetAdUnitSizesByStatement) (*GetAdUnitSizesByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link AdUnitPage} of {@link AdUnit} objects that satisfy the given {@link
	   Statement#query}. The following fields are supported for filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code adUnitCode}</td>
	   <td>{@link AdUnit#adUnitCode}</td>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link AdUnit#id}</td>
	   </tr>
	   <tr>
	   <td>{@code name}</td>
	   <td>{@link AdUnit#name}</td>
	   </tr>
	   <tr>
	   <td>{@code parentId}</td>
	   <td>{@link AdUnit#parentId}</td>
	   </tr>
	   <tr>
	   <td>{@code status}</td>
	   <td>{@link AdUnit#status}</td>
	   </tr>
	   <tr>
	   <td>{@code lastModifiedDateTime}</td>
	   <td>{@link AdUnit#lastModifiedDateTime}</td>
	   </tr>
	   </table>
	*/
	GetAdUnitsByStatement(request *GetAdUnitsByStatement) (*GetAdUnitsByStatementResponse, error)

	GetAdUnitsByStatementContext(ctx context.Context, request *GetAdUnitsByStatement) (*GetAdUnitsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs actions on {@link AdUnit} objects that match the given {@link Statement#query}.
	*/
	PerformAdUnitAction(request *PerformAdUnitAction) (*PerformAdUnitActionResponse, error)

	PerformAdUnitActionContext(ctx context.Context, request *PerformAdUnitAction) (*PerformAdUnitActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link AdUnit} objects.
	*/
	UpdateAdUnits(request *UpdateAdUnits) (*UpdateAdUnitsResponse, error)

	UpdateAdUnitsContext(ctx context.Context, request *UpdateAdUnits) (*UpdateAdUnitsResponse, error)
}

type inventoryServiceInterface struct {
	client *soap.Client
}

func NewInventoryServiceInterface(client *soap.Client) InventoryServiceInterface {
	return &inventoryServiceInterface{
		client: client,
	}
}

func (service *inventoryServiceInterface) CreateAdUnitsContext(ctx context.Context, request *CreateAdUnits) (*CreateAdUnitsResponse, error) {
	response := new(CreateAdUnitsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryServiceInterface) CreateAdUnits(request *CreateAdUnits) (*CreateAdUnitsResponse, error) {
	return service.CreateAdUnitsContext(
		context.Background(),
		request,
	)
}

func (service *inventoryServiceInterface) GetAdUnitSizesByStatementContext(ctx context.Context, request *GetAdUnitSizesByStatement) (*GetAdUnitSizesByStatementResponse, error) {
	response := new(GetAdUnitSizesByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryServiceInterface) GetAdUnitSizesByStatement(request *GetAdUnitSizesByStatement) (*GetAdUnitSizesByStatementResponse, error) {
	return service.GetAdUnitSizesByStatementContext(
		context.Background(),
		request,
	)
}

func (service *inventoryServiceInterface) GetAdUnitsByStatementContext(ctx context.Context, request *GetAdUnitsByStatement) (*GetAdUnitsByStatementResponse, error) {
	response := new(GetAdUnitsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryServiceInterface) GetAdUnitsByStatement(request *GetAdUnitsByStatement) (*GetAdUnitsByStatementResponse, error) {
	return service.GetAdUnitsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *inventoryServiceInterface) PerformAdUnitActionContext(ctx context.Context, request *PerformAdUnitAction) (*PerformAdUnitActionResponse, error) {
	response := new(PerformAdUnitActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryServiceInterface) PerformAdUnitAction(request *PerformAdUnitAction) (*PerformAdUnitActionResponse, error) {
	return service.PerformAdUnitActionContext(
		context.Background(),
		request,
	)
}

func (service *inventoryServiceInterface) UpdateAdUnitsContext(ctx context.Context, request *UpdateAdUnits) (*UpdateAdUnitsResponse, error) {
	response := new(UpdateAdUnitsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryServiceInterface) UpdateAdUnits(request *UpdateAdUnits) (*UpdateAdUnitsResponse, error) {
	return service.UpdateAdUnitsContext(
		context.Background(),
		request,
	)
}
