// Code generated by gowsdl DO NOT EDIT.

package creativeset

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type AssetError_Reason string

const (

	//
	// An asset name must be unique across advertiser.
	//
	AssetError_ReasonNON_UNIQUE_NAME AssetError_Reason = "NON_UNIQUE_NAME"

	//
	// The file name is too long.
	//
	AssetError_ReasonFILE_NAME_TOO_LONG AssetError_Reason = "FILE_NAME_TOO_LONG"

	//
	// The file size is too large.
	//
	AssetError_ReasonFILE_SIZE_TOO_LARGE AssetError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// Required client code is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT"

	//
	// Required height is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT"

	//
	// Required width is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH"

	//
	// Required format is not present in the mobile code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT"

	//
	// The parameter value in the code snippet is invalid.
	//
	AssetError_ReasonINVALID_CODE_SNIPPET_PARAMETER_VALUE AssetError_Reason = "INVALID_CODE_SNIPPET_PARAMETER_VALUE"

	//
	// Invalid asset Id.
	//
	AssetError_ReasonINVALID_ASSET_ID AssetError_Reason = "INVALID_ASSET_ID"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AssetError_ReasonUNKNOWN AssetError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeAssetMacroError_Reason string

const (

	//
	// Invalid macro name specified. Macro names must start with an alpha
	// character and consist only of alpha-numeric characters and underscores
	// and be between 1 and 64 characters.
	//
	CreativeAssetMacroError_ReasonINVALID_MACRO_NAME CreativeAssetMacroError_Reason = "INVALID_MACRO_NAME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeAssetMacroError_ReasonUNKNOWN CreativeAssetMacroError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeError_Reason string

const (

	//
	// {@link FlashRedirectCreative#flashUrl} and
	// {@link FlashRedirectCreative#fallbackUrl} are the same. The fallback URL
	// is used when the flash URL does not work and must be different from it.
	//
	CreativeError_ReasonFLASH_AND_FALLBACK_URL_ARE_SAME CreativeError_Reason = "FLASH_AND_FALLBACK_URL_ARE_SAME"

	//
	// The internal redirect URL was invalid. The URL must have the following
	// syntax http://ad.doubleclick.net/ad/sitename/;sz=size.
	//
	CreativeError_ReasonINVALID_INTERNAL_REDIRECT_URL CreativeError_Reason = "INVALID_INTERNAL_REDIRECT_URL"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} is required.
	//
	CreativeError_ReasonDESTINATION_URL_REQUIRED CreativeError_Reason = "DESTINATION_URL_REQUIRED"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} must be empty when its type is
	// {@link DestinationUrlType#NONE}.
	//
	CreativeError_ReasonDESTINATION_URL_NOT_EMPTY CreativeError_Reason = "DESTINATION_URL_NOT_EMPTY"

	//
	// The provided {@link DestinationUrlType} is not supported for the creative type it is
	// being used on.
	//
	CreativeError_ReasonDESTINATION_URL_TYPE_NOT_SUPPORTED CreativeError_Reason = "DESTINATION_URL_TYPE_NOT_SUPPORTED"

	//
	// Cannot create or update legacy DART For Publishers creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE"

	//
	// Cannot create or update legacy mobile creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE"

	//
	// The user is missing a necessary feature.
	//
	CreativeError_ReasonMISSING_FEATURE CreativeError_Reason = "MISSING_FEATURE"

	//
	// Company type should be one of Advertisers, House Advertisers and
	// Ad Networks.
	//
	CreativeError_ReasonINVALID_COMPANY_TYPE CreativeError_Reason = "INVALID_COMPANY_TYPE"

	//
	// Invalid size for AdSense dynamic allocation creative.
	// Only valid AFC sizes are allowed.
	//
	CreativeError_ReasonINVALID_ADSENSE_CREATIVE_SIZE CreativeError_Reason = "INVALID_ADSENSE_CREATIVE_SIZE"

	//
	// Invalid size for Ad Exchange dynamic allocation creative.
	// Only valid Ad Exchange sizes are allowed.
	//
	CreativeError_ReasonINVALID_AD_EXCHANGE_CREATIVE_SIZE CreativeError_Reason = "INVALID_AD_EXCHANGE_CREATIVE_SIZE"

	//
	// Assets associated with the same creative must be unique.
	//
	CreativeError_ReasonDUPLICATE_ASSET_IN_CREATIVE CreativeError_Reason = "DUPLICATE_ASSET_IN_CREATIVE"

	//
	// A creative asset cannot contain an asset ID and a byte array.
	//
	CreativeError_ReasonCREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY CreativeError_Reason = "CREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY"

	//
	// Cannot create or update unsupported creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE"

	//
	// Cannot create programmatic creatives.
	//
	CreativeError_ReasonCANNOT_CREATE_PROGRAMMATIC_CREATIVES CreativeError_Reason = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	//
	// A creative must have valid size to use the third-party impression tracker.
	//
	CreativeError_ReasonINVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER CreativeError_Reason = "INVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER"

	//
	// Ineligible creatives can not be deactivated.
	//
	CreativeError_ReasonCANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS CreativeError_Reason = "CANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS"

	//
	// Ad Manager hosted video creatives must contain a video asset.
	//
	CreativeError_ReasonHOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET CreativeError_Reason = "HOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET"

	//
	// {@link ImageCreative#thirdPartyImpressionTrackingUrls} should not contain more than one url.
	//
	CreativeError_ReasonCANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS CreativeError_Reason = "CANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeError_ReasonUNKNOWN CreativeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeSetError_Reason string

const (

	//
	// The 'video' feature is required but not enabled.
	//
	CreativeSetError_ReasonVIDEO_FEATURE_REQUIRED CreativeSetError_Reason = "VIDEO_FEATURE_REQUIRED"

	//
	// Video creatives (including overlays, VAST redirects, etc..) cannot be created
	// or updated through the API.
	//
	CreativeSetError_ReasonCANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES CreativeSetError_Reason = "CANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES"

	//
	// The 'roadblock' feature is required but not enabled.
	//
	CreativeSetError_ReasonROADBLOCK_FEATURE_REQUIRED CreativeSetError_Reason = "ROADBLOCK_FEATURE_REQUIRED"

	//
	// A master creative cannot be a companion creative in the same creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BE_COMPANION CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BE_COMPANION"

	//
	// Creatives in a creative set must be for the same advertiser.
	//
	CreativeSetError_ReasonINVALID_ADVERTISER CreativeSetError_Reason = "INVALID_ADVERTISER"

	//
	// Updating a master creative in a creative set is not allowed.
	//
	CreativeSetError_ReasonUPDATE_MASTER_CREATIVE_NOT_ALLOWED CreativeSetError_Reason = "UPDATE_MASTER_CREATIVE_NOT_ALLOWED"

	//
	// A master creative must belong to only one video creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS"

	//
	// The {@Code SkippableAdType} is not allowed.
	//
	CreativeSetError_ReasonSKIPPABLE_AD_TYPE_NOT_ALLOWED CreativeSetError_Reason = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeSetError_ReasonUNKNOWN CreativeSetError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateError_Reason string

const (

	//
	// The XML of the creative template definition is malformed and cannot be parsed.
	//
	CreativeTemplateError_ReasonCANNOT_PARSE_CREATIVE_TEMPLATE CreativeTemplateError_Reason = "CANNOT_PARSE_CREATIVE_TEMPLATE"

	//
	// A creative template has multiple variables with the same uniqueName.
	//
	CreativeTemplateError_ReasonVARIABLE_DUPLICATE_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_DUPLICATE_UNIQUE_NAME"

	//
	// The creative template contains a variable with invalid characters. Valid
	// characters are letters, numbers, spaces, forward slashes, dashes,
	// and underscores.
	//
	CreativeTemplateError_ReasonVARIABLE_INVALID_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_INVALID_UNIQUE_NAME"

	//
	// Multiple choices for a CreativeTemplateListStringVariable have the same value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_DUPLICATE_VALUE CreativeTemplateError_Reason = "LIST_CHOICE_DUPLICATE_VALUE"

	//
	// The choices for a CreativeTemplateListStringVariable do not contain the
	// default value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_NEEDS_DEFAULT CreativeTemplateError_Reason = "LIST_CHOICE_NEEDS_DEFAULT"

	//
	// There are no choices specified for the list variable.
	//
	CreativeTemplateError_ReasonLIST_CHOICES_EMPTY CreativeTemplateError_Reason = "LIST_CHOICES_EMPTY"

	//
	// No target platform is assigned to a creative template.
	//
	CreativeTemplateError_ReasonNO_TARGET_PLATFORMS CreativeTemplateError_Reason = "NO_TARGET_PLATFORMS"

	//
	// More than one target platform is assigned to a single creative template.
	//
	CreativeTemplateError_ReasonMULTIPLE_TARGET_PLATFORMS CreativeTemplateError_Reason = "MULTIPLE_TARGET_PLATFORMS"

	//
	// The formatter contains a placeholder which is not defined as a variable.
	//
	CreativeTemplateError_ReasonUNRECOGNIZED_PLACEHOLDER CreativeTemplateError_Reason = "UNRECOGNIZED_PLACEHOLDER"

	//
	// There are variables defined which are not being used in the formatter.
	//
	CreativeTemplateError_ReasonPLACEHOLDERS_NOT_IN_FORMATTER CreativeTemplateError_Reason = "PLACEHOLDERS_NOT_IN_FORMATTER"

	//
	// The creative template is interstitial, but the formatter doesn't contain
	// an interstitial macro.
	//
	CreativeTemplateError_ReasonMISSING_INTERSTITIAL_MACRO CreativeTemplateError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateError_ReasonUNKNOWN CreativeTemplateError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateOperationError_Reason string

const (

	//
	// The current user is not allowed to modify this creative template.
	//
	CreativeTemplateOperationError_ReasonNOT_ALLOWED CreativeTemplateOperationError_Reason = "NOT_ALLOWED"

	//
	// The operation is not applicable to the current state.
	// (e.g. Trying to activate an active creative template)
	//
	CreativeTemplateOperationError_ReasonNOT_APPLICABLE CreativeTemplateOperationError_Reason = "NOT_APPLICABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateOperationError_ReasonUNKNOWN CreativeTemplateOperationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomCreativeError_Reason string

const (

	//
	// Macros associated with a single custom creative must have unique names.
	//
	CustomCreativeError_ReasonDUPLICATE_MACRO_NAME_FOR_CREATIVE CustomCreativeError_Reason = "DUPLICATE_MACRO_NAME_FOR_CREATIVE"

	//
	// The file macro referenced in the snippet does not exist.
	//
	CustomCreativeError_ReasonSNIPPET_REFERENCES_MISSING_MACRO CustomCreativeError_Reason = "SNIPPET_REFERENCES_MISSING_MACRO"

	//
	// The macro referenced in the snippet is not valid.
	//
	CustomCreativeError_ReasonUNRECOGNIZED_MACRO CustomCreativeError_Reason = "UNRECOGNIZED_MACRO"

	//
	// Custom creatives are not allowed in this context.
	//
	CustomCreativeError_ReasonCUSTOM_CREATIVE_NOT_ALLOWED CustomCreativeError_Reason = "CUSTOM_CREATIVE_NOT_ALLOWED"

	//
	// The custom creative is an interstitial, but the snippet is missing an
	// interstitial macro.
	//
	CustomCreativeError_ReasonMISSING_INTERSTITIAL_MACRO CustomCreativeError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// Macros associated with the same custom creative cannot share the same
	// asset.
	//
	CustomCreativeError_ReasonDUPLICATE_ASSET_IN_MACROS CustomCreativeError_Reason = "DUPLICATE_ASSET_IN_MACROS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomCreativeError_ReasonUNKNOWN CustomCreativeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomFieldValueError_Reason string

const (

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_NOT_FOUND"

	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_INACTIVE CustomFieldValueError_Reason = "CUSTOM_FIELD_INACTIVE"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_OPTION_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueError_ReasonINVALID_ENTITY_TYPE CustomFieldValueError_Reason = "INVALID_ENTITY_TYPE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueError_ReasonUNKNOWN CustomFieldValueError_Reason = "UNKNOWN"
)

//
// The reasons for the entity limit reached error.
//

type EntityLimitReachedError_Reason string

const (

	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_LIMIT_REACHED EntityLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonAD_EXCLUSION_RULES_LIMIT_REACHED EntityLimitReachedError_Reason = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonPLACEMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "PLACEMENTS_LIMIT_REACHED"

	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonLINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_LINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonDAI_ENCODING_PROFILES_LIMIT_REACHED EntityLimitReachedError_Reason = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonTRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFORECAST_ADJUSTMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_EXPERIMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonSITES_LIMIT_REACHED EntityLimitReachedError_Reason = "SITES_LIMIT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedError_ReasonUNKNOWN EntityLimitReachedError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type FileError_Reason string

const (

	//
	// The provided byte array is empty.
	//
	FileError_ReasonMISSING_CONTENTS FileError_Reason = "MISSING_CONTENTS"

	//
	// The provided file is larger than the maximum size defined for the
	// network.
	//
	FileError_ReasonSIZE_TOO_LARGE FileError_Reason = "SIZE_TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FileError_ReasonUNKNOWN FileError_Reason = "UNKNOWN"
)

//
// Error reasons that may arise during HTML5 bundle processing.
//

type HtmlBundleProcessorError_Reason string

const (

	//
	// Cannot extract files from HTML5 bundle.
	//
	HtmlBundleProcessorError_ReasonCANNOT_EXTRACT_FILES_FROM_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_EXTRACT_FILES_FROM_BUNDLE"

	//
	// Bundle cannot have hard-coded click tag url(s).
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_HARD_CODED HtmlBundleProcessorError_Reason = "CLICK_TAG_HARD_CODED"

	//
	// Bundles created using GWD (Google Web Designer) cannot have click tags. GWD-published
	// bundles should use exit events instead of defining var {@code clickTAG}.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_IN_GWD_UNUPPORTED HtmlBundleProcessorError_Reason = "CLICK_TAG_IN_GWD_UNUPPORTED"

	//
	// Click tag detected outside of primary HTML file.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_NOT_IN_PRIMARY_HTML HtmlBundleProcessorError_Reason = "CLICK_TAG_NOT_IN_PRIMARY_HTML"

	//
	// Click tag or exit function has invalid name or url.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_INVALID HtmlBundleProcessorError_Reason = "CLICK_TAG_INVALID"

	//
	// HTML5 bundle or total size of extracted files cannot be more than 1000 KB.
	//
	HtmlBundleProcessorError_ReasonFILE_SIZE_TOO_LARGE HtmlBundleProcessorError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// HTML5 bundle cannot have more than 50 files.
	//
	HtmlBundleProcessorError_ReasonFILES_TOO_MANY HtmlBundleProcessorError_Reason = "FILES_TOO_MANY"

	//
	// Flash files in HTML5 bundles are not supported. Any file with a .swf or .flv extension
	// causes this error.
	//
	HtmlBundleProcessorError_ReasonFLASH_UNSUPPORTED HtmlBundleProcessorError_Reason = "FLASH_UNSUPPORTED"

	//
	// The HTML5 bundle contains unsupported GWD component(s).
	//
	HtmlBundleProcessorError_ReasonGWD_COMPONENTS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_COMPONENTS_UNSUPPORTED"

	//
	// The HTML5 bundle contains Unsupported GWD Enabler method(s).
	//
	HtmlBundleProcessorError_ReasonGWD_ENABLER_METHODS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_ENABLER_METHODS_UNSUPPORTED"

	//
	// GWD properties are invalid.
	//
	HtmlBundleProcessorError_ReasonGWD_PROPERTIES_INVALID HtmlBundleProcessorError_Reason = "GWD_PROPERTIES_INVALID"

	//
	// The HTML5 bundle contains broken relative file reference(s).
	//
	HtmlBundleProcessorError_ReasonLINKED_FILES_NOT_FOUND HtmlBundleProcessorError_Reason = "LINKED_FILES_NOT_FOUND"

	//
	// No primary HTML file detected.
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_MISSING HtmlBundleProcessorError_Reason = "PRIMARY_HTML_MISSING"

	//
	// Multiple HTML files are detected. One of them should be named as {@code index.html}
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_UNDETERMINED HtmlBundleProcessorError_Reason = "PRIMARY_HTML_UNDETERMINED"

	//
	// An SVG block could not be parsed.
	//
	HtmlBundleProcessorError_ReasonSVG_BLOCK_INVALID HtmlBundleProcessorError_Reason = "SVG_BLOCK_INVALID"

	//
	// The HTML5 bundle cannot be decoded.
	//
	HtmlBundleProcessorError_ReasonCANNOT_DECODE_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_DECODE_BUNDLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	HtmlBundleProcessorError_ReasonUNKNOWN HtmlBundleProcessorError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ImageError_Reason string

const (

	//
	// The file's format is invalid.
	//
	ImageError_ReasonINVALID_IMAGE ImageError_Reason = "INVALID_IMAGE"

	//
	// {@link Size#width} and {@link Size#height} cannot be negative.
	//
	ImageError_ReasonINVALID_SIZE ImageError_Reason = "INVALID_SIZE"

	//
	// The actual image size does not match the expected image size.
	//
	ImageError_ReasonUNEXPECTED_SIZE ImageError_Reason = "UNEXPECTED_SIZE"

	//
	// The size of the asset is larger than that of the overlay creative.
	//
	ImageError_ReasonOVERLAY_SIZE_TOO_LARGE ImageError_Reason = "OVERLAY_SIZE_TOO_LARGE"

	//
	// Animated images are not allowed.
	//
	ImageError_ReasonANIMATED_NOT_ALLOWED ImageError_Reason = "ANIMATED_NOT_ALLOWED"

	//
	// Animation length exceeded the allowed policy limit.
	//
	ImageError_ReasonANIMATION_TOO_LONG ImageError_Reason = "ANIMATION_TOO_LONG"

	//
	// Images in CMYK color formats are not allowed.
	//
	ImageError_ReasonCMYK_JPEG_NOT_ALLOWED ImageError_Reason = "CMYK_JPEG_NOT_ALLOWED"

	//
	// Flash files are not allowed.
	//
	ImageError_ReasonFLASH_NOT_ALLOWED ImageError_Reason = "FLASH_NOT_ALLOWED"

	//
	// If {@link FlashCreative#clickTagRequired} is {@code true}, then the flash
	// file is required to have a click tag embedded in it.
	//
	ImageError_ReasonFLASH_WITHOUT_CLICKTAG ImageError_Reason = "FLASH_WITHOUT_CLICKTAG"

	//
	// Animated visual effect is not allowed.
	//
	ImageError_ReasonANIMATED_VISUAL_EFFECT ImageError_Reason = "ANIMATED_VISUAL_EFFECT"

	//
	// An error was encountered in the flash file.
	//
	ImageError_ReasonFLASH_ERROR ImageError_Reason = "FLASH_ERROR"

	//
	// Incorrect image layout.
	//
	ImageError_ReasonLAYOUT_PROBLEM ImageError_Reason = "LAYOUT_PROBLEM"

	//
	// Flash files with network objects are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_OBJECTS ImageError_Reason = "FLASH_HAS_NETWORK_OBJECTS"

	//
	// Flash files with network methods are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_METHODS ImageError_Reason = "FLASH_HAS_NETWORK_METHODS"

	//
	// Flash files with hard-coded click thru URLs are not allowed.
	//
	ImageError_ReasonFLASH_HAS_URL ImageError_Reason = "FLASH_HAS_URL"

	//
	// Flash files with mouse tracking are not allowed.
	//
	ImageError_ReasonFLASH_HAS_MOUSE_TRACKING ImageError_Reason = "FLASH_HAS_MOUSE_TRACKING"

	//
	// Flash files that generate or use random numbers are not allowed.
	//
	ImageError_ReasonFLASH_HAS_RANDOM_NUM ImageError_Reason = "FLASH_HAS_RANDOM_NUM"

	//
	// Flash files with self targets are not allowed.
	//
	ImageError_ReasonFLASH_SELF_TARGETS ImageError_Reason = "FLASH_SELF_TARGETS"

	//
	// Flash file contains a bad geturl target.
	//
	ImageError_ReasonFLASH_BAD_GETURL_TARGET ImageError_Reason = "FLASH_BAD_GETURL_TARGET"

	//
	// Flash or ActionScript version in the submitted file is not supported.
	//
	ImageError_ReasonFLASH_VERSION_NOT_SUPPORTED ImageError_Reason = "FLASH_VERSION_NOT_SUPPORTED"

	//
	// The uploaded file is too large.
	//
	ImageError_ReasonFILE_TOO_LARGE ImageError_Reason = "FILE_TOO_LARGE"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_IRS ImageError_Reason = "SYSTEM_ERROR_IRS"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_SCS ImageError_Reason = "SYSTEM_ERROR_SCS"

	//
	// The image density for a primary asset was not one of the expected image densities.
	//
	ImageError_ReasonUNEXPECTED_PRIMARY_ASSET_DENSITY ImageError_Reason = "UNEXPECTED_PRIMARY_ASSET_DENSITY"

	//
	// Two or more assets have the same image density.
	//
	ImageError_ReasonDUPLICATE_ASSET_DENSITY ImageError_Reason = "DUPLICATE_ASSET_DENSITY"

	//
	// The creative does not contain a primary asset. (For high-density creatives, the primary
	// asset must be a standard image file with 1x density.)
	//
	ImageError_ReasonMISSING_DEFAULT_ASSET ImageError_Reason = "MISSING_DEFAULT_ASSET"

	//
	// preverified_mime_type is not in the client spec's allowlist.
	//
	ImageError_ReasonPREVERIFIED_MIMETYPE_NOT_ALLOWED ImageError_Reason = "PREVERIFIED_MIMETYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageError_ReasonUNKNOWN ImageError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type InvalidPhoneNumberError_Reason string

const (

	//
	// The phone number is invalid.
	//
	InvalidPhoneNumberError_ReasonINVALID_FORMAT InvalidPhoneNumberError_Reason = "INVALID_FORMAT"

	//
	// The phone number is too short.
	//
	InvalidPhoneNumberError_ReasonTOO_SHORT InvalidPhoneNumberError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidPhoneNumberError_ReasonUNKNOWN InvalidPhoneNumberError_Reason = "UNKNOWN"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LabelEntityAssociationError_Reason string

const (

	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION"

	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationError_ReasonINVALID_ASSOCIATION LabelEntityAssociationError_Reason = "INVALID_ASSOCIATION"

	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationError_ReasonNEGATION_NOT_ALLOWED LabelEntityAssociationError_Reason = "NEGATION_NOT_ALLOWED"

	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION_WITH_NEGATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationError_ReasonUNKNOWN LabelEntityAssociationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the validation error.
//

type NullError_Reason string

const (

	//
	// Specified list/container must not contain any null elements
	//
	NullError_ReasonNULL_CONTENT NullError_Reason = "NULL_CONTENT"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RangeError_Reason string

const (
	RangeError_ReasonTOO_HIGH RangeError_Reason = "TOO_HIGH"

	RangeError_ReasonTOO_LOW RangeError_Reason = "TOO_LOW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeError_ReasonUNKNOWN RangeError_Reason = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

type RequiredSizeError_Reason string

const (

	//
	// {@link Creative#size} or {@link LineItem#creativePlaceholders} size is
	// missing.
	//
	RequiredSizeError_ReasonREQUIRED RequiredSizeError_Reason = "REQUIRED"

	//
	// {@link LineItemCreativeAssociation#sizes} must be a subset of
	// {@link LineItem#creativePlaceholders} sizes.
	//
	RequiredSizeError_ReasonNOT_ALLOWED RequiredSizeError_Reason = "NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredSizeError_ReasonUNKNOWN RequiredSizeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RichMediaStudioCreativeError_Reason string

const (

	//
	// Only Studio can create a {@code RichMediaStudioCreative}.
	//
	RichMediaStudioCreativeError_ReasonCREATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "CREATION_NOT_ALLOWED"

	//
	// Unknown error
	//
	RichMediaStudioCreativeError_ReasonUKNOWN_ERROR RichMediaStudioCreativeError_Reason = "UKNOWN_ERROR"

	//
	// Invalid request indicating missing/invalid request parameters.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CODE_GENERATION_REQUEST RichMediaStudioCreativeError_Reason = "INVALID_CODE_GENERATION_REQUEST"

	//
	// Invalid creative object.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CREATIVE_OBJECT RichMediaStudioCreativeError_Reason = "INVALID_CREATIVE_OBJECT"

	//
	// Unable to connect to Rich Media Studio to save the creative. Please try again later.
	//
	RichMediaStudioCreativeError_ReasonSTUDIO_CONNECTION_ERROR RichMediaStudioCreativeError_Reason = "STUDIO_CONNECTION_ERROR"

	//
	// The push down duration is not allowed
	//
	RichMediaStudioCreativeError_ReasonPUSHDOWN_DURATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "PUSHDOWN_DURATION_NOT_ALLOWED"

	//
	// The position is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_POSITION RichMediaStudioCreativeError_Reason = "INVALID_POSITION"

	//
	// The Z-index is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_Z_INDEX RichMediaStudioCreativeError_Reason = "INVALID_Z_INDEX"

	//
	// The push-down duration is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_PUSHDOWN_DURATION RichMediaStudioCreativeError_Reason = "INVALID_PUSHDOWN_DURATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RichMediaStudioCreativeError_ReasonUNKNOWN RichMediaStudioCreativeError_Reason = "UNKNOWN"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// Error reasons for set-top box creatives.
//

type SetTopBoxCreativeError_Reason string

const (

	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_IMMUTABLE"

	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_REQUIRED SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_REQUIRED"

	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonPROVIDER_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "PROVIDER_ID_IMMUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeError_ReasonUNKNOWN SetTopBoxCreativeError_Reason = "UNKNOWN"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// Error reason for {@link SwiffyConversionError}.
//

type SwiffyConversionError_Reason string

const (

	//
	// Indicates the Swiffy service has an internal error that prevents the flash
	// asset being converted.
	//
	SwiffyConversionError_ReasonSERVER_ERROR SwiffyConversionError_Reason = "SERVER_ERROR"

	//
	// Indicates the uploaded flash asset is not a valid flash file.
	//
	SwiffyConversionError_ReasonINVALID_FLASH_FILE SwiffyConversionError_Reason = "INVALID_FLASH_FILE"

	//
	// Indicates the Swiffy service currently does not support converting this
	// flash asset.
	//
	SwiffyConversionError_ReasonUNSUPPORTED_FLASH SwiffyConversionError_Reason = "UNSUPPORTED_FLASH"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SwiffyConversionError_ReasonUNKNOWN SwiffyConversionError_Reason = "UNKNOWN"
)

//
// The reason for the error
//

type TemplateInstantiatedCreativeError_Reason string

const (

	//
	// A new creative cannot be created from an inactive creative template.
	//
	TemplateInstantiatedCreativeError_ReasonINACTIVE_CREATIVE_TEMPLATE TemplateInstantiatedCreativeError_Reason = "INACTIVE_CREATIVE_TEMPLATE"

	//
	// An uploaded file type is not allowed
	//
	TemplateInstantiatedCreativeError_ReasonFILE_TYPE_NOT_ALLOWED TemplateInstantiatedCreativeError_Reason = "FILE_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TemplateInstantiatedCreativeError_ReasonUNKNOWN TemplateInstantiatedCreativeError_Reason = "UNKNOWN"
)

//
// The type of transcode request rejection.
//

type TranscodingError_Reason string

const (

	//
	// The request to copy the creative(s) was rejected because the source is not transcoded.
	//
	TranscodingError_ReasonCANNOT_COPY_CREATIVE_PENDING_TRANSCODE TranscodingError_Reason = "CANNOT_COPY_CREATIVE_PENDING_TRANSCODE"

	//
	// The request to copy the creative(s) was rejected because the source is invalid.
	//
	TranscodingError_ReasonCANNOT_COPY_INVALID_CREATIVE TranscodingError_Reason = "CANNOT_COPY_INVALID_CREATIVE"

	//
	// The creative is still being transcoded or processed. Please try again later.
	//
	TranscodingError_ReasonTRANSCODING_IS_IN_PROGRESS TranscodingError_Reason = "TRANSCODING_IS_IN_PROGRESS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TranscodingError_ReasonUNKNOWN TranscodingError_Reason = "UNKNOWN"
)

type CreateCreativeSet struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCreativeSet"`

	CreativeSet *CreativeSet `xml:"creativeSet,omitempty" json:"creativeSet,omitempty"`
}

type CreateCreativeSetResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCreativeSetResponse"`

	Rval *CreativeSet `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetCreativeSetsByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCreativeSetsByStatement"`

	Statement *Statement `xml:"statement,omitempty" json:"statement,omitempty"`
}

type GetCreativeSetsByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCreativeSetsByStatementResponse"`

	Rval *CreativeSetPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateCreativeSet struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCreativeSet"`

	CreativeSet *CreativeSet `xml:"creativeSet,omitempty" json:"creativeSet,omitempty"`
}

type UpdateCreativeSetResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCreativeSetResponse"`

	Rval *CreativeSet `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type ObjectValue struct {
	*_Value
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AssetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AssetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeAssetMacroError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeAssetMacroError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeSet struct {

	//
	// Uniquely identifies the {@code CreativeSet}. This attribute is read-only and is assigned by
	// Google when a creative set is created.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The name of the creative set. This attribute is required and has a maximum length of 255
	// characters.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// The ID of the master creative associated with this creative set. This attribute is required.
	//
	MasterCreativeId int64 `xml:"masterCreativeId,omitempty" json:"masterCreativeId,omitempty"`

	//
	// The IDs of the companion creatives associated with this creative set. This attribute is
	// required.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// The date and time this creative set was last modified.
	//
	LastModifiedDateTime soap.XSDDateTime `xml:"lastModifiedDateTime,omitempty" json:"lastModifiedDateTime,omitempty"`
}

type CreativeSetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeSetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeSetPage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of creative sets contained within this page.
	//
	Results []*CreativeSet `xml:"results,omitempty" json:"results,omitempty"`
}

type CreativeTemplateError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTemplateOperationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateOperationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomFieldValueError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomFieldValueError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type EntityLimitReachedError struct {
	*ApiError

	Reason *EntityLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type FileError struct {
	*ApiError

	Reason *FileError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type HtmlBundleProcessorError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *HtmlBundleProcessorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ImageError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ImageError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidPhoneNumberError struct {
	*ApiError

	Reason *InvalidPhoneNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelEntityAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LabelEntityAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RangeError struct {
	*ApiError

	Reason *RangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredSizeError struct {
	*ApiError

	Reason *RequiredSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RichMediaStudioCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RichMediaStudioCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetTopBoxCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *SetTopBoxCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type SwiffyConversionError struct {
	*ApiError

	Reason *SwiffyConversionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TemplateInstantiatedCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *TemplateInstantiatedCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TranscodingError struct {
	*ApiError

	Reason *TranscodingError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type _Value struct {
}

type CreativeSetServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates a new {@link CreativeSet}.
	*/
	CreateCreativeSet(request *CreateCreativeSet) (*CreateCreativeSetResponse, error)

	CreateCreativeSetContext(ctx context.Context, request *CreateCreativeSet) (*CreateCreativeSetResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link CreativeSetPage} of {@link CreativeSet} objects that satisfy the given {@link
	   Statement#query}. The following fields are supported for filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link CreativeSet#id}</td>
	   </tr>
	   <tr>
	   <td>{@code name}</td>
	   <td>{@link CreativeSet#name}</td>
	   </tr>
	   <tr>
	   <td>{@code masterCreativeId}</td>
	   <td>{@link CreativeSet#masterCreativeId}</td>
	   </tr>
	   <tr>
	   <td>{@code lastModifiedDateTime}</td>
	   <td>{@link CreativeSet#lastModifiedDateTime}</td>
	   </tr>
	   </table>
	*/
	GetCreativeSetsByStatement(request *GetCreativeSetsByStatement) (*GetCreativeSetsByStatementResponse, error)

	GetCreativeSetsByStatementContext(ctx context.Context, request *GetCreativeSetsByStatement) (*GetCreativeSetsByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link CreativeSet}.
	*/
	UpdateCreativeSet(request *UpdateCreativeSet) (*UpdateCreativeSetResponse, error)

	UpdateCreativeSetContext(ctx context.Context, request *UpdateCreativeSet) (*UpdateCreativeSetResponse, error)
}

type creativeSetServiceInterface struct {
	client *soap.Client
}

func NewCreativeSetServiceInterface(client *soap.Client) CreativeSetServiceInterface {
	return &creativeSetServiceInterface{
		client: client,
	}
}

func (service *creativeSetServiceInterface) CreateCreativeSetContext(ctx context.Context, request *CreateCreativeSet) (*CreateCreativeSetResponse, error) {
	response := new(CreateCreativeSetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeSetServiceInterface) CreateCreativeSet(request *CreateCreativeSet) (*CreateCreativeSetResponse, error) {
	return service.CreateCreativeSetContext(
		context.Background(),
		request,
	)
}

func (service *creativeSetServiceInterface) GetCreativeSetsByStatementContext(ctx context.Context, request *GetCreativeSetsByStatement) (*GetCreativeSetsByStatementResponse, error) {
	response := new(GetCreativeSetsByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeSetServiceInterface) GetCreativeSetsByStatement(request *GetCreativeSetsByStatement) (*GetCreativeSetsByStatementResponse, error) {
	return service.GetCreativeSetsByStatementContext(
		context.Background(),
		request,
	)
}

func (service *creativeSetServiceInterface) UpdateCreativeSetContext(ctx context.Context, request *UpdateCreativeSet) (*UpdateCreativeSetResponse, error) {
	response := new(UpdateCreativeSetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeSetServiceInterface) UpdateCreativeSet(request *UpdateCreativeSet) (*UpdateCreativeSetResponse, error) {
	return service.UpdateCreativeSetContext(
		context.Background(),
		request,
	)
}
