// Code generated by gowsdl DO NOT EDIT.

package creative

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
// The registry that an ad ID belongs to.
//

type AdIdType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AdIdTypeUNKNOWN AdIdType = "UNKNOWN"

	//
	// The ad ID is registered with ad-id.org.
	//
	AdIdTypeAD_ID AdIdType = "AD_ID"

	//
	// The ad ID is registered with clearcast.co.uk.
	//
	AdIdTypeCLEARCAST AdIdType = "CLEARCAST"

	//
	// The creative does not have an ad ID outside of Ad Manager.
	//
	AdIdTypeNONE AdIdType = "NONE"
)

type ApiVersionError_Reason string

const (

	//
	// Indicates that the operation is not allowed in the version the request
	// was made in.
	//
	ApiVersionError_ReasonUPDATE_TO_NEWER_VERSION ApiVersionError_Reason = "UPDATE_TO_NEWER_VERSION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ApiVersionError_ReasonUNKNOWN ApiVersionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type AssetError_Reason string

const (

	//
	// An asset name must be unique across advertiser.
	//
	AssetError_ReasonNON_UNIQUE_NAME AssetError_Reason = "NON_UNIQUE_NAME"

	//
	// The file name is too long.
	//
	AssetError_ReasonFILE_NAME_TOO_LONG AssetError_Reason = "FILE_NAME_TOO_LONG"

	//
	// The file size is too large.
	//
	AssetError_ReasonFILE_SIZE_TOO_LARGE AssetError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// Required client code is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_CLIENT"

	//
	// Required height is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_HEIGHT"

	//
	// Required width is not present in the code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_WIDTH"

	//
	// Required format is not present in the mobile code snippet.
	//
	AssetError_ReasonMISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT AssetError_Reason = "MISSING_REQUIRED_DYNAMIC_ALLOCATION_FORMAT"

	//
	// The parameter value in the code snippet is invalid.
	//
	AssetError_ReasonINVALID_CODE_SNIPPET_PARAMETER_VALUE AssetError_Reason = "INVALID_CODE_SNIPPET_PARAMETER_VALUE"

	//
	// Invalid asset Id.
	//
	AssetError_ReasonINVALID_ASSET_ID AssetError_Reason = "INVALID_ASSET_ID"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AssetError_ReasonUNKNOWN AssetError_Reason = "UNKNOWN"
)

type AuthenticationError_Reason string

const (

	//
	// The SOAP message contains a request header with an ambiguous definition of the authentication
	// header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
	// both null or both were specified. Exactly one value should be specified with each request.
	//
	AuthenticationError_ReasonAMBIGUOUS_SOAP_REQUEST_HEADER AuthenticationError_Reason = "AMBIGUOUS_SOAP_REQUEST_HEADER"

	//
	// The login provided is invalid.
	//
	AuthenticationError_ReasonINVALID_EMAIL AuthenticationError_Reason = "INVALID_EMAIL"

	//
	// Tried to authenticate with provided information, but failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// The OAuth provided is invalid.
	//
	AuthenticationError_ReasonINVALID_OAUTH_SIGNATURE AuthenticationError_Reason = "INVALID_OAUTH_SIGNATURE"

	//
	// The specified service to use was not recognized.
	//
	AuthenticationError_ReasonINVALID_SERVICE AuthenticationError_Reason = "INVALID_SERVICE"

	//
	// The SOAP message is missing a request header with an {@code authToken} and optional {@code
	// networkCode}.
	//
	AuthenticationError_ReasonMISSING_SOAP_REQUEST_HEADER AuthenticationError_Reason = "MISSING_SOAP_REQUEST_HEADER"

	//
	// The HTTP request is missing a request header with an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION_HTTP_HEADER AuthenticationError_Reason = "MISSING_AUTHENTICATION_HTTP_HEADER"

	//
	// The request is missing an {@code authToken}
	//
	AuthenticationError_ReasonMISSING_AUTHENTICATION AuthenticationError_Reason = "MISSING_AUTHENTICATION"

	//
	// The network does not have API access enabled.
	//
	AuthenticationError_ReasonNETWORK_API_ACCESS_DISABLED AuthenticationError_Reason = "NETWORK_API_ACCESS_DISABLED"

	//
	// The user is not associated with any network.
	//
	AuthenticationError_ReasonNO_NETWORKS_TO_ACCESS AuthenticationError_Reason = "NO_NETWORKS_TO_ACCESS"

	//
	// No network for the given {@code networkCode} was found.
	//
	AuthenticationError_ReasonNETWORK_NOT_FOUND AuthenticationError_Reason = "NETWORK_NOT_FOUND"

	//
	// The user has access to more than one network, but did not provide a {@code networkCode}.
	//
	AuthenticationError_ReasonNETWORK_CODE_REQUIRED AuthenticationError_Reason = "NETWORK_CODE_REQUIRED"

	//
	// An error happened on the server side during connection to authentication service.
	//
	AuthenticationError_ReasonCONNECTION_ERROR AuthenticationError_Reason = "CONNECTION_ERROR"

	//
	// The user tried to create a test network using an account that already is associated with a
	// network.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK AuthenticationError_Reason = "GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"

	//
	// The account is blocked and under investigation by the collections team. Please contact Google
	// for more information.
	//
	AuthenticationError_ReasonUNDER_INVESTIGATION AuthenticationError_Reason = "UNDER_INVESTIGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	AuthenticationError_ReasonUNKNOWN AuthenticationError_Reason = "UNKNOWN"
)

type CollectionSizeError_Reason string

const (
	CollectionSizeError_ReasonTOO_LARGE CollectionSizeError_Reason = "TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CollectionSizeError_ReasonUNKNOWN CollectionSizeError_Reason = "UNKNOWN"
)

//
// Describes reasons for common errors
//

type CommonError_Reason string

const (

	//
	// Indicates that an attempt was made to retrieve an entity that does not
	// exist.
	//
	CommonError_ReasonNOT_FOUND CommonError_Reason = "NOT_FOUND"

	//
	// Indicates that an attempt was made to create an entity that already
	// exists.
	//
	CommonError_ReasonALREADY_EXISTS CommonError_Reason = "ALREADY_EXISTS"

	//
	// Indicates that a value is not applicable for given use case.
	//
	CommonError_ReasonNOT_APPLICABLE CommonError_Reason = "NOT_APPLICABLE"

	//
	// Indicates that two elements in the collection were identical.
	//
	CommonError_ReasonDUPLICATE_OBJECT CommonError_Reason = "DUPLICATE_OBJECT"

	//
	// Indicates that an attempt was made to change an immutable field.
	//
	CommonError_ReasonCANNOT_UPDATE CommonError_Reason = "CANNOT_UPDATE"

	//
	// Indicates that the requested operation is not supported.
	//
	CommonError_ReasonUNSUPPORTED_OPERATION CommonError_Reason = "UNSUPPORTED_OPERATION"

	//
	// Indicates that another request attempted to update the same data in the same network
	// at about the same time. Please wait and try the request again.
	//
	CommonError_ReasonCONCURRENT_MODIFICATION CommonError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CommonError_ReasonUNKNOWN CommonError_Reason = "UNKNOWN"
)

//
// All possible tracking event types.  Not all events are supported by every
// kind of creative.
//

type ConversionEvent string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ConversionEventUNKNOWN ConversionEvent = "UNKNOWN"

	//
	// Corresponds to the {@code creativeView} tracking event.
	//
	ConversionEventCREATIVE_VIEW ConversionEvent = "CREATIVE_VIEW"

	//
	// Corresponds to the {@code start} tracking event.
	//
	ConversionEventSTART ConversionEvent = "START"

	//
	// An event that is fired when a video skip button is shown,
	// usually after 5 seconds of viewing the video.
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventSKIP_SHOWN ConversionEvent = "SKIP_SHOWN"

	//
	// Corresponds to the {@code firstQuartile} tracking event.
	//
	ConversionEventFIRST_QUARTILE ConversionEvent = "FIRST_QUARTILE"

	//
	// Corresponds to the {@code midpoint} tracking event.
	//
	ConversionEventMIDPOINT ConversionEvent = "MIDPOINT"

	//
	// Corresponds to the {@code thirdQuartile} tracking event.
	//
	ConversionEventTHIRD_QUARTILE ConversionEvent = "THIRD_QUARTILE"

	//
	// An event that is fired after 30 seconds of viewing the video
	// or when the video finished (if the video duration is less than 30 seconds).
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventENGAGED_VIEW ConversionEvent = "ENGAGED_VIEW"

	//
	// Corresponds to the {@code complete} tracking event.
	//
	ConversionEventCOMPLETE ConversionEvent = "COMPLETE"

	//
	// Corresponds to the {@code mute} tracking event.
	//
	ConversionEventMUTE ConversionEvent = "MUTE"

	//
	// Corresponds to the {@code unmute} tracking event.
	//
	ConversionEventUNMUTE ConversionEvent = "UNMUTE"

	//
	// Corresponds to the {@code pause} tracking event.
	//
	ConversionEventPAUSE ConversionEvent = "PAUSE"

	//
	// Corresponds to the {@code rewind} tracking event.
	//
	ConversionEventREWIND ConversionEvent = "REWIND"

	//
	// Corresponds to the {@code resume} tracking event.
	//
	ConversionEventRESUME ConversionEvent = "RESUME"

	//
	// An event that is fired when a video was skipped.
	// This event does not correspond to any VAST element and is implemented using an extension.
	//
	ConversionEventSKIPPED ConversionEvent = "SKIPPED"

	//
	// Corresponds to the {@code fullscreen} tracking event.
	//
	ConversionEventFULLSCREEN ConversionEvent = "FULLSCREEN"

	//
	// Corresponds to the {@code expand} tracking event.
	//
	ConversionEventEXPAND ConversionEvent = "EXPAND"

	//
	// Corresponds to the {@code collapse} tracking event.
	//
	ConversionEventCOLLAPSE ConversionEvent = "COLLAPSE"

	//
	// Corresponds to the {@code acceptInvitation} tracking event.
	//
	ConversionEventACCEPT_INVITATION ConversionEvent = "ACCEPT_INVITATION"

	//
	// Corresponds to the {@code close} tracking event.
	//
	ConversionEventCLOSE ConversionEvent = "CLOSE"

	//
	// Corresponds to the {@code Linear.VideoClicks.ClickTracking} node.
	//
	ConversionEventCLICK_TRACKING ConversionEvent = "CLICK_TRACKING"

	//
	// Corresponds to the {@code InLine.Survey} node.
	//
	ConversionEventSURVEY ConversionEvent = "SURVEY"

	//
	// Corresponds to the {@code Linear.VideoClicks.CustomClick} node.
	//
	ConversionEventCUSTOM_CLICK ConversionEvent = "CUSTOM_CLICK"

	//
	// Corresponds to the {@code measurableImpression} tracking event.
	//
	ConversionEventMEASURABLE_IMPRESSION ConversionEvent = "MEASURABLE_IMPRESSION"

	//
	// Corresponds to the {@code viewableImpression} tracking event.
	//
	ConversionEventVIEWABLE_IMPRESSION ConversionEvent = "VIEWABLE_IMPRESSION"

	//
	// Corresponds to the {@code abandon} tracking event.
	//
	ConversionEventVIDEO_ABANDON ConversionEvent = "VIDEO_ABANDON"

	//
	// Corresponds to the {@code fullyViewableAudibleHalfDurationImpression} tracking event.
	//
	ConversionEventFULLY_VIEWABLE_AUDIBLE_HALF_DURATION_IMPRESSION ConversionEvent = "FULLY_VIEWABLE_AUDIBLE_HALF_DURATION_IMPRESSION"
)

//
// The reasons for the target error.
//

type CreativeAssetMacroError_Reason string

const (

	//
	// Invalid macro name specified. Macro names must start with an alpha
	// character and consist only of alpha-numeric characters and underscores
	// and be between 1 and 64 characters.
	//
	CreativeAssetMacroError_ReasonINVALID_MACRO_NAME CreativeAssetMacroError_Reason = "INVALID_MACRO_NAME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeAssetMacroError_ReasonUNKNOWN CreativeAssetMacroError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeError_Reason string

const (

	//
	// {@link FlashRedirectCreative#flashUrl} and
	// {@link FlashRedirectCreative#fallbackUrl} are the same. The fallback URL
	// is used when the flash URL does not work and must be different from it.
	//
	CreativeError_ReasonFLASH_AND_FALLBACK_URL_ARE_SAME CreativeError_Reason = "FLASH_AND_FALLBACK_URL_ARE_SAME"

	//
	// The internal redirect URL was invalid. The URL must have the following
	// syntax http://ad.doubleclick.net/ad/sitename/;sz=size.
	//
	CreativeError_ReasonINVALID_INTERNAL_REDIRECT_URL CreativeError_Reason = "INVALID_INTERNAL_REDIRECT_URL"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} is required.
	//
	CreativeError_ReasonDESTINATION_URL_REQUIRED CreativeError_Reason = "DESTINATION_URL_REQUIRED"

	//
	// {@link HasDestinationUrlCreative#destinationUrl} must be empty when its type is
	// {@link DestinationUrlType#NONE}.
	//
	CreativeError_ReasonDESTINATION_URL_NOT_EMPTY CreativeError_Reason = "DESTINATION_URL_NOT_EMPTY"

	//
	// The provided {@link DestinationUrlType} is not supported for the creative type it is
	// being used on.
	//
	CreativeError_ReasonDESTINATION_URL_TYPE_NOT_SUPPORTED CreativeError_Reason = "DESTINATION_URL_TYPE_NOT_SUPPORTED"

	//
	// Cannot create or update legacy DART For Publishers creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_CREATIVE"

	//
	// Cannot create or update legacy mobile creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_LEGACY_DFP_MOBILE_CREATIVE"

	//
	// The user is missing a necessary feature.
	//
	CreativeError_ReasonMISSING_FEATURE CreativeError_Reason = "MISSING_FEATURE"

	//
	// Company type should be one of Advertisers, House Advertisers and
	// Ad Networks.
	//
	CreativeError_ReasonINVALID_COMPANY_TYPE CreativeError_Reason = "INVALID_COMPANY_TYPE"

	//
	// Invalid size for AdSense dynamic allocation creative.
	// Only valid AFC sizes are allowed.
	//
	CreativeError_ReasonINVALID_ADSENSE_CREATIVE_SIZE CreativeError_Reason = "INVALID_ADSENSE_CREATIVE_SIZE"

	//
	// Invalid size for Ad Exchange dynamic allocation creative.
	// Only valid Ad Exchange sizes are allowed.
	//
	CreativeError_ReasonINVALID_AD_EXCHANGE_CREATIVE_SIZE CreativeError_Reason = "INVALID_AD_EXCHANGE_CREATIVE_SIZE"

	//
	// Assets associated with the same creative must be unique.
	//
	CreativeError_ReasonDUPLICATE_ASSET_IN_CREATIVE CreativeError_Reason = "DUPLICATE_ASSET_IN_CREATIVE"

	//
	// A creative asset cannot contain an asset ID and a byte array.
	//
	CreativeError_ReasonCREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY CreativeError_Reason = "CREATIVE_ASSET_CANNOT_HAVE_ID_AND_BYTE_ARRAY"

	//
	// Cannot create or update unsupported creative.
	//
	CreativeError_ReasonCANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE CreativeError_Reason = "CANNOT_CREATE_OR_UPDATE_UNSUPPORTED_CREATIVE"

	//
	// Cannot create programmatic creatives.
	//
	CreativeError_ReasonCANNOT_CREATE_PROGRAMMATIC_CREATIVES CreativeError_Reason = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	//
	// A creative must have valid size to use the third-party impression tracker.
	//
	CreativeError_ReasonINVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER CreativeError_Reason = "INVALID_SIZE_FOR_THIRD_PARTY_IMPRESSION_TRACKER"

	//
	// Ineligible creatives can not be deactivated.
	//
	CreativeError_ReasonCANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS CreativeError_Reason = "CANNOT_DEACTIVATE_CREATIVES_IN_CREATIVE_SETS"

	//
	// Ad Manager hosted video creatives must contain a video asset.
	//
	CreativeError_ReasonHOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET CreativeError_Reason = "HOSTED_VIDEO_CREATIVE_REQUIRES_VIDEO_ASSET"

	//
	// {@link ImageCreative#thirdPartyImpressionTrackingUrls} should not contain more than one url.
	//
	CreativeError_ReasonCANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS CreativeError_Reason = "CANNOT_SET_MULTIPLE_IMPRESSION_TRACKING_URLS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeError_ReasonUNKNOWN CreativeError_Reason = "UNKNOWN"
)

//
// Represents the different types of policy violations that may be detected on
// a given creative.
//
// <p>For more information about the various types of policy violations, see
// <a href="https://support.google.com/adspolicy/answer/6008942">here</a>.
//

type CreativePolicyViolation string

const (

	//
	// Malware was found in the creative.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/1308246">here</a>.
	//
	CreativePolicyViolationMALWARE_IN_CREATIVE CreativePolicyViolation = "MALWARE_IN_CREATIVE"

	//
	// Malware was found in the landing page.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/1308246">here</a>.
	//
	CreativePolicyViolationMALWARE_IN_LANDING_PAGE CreativePolicyViolation = "MALWARE_IN_LANDING_PAGE"

	//
	// The redirect url contains legally objectionable content.
	//
	CreativePolicyViolationLEGALLY_BLOCKED_REDIRECT_URL CreativePolicyViolation = "LEGALLY_BLOCKED_REDIRECT_URL"

	//
	// The creative misrepresents the product or service being advertised.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020955">here</a>.
	//
	CreativePolicyViolationMISREPRESENTATION_OF_PRODUCT CreativePolicyViolation = "MISREPRESENTATION_OF_PRODUCT"

	//
	// The creative has been determined to be self clicking.
	//
	CreativePolicyViolationSELF_CLICKING_CREATIVE CreativePolicyViolation = "SELF_CLICKING_CREATIVE"

	//
	// The creative has been determined as attempting to game the Google network.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020954#319">here</a>.
	//
	CreativePolicyViolationGAMING_GOOGLE_NETWORK CreativePolicyViolation = "GAMING_GOOGLE_NETWORK"

	//
	// The landing page for the creative uses a dynamic DNS.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020954">here</a>.
	//
	CreativePolicyViolationDYNAMIC_DNS CreativePolicyViolation = "DYNAMIC_DNS"

	//
	// The creative has been determined as attempting to circumvent Google advertising systems.
	//
	CreativePolicyViolationCIRCUMVENTING_SYSTEMS CreativePolicyViolation = "CIRCUMVENTING_SYSTEMS"

	//
	// Phishing found in creative or landing page.
	//
	// <p>For more information see
	// <a href="https://support.google.com/adspolicy/answer/6020955">here</a>.
	//
	CreativePolicyViolationPHISHING CreativePolicyViolation = "PHISHING"

	//
	// The creative prompts the user to download a file.
	//
	// <p>For more information see
	// <a href="https://support.google.com/admanager/answer/7513391">here</a>
	//
	CreativePolicyViolationDOWNLOAD_PROMPT_IN_CREATIVE CreativePolicyViolation = "DOWNLOAD_PROMPT_IN_CREATIVE"

	//
	// The creative sets an unauthorized cookie on a Google domain.
	//
	// <p>For more information see <a
	// href="https://support.google.com/admanager/answer/7513391">here</a>
	//
	CreativePolicyViolationUNAUTHORIZED_COOKIE_DETECTED CreativePolicyViolation = "UNAUTHORIZED_COOKIE_DETECTED"

	//
	// The creative has been temporarily paused while we investigate.
	//
	CreativePolicyViolationTEMPORARY_PAUSE_FOR_VENDOR_INVESTIGATION CreativePolicyViolation = "TEMPORARY_PAUSE_FOR_VENDOR_INVESTIGATION"

	//
	// The landing page contains an abusive experience.
	//
	// <p>For more information see <a
	// href="https://support.google.com/webtools/answer/7347327">here</a>.
	//
	CreativePolicyViolationABUSIVE_EXPERIENCE CreativePolicyViolation = "ABUSIVE_EXPERIENCE"

	//
	// The creative is designed to mislead or trick the user into interacting with it.
	//
	// <p>For more information see <a
	// href="https://support.google.com/adwordspolicy/answer/6020955#357">here</a>.
	//
	CreativePolicyViolationTRICK_TO_CLICK CreativePolicyViolation = "TRICK_TO_CLICK"

	//
	// Non-allowlisted OMID verification script.
	//
	// <p>For more information see <a
	// href="https://support.google.com/authorizedbuyers/answer/9115752">here</a>.
	//
	CreativePolicyViolationUSE_OF_NON_ALLOWLISTED_OMID_VERIFICATION_SCRIPT CreativePolicyViolation = "USE_OF_NON_ALLOWLISTED_OMID_VERIFICATION_SCRIPT"

	//
	// OMID sdk injected by creative.
	//
	// < p>For more information see <a
	// href="https://support.google.com/authorizedbuyers/answer/9115752">here</a>.
	//
	CreativePolicyViolationMISUSE_OF_OMID_API CreativePolicyViolation = "MISUSE_OF_OMID_API"

	//
	// Unacceptable HTML5 ad.
	//
	// <p>For more information see <a
	// href="https://support.google.com/adspolicy/answer/6088505#266">here</a>.
	//
	CreativePolicyViolationUNACCEPTABLE_HTML_AD CreativePolicyViolation = "UNACCEPTABLE_HTML_AD"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativePolicyViolationUNKNOWN CreativePolicyViolation = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeSetError_Reason string

const (

	//
	// The 'video' feature is required but not enabled.
	//
	CreativeSetError_ReasonVIDEO_FEATURE_REQUIRED CreativeSetError_Reason = "VIDEO_FEATURE_REQUIRED"

	//
	// Video creatives (including overlays, VAST redirects, etc..) cannot be created
	// or updated through the API.
	//
	CreativeSetError_ReasonCANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES CreativeSetError_Reason = "CANNOT_CREATE_OR_UPDATE_VIDEO_CREATIVES"

	//
	// The 'roadblock' feature is required but not enabled.
	//
	CreativeSetError_ReasonROADBLOCK_FEATURE_REQUIRED CreativeSetError_Reason = "ROADBLOCK_FEATURE_REQUIRED"

	//
	// A master creative cannot be a companion creative in the same creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BE_COMPANION CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BE_COMPANION"

	//
	// Creatives in a creative set must be for the same advertiser.
	//
	CreativeSetError_ReasonINVALID_ADVERTISER CreativeSetError_Reason = "INVALID_ADVERTISER"

	//
	// Updating a master creative in a creative set is not allowed.
	//
	CreativeSetError_ReasonUPDATE_MASTER_CREATIVE_NOT_ALLOWED CreativeSetError_Reason = "UPDATE_MASTER_CREATIVE_NOT_ALLOWED"

	//
	// A master creative must belong to only one video creative set.
	//
	CreativeSetError_ReasonMASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS CreativeSetError_Reason = "MASTER_CREATIVE_CANNOT_BELONG_TO_MULTIPLE_VIDEO_CREATIVE_SETS"

	//
	// The {@Code SkippableAdType} is not allowed.
	//
	CreativeSetError_ReasonSKIPPABLE_AD_TYPE_NOT_ALLOWED CreativeSetError_Reason = "SKIPPABLE_AD_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeSetError_ReasonUNKNOWN CreativeSetError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateError_Reason string

const (

	//
	// The XML of the creative template definition is malformed and cannot be parsed.
	//
	CreativeTemplateError_ReasonCANNOT_PARSE_CREATIVE_TEMPLATE CreativeTemplateError_Reason = "CANNOT_PARSE_CREATIVE_TEMPLATE"

	//
	// A creative template has multiple variables with the same uniqueName.
	//
	CreativeTemplateError_ReasonVARIABLE_DUPLICATE_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_DUPLICATE_UNIQUE_NAME"

	//
	// The creative template contains a variable with invalid characters. Valid
	// characters are letters, numbers, spaces, forward slashes, dashes,
	// and underscores.
	//
	CreativeTemplateError_ReasonVARIABLE_INVALID_UNIQUE_NAME CreativeTemplateError_Reason = "VARIABLE_INVALID_UNIQUE_NAME"

	//
	// Multiple choices for a CreativeTemplateListStringVariable have the same value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_DUPLICATE_VALUE CreativeTemplateError_Reason = "LIST_CHOICE_DUPLICATE_VALUE"

	//
	// The choices for a CreativeTemplateListStringVariable do not contain the
	// default value.
	//
	CreativeTemplateError_ReasonLIST_CHOICE_NEEDS_DEFAULT CreativeTemplateError_Reason = "LIST_CHOICE_NEEDS_DEFAULT"

	//
	// There are no choices specified for the list variable.
	//
	CreativeTemplateError_ReasonLIST_CHOICES_EMPTY CreativeTemplateError_Reason = "LIST_CHOICES_EMPTY"

	//
	// No target platform is assigned to a creative template.
	//
	CreativeTemplateError_ReasonNO_TARGET_PLATFORMS CreativeTemplateError_Reason = "NO_TARGET_PLATFORMS"

	//
	// More than one target platform is assigned to a single creative template.
	//
	CreativeTemplateError_ReasonMULTIPLE_TARGET_PLATFORMS CreativeTemplateError_Reason = "MULTIPLE_TARGET_PLATFORMS"

	//
	// The formatter contains a placeholder which is not defined as a variable.
	//
	CreativeTemplateError_ReasonUNRECOGNIZED_PLACEHOLDER CreativeTemplateError_Reason = "UNRECOGNIZED_PLACEHOLDER"

	//
	// There are variables defined which are not being used in the formatter.
	//
	CreativeTemplateError_ReasonPLACEHOLDERS_NOT_IN_FORMATTER CreativeTemplateError_Reason = "PLACEHOLDERS_NOT_IN_FORMATTER"

	//
	// The creative template is interstitial, but the formatter doesn't contain
	// an interstitial macro.
	//
	CreativeTemplateError_ReasonMISSING_INTERSTITIAL_MACRO CreativeTemplateError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateError_ReasonUNKNOWN CreativeTemplateError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CreativeTemplateOperationError_Reason string

const (

	//
	// The current user is not allowed to modify this creative template.
	//
	CreativeTemplateOperationError_ReasonNOT_ALLOWED CreativeTemplateOperationError_Reason = "NOT_ALLOWED"

	//
	// The operation is not applicable to the current state.
	// (e.g. Trying to activate an active creative template)
	//
	CreativeTemplateOperationError_ReasonNOT_APPLICABLE CreativeTemplateOperationError_Reason = "NOT_APPLICABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CreativeTemplateOperationError_ReasonUNKNOWN CreativeTemplateOperationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomCreativeError_Reason string

const (

	//
	// Macros associated with a single custom creative must have unique names.
	//
	CustomCreativeError_ReasonDUPLICATE_MACRO_NAME_FOR_CREATIVE CustomCreativeError_Reason = "DUPLICATE_MACRO_NAME_FOR_CREATIVE"

	//
	// The file macro referenced in the snippet does not exist.
	//
	CustomCreativeError_ReasonSNIPPET_REFERENCES_MISSING_MACRO CustomCreativeError_Reason = "SNIPPET_REFERENCES_MISSING_MACRO"

	//
	// The macro referenced in the snippet is not valid.
	//
	CustomCreativeError_ReasonUNRECOGNIZED_MACRO CustomCreativeError_Reason = "UNRECOGNIZED_MACRO"

	//
	// Custom creatives are not allowed in this context.
	//
	CustomCreativeError_ReasonCUSTOM_CREATIVE_NOT_ALLOWED CustomCreativeError_Reason = "CUSTOM_CREATIVE_NOT_ALLOWED"

	//
	// The custom creative is an interstitial, but the snippet is missing an
	// interstitial macro.
	//
	CustomCreativeError_ReasonMISSING_INTERSTITIAL_MACRO CustomCreativeError_Reason = "MISSING_INTERSTITIAL_MACRO"

	//
	// Macros associated with the same custom creative cannot share the same
	// asset.
	//
	CustomCreativeError_ReasonDUPLICATE_ASSET_IN_MACROS CustomCreativeError_Reason = "DUPLICATE_ASSET_IN_MACROS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomCreativeError_ReasonUNKNOWN CustomCreativeError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type CustomFieldValueError_Reason string

const (

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} for
	// a {@link CustomField} that does not exist.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_NOT_FOUND"

	//
	// An attempt was made to create a new value for a custom field
	// that is inactive.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_INACTIVE CustomFieldValueError_Reason = "CUSTOM_FIELD_INACTIVE"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} corresponding
	// to a {@link CustomFieldOption} that could not be found.
	//
	CustomFieldValueError_ReasonCUSTOM_FIELD_OPTION_NOT_FOUND CustomFieldValueError_Reason = "CUSTOM_FIELD_OPTION_NOT_FOUND"

	//
	// An attempt was made to modify or create a {@link CustomFieldValue} with an
	// association to an entity of the wrong type for its field.
	//
	CustomFieldValueError_ReasonINVALID_ENTITY_TYPE CustomFieldValueError_Reason = "INVALID_ENTITY_TYPE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	CustomFieldValueError_ReasonUNKNOWN CustomFieldValueError_Reason = "UNKNOWN"
)

//
// The declaration about third party data usage on the associated entity.
//

type DeclarationType string

const (

	//
	// There are no companies associated.  Functionally the same as DECLARED, combined with
	// an empty company list.
	//
	DeclarationTypeNONE DeclarationType = "NONE"

	//
	// There is a set of {@link RichMediaAdsCompany}s associated with this entity.
	//
	DeclarationTypeDECLARED DeclarationType = "DECLARED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DeclarationTypeUNKNOWN DeclarationType = "UNKNOWN"
)

//
// The valid actions that a destination URL may perform if the user clicks on the ad.
//

type DestinationUrlType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	DestinationUrlTypeUNKNOWN DestinationUrlType = "UNKNOWN"

	//
	// Navigate to a web page. (a.k.a. "Click-through URL").
	//
	DestinationUrlTypeCLICK_TO_WEB DestinationUrlType = "CLICK_TO_WEB"

	//
	// Start an application.
	//
	DestinationUrlTypeCLICK_TO_APP DestinationUrlType = "CLICK_TO_APP"

	//
	// Make a phone call.
	//
	DestinationUrlTypeCLICK_TO_CALL DestinationUrlType = "CLICK_TO_CALL"

	//
	// Destination URL not present. Useful for video creatives where a landing page or a product
	// isn't necessarily applicable.
	//
	DestinationUrlTypeNONE DestinationUrlType = "NONE"
)

//
// The reasons for the entity limit reached error.
//

type EntityLimitReachedError_Reason string

const (

	//
	// The number of custom targeting values exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonCUSTOM_TARGETING_VALUES_LIMIT_REACHED EntityLimitReachedError_Reason = "CUSTOM_TARGETING_VALUES_LIMIT_REACHED"

	//
	// The number of ad exclusion rules exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonAD_EXCLUSION_RULES_LIMIT_REACHED EntityLimitReachedError_Reason = "AD_EXCLUSION_RULES_LIMIT_REACHED"

	//
	// The number of first party audience segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED"

	//
	// The number of active placements exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonPLACEMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "PLACEMENTS_LIMIT_REACHED"

	//
	// The number of line items excceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonLINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of active line items exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_LINE_ITEMS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_LINE_ITEMS_LIMIT_REACHED"

	//
	// The number of not-archived encoding profiles exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonDAI_ENCODING_PROFILES_LIMIT_REACHED EntityLimitReachedError_Reason = "DAI_ENCODING_PROFILES_LIMIT_REACHED"

	//
	// The number of traffic forecast segments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonTRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED"

	//
	// The number of forecast adjustments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonFORECAST_ADJUSTMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "FORECAST_ADJUSTMENTS_LIMIT_REACHED"

	//
	// The number of active experiments exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonACTIVE_EXPERIMENTS_LIMIT_REACHED EntityLimitReachedError_Reason = "ACTIVE_EXPERIMENTS_LIMIT_REACHED"

	//
	// The number of sites exceeds the max number allowed in the network.
	//
	EntityLimitReachedError_ReasonSITES_LIMIT_REACHED EntityLimitReachedError_Reason = "SITES_LIMIT_REACHED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	EntityLimitReachedError_ReasonUNKNOWN EntityLimitReachedError_Reason = "UNKNOWN"
)

type FeatureError_Reason string

const (

	//
	// A feature is being used that is not enabled on the current network.
	//
	FeatureError_ReasonMISSING_FEATURE FeatureError_Reason = "MISSING_FEATURE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FeatureError_ReasonUNKNOWN FeatureError_Reason = "UNKNOWN"
)

type FileError_Reason string

const (

	//
	// The provided byte array is empty.
	//
	FileError_ReasonMISSING_CONTENTS FileError_Reason = "MISSING_CONTENTS"

	//
	// The provided file is larger than the maximum size defined for the
	// network.
	//
	FileError_ReasonSIZE_TOO_LARGE FileError_Reason = "SIZE_TOO_LARGE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	FileError_ReasonUNKNOWN FileError_Reason = "UNKNOWN"
)

//
// Error reasons that may arise during HTML5 bundle processing.
//

type HtmlBundleProcessorError_Reason string

const (

	//
	// Cannot extract files from HTML5 bundle.
	//
	HtmlBundleProcessorError_ReasonCANNOT_EXTRACT_FILES_FROM_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_EXTRACT_FILES_FROM_BUNDLE"

	//
	// Bundle cannot have hard-coded click tag url(s).
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_HARD_CODED HtmlBundleProcessorError_Reason = "CLICK_TAG_HARD_CODED"

	//
	// Bundles created using GWD (Google Web Designer) cannot have click tags. GWD-published
	// bundles should use exit events instead of defining var {@code clickTAG}.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_IN_GWD_UNUPPORTED HtmlBundleProcessorError_Reason = "CLICK_TAG_IN_GWD_UNUPPORTED"

	//
	// Click tag detected outside of primary HTML file.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_NOT_IN_PRIMARY_HTML HtmlBundleProcessorError_Reason = "CLICK_TAG_NOT_IN_PRIMARY_HTML"

	//
	// Click tag or exit function has invalid name or url.
	//
	HtmlBundleProcessorError_ReasonCLICK_TAG_INVALID HtmlBundleProcessorError_Reason = "CLICK_TAG_INVALID"

	//
	// HTML5 bundle or total size of extracted files cannot be more than 1000 KB.
	//
	HtmlBundleProcessorError_ReasonFILE_SIZE_TOO_LARGE HtmlBundleProcessorError_Reason = "FILE_SIZE_TOO_LARGE"

	//
	// HTML5 bundle cannot have more than 50 files.
	//
	HtmlBundleProcessorError_ReasonFILES_TOO_MANY HtmlBundleProcessorError_Reason = "FILES_TOO_MANY"

	//
	// Flash files in HTML5 bundles are not supported. Any file with a .swf or .flv extension
	// causes this error.
	//
	HtmlBundleProcessorError_ReasonFLASH_UNSUPPORTED HtmlBundleProcessorError_Reason = "FLASH_UNSUPPORTED"

	//
	// The HTML5 bundle contains unsupported GWD component(s).
	//
	HtmlBundleProcessorError_ReasonGWD_COMPONENTS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_COMPONENTS_UNSUPPORTED"

	//
	// The HTML5 bundle contains Unsupported GWD Enabler method(s).
	//
	HtmlBundleProcessorError_ReasonGWD_ENABLER_METHODS_UNSUPPORTED HtmlBundleProcessorError_Reason = "GWD_ENABLER_METHODS_UNSUPPORTED"

	//
	// GWD properties are invalid.
	//
	HtmlBundleProcessorError_ReasonGWD_PROPERTIES_INVALID HtmlBundleProcessorError_Reason = "GWD_PROPERTIES_INVALID"

	//
	// The HTML5 bundle contains broken relative file reference(s).
	//
	HtmlBundleProcessorError_ReasonLINKED_FILES_NOT_FOUND HtmlBundleProcessorError_Reason = "LINKED_FILES_NOT_FOUND"

	//
	// No primary HTML file detected.
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_MISSING HtmlBundleProcessorError_Reason = "PRIMARY_HTML_MISSING"

	//
	// Multiple HTML files are detected. One of them should be named as {@code index.html}
	//
	HtmlBundleProcessorError_ReasonPRIMARY_HTML_UNDETERMINED HtmlBundleProcessorError_Reason = "PRIMARY_HTML_UNDETERMINED"

	//
	// An SVG block could not be parsed.
	//
	HtmlBundleProcessorError_ReasonSVG_BLOCK_INVALID HtmlBundleProcessorError_Reason = "SVG_BLOCK_INVALID"

	//
	// The HTML5 bundle cannot be decoded.
	//
	HtmlBundleProcessorError_ReasonCANNOT_DECODE_BUNDLE HtmlBundleProcessorError_Reason = "CANNOT_DECODE_BUNDLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	HtmlBundleProcessorError_ReasonUNKNOWN HtmlBundleProcessorError_Reason = "UNKNOWN"
)

//
// Image densities.
//

type ImageDensity string

const (

	//
	// Indicates that there is a 1:1 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityONE_TO_ONE ImageDensity = "ONE_TO_ONE"

	//
	// Indicates that there is a 3:2 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityTHREE_TO_TWO ImageDensity = "THREE_TO_TWO"

	//
	// Indicates that there is a 2:1 ratio between the dimensions of the raw image and the dimensions
	// that it should be displayed at in device-independent pixels.
	//
	ImageDensityTWO_TO_ONE ImageDensity = "TWO_TO_ONE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageDensityUNKNOWN ImageDensity = "UNKNOWN"
)

//
// The reasons for the target error.
//

type ImageError_Reason string

const (

	//
	// The file's format is invalid.
	//
	ImageError_ReasonINVALID_IMAGE ImageError_Reason = "INVALID_IMAGE"

	//
	// {@link Size#width} and {@link Size#height} cannot be negative.
	//
	ImageError_ReasonINVALID_SIZE ImageError_Reason = "INVALID_SIZE"

	//
	// The actual image size does not match the expected image size.
	//
	ImageError_ReasonUNEXPECTED_SIZE ImageError_Reason = "UNEXPECTED_SIZE"

	//
	// The size of the asset is larger than that of the overlay creative.
	//
	ImageError_ReasonOVERLAY_SIZE_TOO_LARGE ImageError_Reason = "OVERLAY_SIZE_TOO_LARGE"

	//
	// Animated images are not allowed.
	//
	ImageError_ReasonANIMATED_NOT_ALLOWED ImageError_Reason = "ANIMATED_NOT_ALLOWED"

	//
	// Animation length exceeded the allowed policy limit.
	//
	ImageError_ReasonANIMATION_TOO_LONG ImageError_Reason = "ANIMATION_TOO_LONG"

	//
	// Images in CMYK color formats are not allowed.
	//
	ImageError_ReasonCMYK_JPEG_NOT_ALLOWED ImageError_Reason = "CMYK_JPEG_NOT_ALLOWED"

	//
	// Flash files are not allowed.
	//
	ImageError_ReasonFLASH_NOT_ALLOWED ImageError_Reason = "FLASH_NOT_ALLOWED"

	//
	// If {@link FlashCreative#clickTagRequired} is {@code true}, then the flash
	// file is required to have a click tag embedded in it.
	//
	ImageError_ReasonFLASH_WITHOUT_CLICKTAG ImageError_Reason = "FLASH_WITHOUT_CLICKTAG"

	//
	// Animated visual effect is not allowed.
	//
	ImageError_ReasonANIMATED_VISUAL_EFFECT ImageError_Reason = "ANIMATED_VISUAL_EFFECT"

	//
	// An error was encountered in the flash file.
	//
	ImageError_ReasonFLASH_ERROR ImageError_Reason = "FLASH_ERROR"

	//
	// Incorrect image layout.
	//
	ImageError_ReasonLAYOUT_PROBLEM ImageError_Reason = "LAYOUT_PROBLEM"

	//
	// Flash files with network objects are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_OBJECTS ImageError_Reason = "FLASH_HAS_NETWORK_OBJECTS"

	//
	// Flash files with network methods are not allowed.
	//
	ImageError_ReasonFLASH_HAS_NETWORK_METHODS ImageError_Reason = "FLASH_HAS_NETWORK_METHODS"

	//
	// Flash files with hard-coded click thru URLs are not allowed.
	//
	ImageError_ReasonFLASH_HAS_URL ImageError_Reason = "FLASH_HAS_URL"

	//
	// Flash files with mouse tracking are not allowed.
	//
	ImageError_ReasonFLASH_HAS_MOUSE_TRACKING ImageError_Reason = "FLASH_HAS_MOUSE_TRACKING"

	//
	// Flash files that generate or use random numbers are not allowed.
	//
	ImageError_ReasonFLASH_HAS_RANDOM_NUM ImageError_Reason = "FLASH_HAS_RANDOM_NUM"

	//
	// Flash files with self targets are not allowed.
	//
	ImageError_ReasonFLASH_SELF_TARGETS ImageError_Reason = "FLASH_SELF_TARGETS"

	//
	// Flash file contains a bad geturl target.
	//
	ImageError_ReasonFLASH_BAD_GETURL_TARGET ImageError_Reason = "FLASH_BAD_GETURL_TARGET"

	//
	// Flash or ActionScript version in the submitted file is not supported.
	//
	ImageError_ReasonFLASH_VERSION_NOT_SUPPORTED ImageError_Reason = "FLASH_VERSION_NOT_SUPPORTED"

	//
	// The uploaded file is too large.
	//
	ImageError_ReasonFILE_TOO_LARGE ImageError_Reason = "FILE_TOO_LARGE"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_IRS ImageError_Reason = "SYSTEM_ERROR_IRS"

	//
	// A system error occurred, please try again.
	//
	ImageError_ReasonSYSTEM_ERROR_SCS ImageError_Reason = "SYSTEM_ERROR_SCS"

	//
	// The image density for a primary asset was not one of the expected image densities.
	//
	ImageError_ReasonUNEXPECTED_PRIMARY_ASSET_DENSITY ImageError_Reason = "UNEXPECTED_PRIMARY_ASSET_DENSITY"

	//
	// Two or more assets have the same image density.
	//
	ImageError_ReasonDUPLICATE_ASSET_DENSITY ImageError_Reason = "DUPLICATE_ASSET_DENSITY"

	//
	// The creative does not contain a primary asset. (For high-density creatives, the primary
	// asset must be a standard image file with 1x density.)
	//
	ImageError_ReasonMISSING_DEFAULT_ASSET ImageError_Reason = "MISSING_DEFAULT_ASSET"

	//
	// preverified_mime_type is not in the client spec's allowlist.
	//
	ImageError_ReasonPREVERIFIED_MIMETYPE_NOT_ALLOWED ImageError_Reason = "PREVERIFIED_MIMETYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ImageError_ReasonUNKNOWN ImageError_Reason = "UNKNOWN"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type InvalidPhoneNumberError_Reason string

const (

	//
	// The phone number is invalid.
	//
	InvalidPhoneNumberError_ReasonINVALID_FORMAT InvalidPhoneNumberError_Reason = "INVALID_FORMAT"

	//
	// The phone number is too short.
	//
	InvalidPhoneNumberError_ReasonTOO_SHORT InvalidPhoneNumberError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidPhoneNumberError_ReasonUNKNOWN InvalidPhoneNumberError_Reason = "UNKNOWN"
)

type InvalidUrlError_Reason string

const (

	//
	// The URL contains invalid characters.
	//
	InvalidUrlError_ReasonILLEGAL_CHARACTERS InvalidUrlError_Reason = "ILLEGAL_CHARACTERS"

	//
	// The format of the URL is not allowed. This could occur for a number of
	// reasons. For example, if an invalid scheme is specified (like "ftp://")
	// or if a port is specified when not required, or if a query was specified
	// when not required.
	//
	InvalidUrlError_ReasonINVALID_FORMAT InvalidUrlError_Reason = "INVALID_FORMAT"

	//
	// URL contains insecure scheme.
	//
	InvalidUrlError_ReasonINSECURE_SCHEME InvalidUrlError_Reason = "INSECURE_SCHEME"

	//
	// The URL does not contain a scheme.
	//
	InvalidUrlError_ReasonNO_SCHEME InvalidUrlError_Reason = "NO_SCHEME"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	InvalidUrlError_ReasonUNKNOWN InvalidUrlError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LabelEntityAssociationError_Reason string

const (

	//
	// The label has already been attached to the entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION"

	//
	// A label is being applied to an entity that does not support that entity
	// type.
	//
	LabelEntityAssociationError_ReasonINVALID_ASSOCIATION LabelEntityAssociationError_Reason = "INVALID_ASSOCIATION"

	//
	// Label negation cannot be applied to the entity type.
	//
	LabelEntityAssociationError_ReasonNEGATION_NOT_ALLOWED LabelEntityAssociationError_Reason = "NEGATION_NOT_ALLOWED"

	//
	// The same label is being applied and negated to the same entity.
	//
	LabelEntityAssociationError_ReasonDUPLICATE_ASSOCIATION_WITH_NEGATION LabelEntityAssociationError_Reason = "DUPLICATE_ASSOCIATION_WITH_NEGATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LabelEntityAssociationError_ReasonUNKNOWN LabelEntityAssociationError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type LineItemCreativeAssociationError_Reason string

const (

	//
	// Cannot associate a creative to the wrong advertiser
	//
	LineItemCreativeAssociationError_ReasonCREATIVE_IN_WRONG_ADVERTISERS_LIBRARY LineItemCreativeAssociationError_Reason = "CREATIVE_IN_WRONG_ADVERTISERS_LIBRARY"

	//
	// The creative type being associated is a invalid for the line item type.
	//
	LineItemCreativeAssociationError_ReasonINVALID_LINEITEM_CREATIVE_PAIRING LineItemCreativeAssociationError_Reason = "INVALID_LINEITEM_CREATIVE_PAIRING"

	//
	// Association start date cannot be before line item start date
	//
	LineItemCreativeAssociationError_ReasonSTARTDATE_BEFORE_LINEITEM_STARTDATE LineItemCreativeAssociationError_Reason = "STARTDATE_BEFORE_LINEITEM_STARTDATE"

	//
	// Association start date cannot be same as or after line item end date
	//
	LineItemCreativeAssociationError_ReasonSTARTDATE_NOT_BEFORE_LINEITEM_ENDDATE LineItemCreativeAssociationError_Reason = "STARTDATE_NOT_BEFORE_LINEITEM_ENDDATE"

	//
	// Association end date cannot be after line item end date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_AFTER_LINEITEM_ENDDATE LineItemCreativeAssociationError_Reason = "ENDDATE_AFTER_LINEITEM_ENDDATE"

	//
	// Association end date cannot be same as or before line item start date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_NOT_AFTER_LINEITEM_STARTDATE LineItemCreativeAssociationError_Reason = "ENDDATE_NOT_AFTER_LINEITEM_STARTDATE"

	//
	// Association end date cannot be same as or before its start date
	//
	LineItemCreativeAssociationError_ReasonENDDATE_NOT_AFTER_STARTDATE LineItemCreativeAssociationError_Reason = "ENDDATE_NOT_AFTER_STARTDATE"

	//
	// Association end date cannot be in the past.
	//
	LineItemCreativeAssociationError_ReasonENDDATE_IN_THE_PAST LineItemCreativeAssociationError_Reason = "ENDDATE_IN_THE_PAST"

	//
	// Cannot copy an association to the same line item without
	// creating new creative
	//
	LineItemCreativeAssociationError_ReasonCANNOT_COPY_WITHIN_SAME_LINE_ITEM LineItemCreativeAssociationError_Reason = "CANNOT_COPY_WITHIN_SAME_LINE_ITEM"

	//
	// Programmatic only supports the "Video" redirect type.
	//
	LineItemCreativeAssociationError_ReasonUNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE LineItemCreativeAssociationError_Reason = "UNSUPPORTED_CREATIVE_VAST_REDIRECT_TYPE"

	//
	// Programmatic does not support YouTube hosted creatives.
	//
	LineItemCreativeAssociationError_ReasonUNSUPPORTED_YOUTUBE_HOSTED_CREATIVE LineItemCreativeAssociationError_Reason = "UNSUPPORTED_YOUTUBE_HOSTED_CREATIVE"

	//
	// Programmatic creatives can only be assigned to one line item.
	//
	LineItemCreativeAssociationError_ReasonPROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM LineItemCreativeAssociationError_Reason = "PROGRAMMATIC_CREATIVES_CAN_ONLY_BE_ASSIGNED_TO_ONE_LINE_ITEM"

	//
	// Cannot activate a line item creative association if the associated creative is inactive.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE LineItemCreativeAssociationError_Reason = "CANNOT_ACTIVATE_ASSOCIATION_WITH_INACTIVE_CREATIVE"

	//
	// Cannot create programmatic creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_CREATE_PROGRAMMATIC_CREATIVES LineItemCreativeAssociationError_Reason = "CANNOT_CREATE_PROGRAMMATIC_CREATIVES"

	//
	// Cannot update programmatic creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_UPDATE_PROGRAMMATIC_CREATIVES LineItemCreativeAssociationError_Reason = "CANNOT_UPDATE_PROGRAMMATIC_CREATIVES"

	//
	// Cannot associate a creative with a line item if only one of them is set-top box enabled.
	//
	LineItemCreativeAssociationError_ReasonCREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED LineItemCreativeAssociationError_Reason = "CREATIVE_AND_LINE_ITEM_MUST_BOTH_BE_SET_TOP_BOX_ENABLED"

	//
	// Cannot delete associations between set-top box enabled line items and set-top box enabled
	// creatives.
	//
	LineItemCreativeAssociationError_ReasonCANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS LineItemCreativeAssociationError_Reason = "CANNOT_DELETE_SET_TOP_BOX_ENABLED_ASSOCIATIONS"

	//
	// Creative rotation weights must be integers.
	//
	LineItemCreativeAssociationError_ReasonSET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER LineItemCreativeAssociationError_Reason = "SET_TOP_BOX_CREATIVE_ROTATION_WEIGHT_MUST_BE_INTEGER"

	//
	// Creative rotation weights are only valid when creative rotation type is set to
	// {@link CreativeRotationType#MANUAL}.
	//
	LineItemCreativeAssociationError_ReasonINVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT LineItemCreativeAssociationError_Reason = "INVALID_CREATIVE_ROTATION_TYPE_FOR_MANUAL_WEIGHT"

	//
	// The code snippet of a creative must contain a click macro
	// (%%CLICK_URL_ESC%% or %%CLICK_URL_UNESC%%).
	//
	LineItemCreativeAssociationError_ReasonCLICK_MACROS_REQUIRED LineItemCreativeAssociationError_Reason = "CLICK_MACROS_REQUIRED"

	//
	// The code snippet of a creative must not contain a view macro
	// (%%VIEW_URL_ESC%% or %%VIEW_URL_UNESC%%).
	//
	LineItemCreativeAssociationError_ReasonVIEW_MACROS_NOT_ALLOWED LineItemCreativeAssociationError_Reason = "VIEW_MACROS_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	LineItemCreativeAssociationError_ReasonUNKNOWN LineItemCreativeAssociationError_Reason = "UNKNOWN"
)

//
// Describes the orientation that a creative should be served with.
//

type LockedOrientation string

const (

	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	LockedOrientationUNKNOWN LockedOrientation = "UNKNOWN"

	LockedOrientationFREE_ORIENTATION LockedOrientation = "FREE_ORIENTATION"

	LockedOrientationPORTRAIT_ONLY LockedOrientation = "PORTRAIT_ONLY"

	LockedOrientationLANDSCAPE_ONLY LockedOrientation = "LANDSCAPE_ONLY"
)

//
// Enum of supported mime types
//

type MimeType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	MimeTypeUNKNOWN MimeType = "UNKNOWN"

	//
	// application/x-asp
	//
	MimeTypeASP MimeType = "ASP"

	//
	// audio/aiff
	//
	MimeTypeAUDIO_AIFF MimeType = "AUDIO_AIFF"

	//
	// audio/basic
	//
	MimeTypeAUDIO_BASIC MimeType = "AUDIO_BASIC"

	//
	// audio/flac
	//
	MimeTypeAUDIO_FLAC MimeType = "AUDIO_FLAC"

	//
	// audio/mid
	//
	MimeTypeAUDIO_MID MimeType = "AUDIO_MID"

	//
	// audio/mpeg
	//
	MimeTypeAUDIO_MP3 MimeType = "AUDIO_MP3"

	//
	// audio/mp4
	//
	MimeTypeAUDIO_MP4 MimeType = "AUDIO_MP4"

	//
	// audio/x-mpegurl
	//
	MimeTypeAUDIO_MPEG_URL MimeType = "AUDIO_MPEG_URL"

	//
	// audio/x-ms-wma
	//
	MimeTypeAUDIO_MS_WMA MimeType = "AUDIO_MS_WMA"

	//
	// audio/ogg
	//
	MimeTypeAUDIO_OGG MimeType = "AUDIO_OGG"

	//
	// audio/x-pn-realaudio-plugin
	//
	MimeTypeAUDIO_REAL_AUDIO_PLUGIN MimeType = "AUDIO_REAL_AUDIO_PLUGIN"

	//
	// audio/x-wav
	//
	MimeTypeAUDIO_WAV MimeType = "AUDIO_WAV"

	//
	// application/binary
	//
	MimeTypeBINARY MimeType = "BINARY"

	//
	// application/dash+xml
	//
	MimeTypeDASH MimeType = "DASH"

	//
	// application/x-director
	//
	MimeTypeDIRECTOR MimeType = "DIRECTOR"

	//
	// application/x-shockwave-flash
	//
	MimeTypeFLASH MimeType = "FLASH"

	//
	// application/graphicconverter
	//
	MimeTypeGRAPHIC_CONVERTER MimeType = "GRAPHIC_CONVERTER"

	//
	// application/x-javascript
	//
	MimeTypeJAVASCRIPT MimeType = "JAVASCRIPT"

	//
	// application/json
	//
	MimeTypeJSON MimeType = "JSON"

	//
	// image/x-win-bitmap
	//
	MimeTypeIMAGE_BITMAP MimeType = "IMAGE_BITMAP"

	//
	// image/bmp
	//
	MimeTypeIMAGE_BMP MimeType = "IMAGE_BMP"

	//
	// image/gif
	//
	MimeTypeIMAGE_GIF MimeType = "IMAGE_GIF"

	//
	// image/jpeg
	//
	MimeTypeIMAGE_JPEG MimeType = "IMAGE_JPEG"

	//
	// image/photoshop
	//
	MimeTypeIMAGE_PHOTOSHOP MimeType = "IMAGE_PHOTOSHOP"

	//
	// image/png
	//
	MimeTypeIMAGE_PNG MimeType = "IMAGE_PNG"

	//
	// image/tiff
	//
	MimeTypeIMAGE_TIFF MimeType = "IMAGE_TIFF"

	//
	// image/vnd.wap.wbmp
	//
	MimeTypeIMAGE_WBMP MimeType = "IMAGE_WBMP"

	//
	// application/x-mpegURL
	//
	MimeTypeM3U8 MimeType = "M3U8"

	//
	// application/mac-binhex40
	//
	MimeTypeMAC_BIN_HEX_40 MimeType = "MAC_BIN_HEX_40"

	//
	// application/vnd.ms-excel
	//
	MimeTypeMS_EXCEL MimeType = "MS_EXCEL"

	//
	// application/ms-powerpoint
	//
	MimeTypeMS_POWERPOINT MimeType = "MS_POWERPOINT"

	//
	// application/msword
	//
	MimeTypeMS_WORD MimeType = "MS_WORD"

	//
	// application/octet-stream
	//
	MimeTypeOCTET_STREAM MimeType = "OCTET_STREAM"

	//
	// application/pdf
	//
	MimeTypePDF MimeType = "PDF"

	//
	// application/postscript
	//
	MimeTypePOSTSCRIPT MimeType = "POSTSCRIPT"

	//
	// application/vnd.rn-realmedia
	//
	MimeTypeRN_REAL_MEDIA MimeType = "RN_REAL_MEDIA"

	//
	// message/rfc822
	//
	MimeTypeRFC_822 MimeType = "RFC_822"

	//
	// application/rtf
	//
	MimeTypeRTF MimeType = "RTF"

	//
	// text/calendar
	//
	MimeTypeTEXT_CALENDAR MimeType = "TEXT_CALENDAR"

	//
	// text/css
	//
	MimeTypeTEXT_CSS MimeType = "TEXT_CSS"

	//
	// text/csv
	//
	MimeTypeTEXT_CSV MimeType = "TEXT_CSV"

	//
	// text/html
	//
	MimeTypeTEXT_HTML MimeType = "TEXT_HTML"

	//
	// text/java
	//
	MimeTypeTEXT_JAVA MimeType = "TEXT_JAVA"

	//
	// text/plain
	//
	MimeTypeTEXT_PLAIN MimeType = "TEXT_PLAIN"

	//
	// video/3gpp
	//
	MimeTypeVIDEO_3GPP MimeType = "VIDEO_3GPP"

	//
	// video/3gpp2
	//
	MimeTypeVIDEO_3GPP2 MimeType = "VIDEO_3GPP2"

	//
	// video/avi
	//
	MimeTypeVIDEO_AVI MimeType = "VIDEO_AVI"

	//
	// video/x-flv
	//
	MimeTypeVIDEO_FLV MimeType = "VIDEO_FLV"

	//
	// video/mp4
	//
	MimeTypeVIDEO_MP4 MimeType = "VIDEO_MP4"

	//
	// video/mp4v-es
	//
	MimeTypeVIDEO_MP4V_ES MimeType = "VIDEO_MP4V_ES"

	//
	// video/mpeg
	//
	MimeTypeVIDEO_MPEG MimeType = "VIDEO_MPEG"

	//
	// video/x-ms-asf
	//
	MimeTypeVIDEO_MS_ASF MimeType = "VIDEO_MS_ASF"

	//
	// video/x-ms-wm
	//
	MimeTypeVIDEO_MS_WM MimeType = "VIDEO_MS_WM"

	//
	// video/x-ms-wmv
	//
	MimeTypeVIDEO_MS_WMV MimeType = "VIDEO_MS_WMV"

	//
	// video/x-ms-wvx
	//
	MimeTypeVIDEO_MS_WVX MimeType = "VIDEO_MS_WVX"

	//
	// video/ogg
	//
	MimeTypeVIDEO_OGG MimeType = "VIDEO_OGG"

	//
	// video/x-quicktime
	//
	MimeTypeVIDEO_QUICKTIME MimeType = "VIDEO_QUICKTIME"

	//
	// video/webm
	//
	MimeTypeVIDEO_WEBM MimeType = "VIDEO_WEBM"

	//
	// application/xaml+xml
	//
	MimeTypeXAML MimeType = "XAML"

	//
	// application/xhtml+xml
	//
	MimeTypeXHTML MimeType = "XHTML"

	//
	// application/xml
	//
	MimeTypeXML MimeType = "XML"

	//
	// application/zip
	//
	MimeTypeZIP MimeType = "ZIP"
)

//
// The reasons for the target error.
//

type NotNullError_Reason string

const (

	//
	// Assuming that a method will not have more than 3 arguments, if it does,
	// return NULL
	//
	NotNullError_ReasonARG1_NULL NotNullError_Reason = "ARG1_NULL"

	NotNullError_ReasonARG2_NULL NotNullError_Reason = "ARG2_NULL"

	NotNullError_ReasonARG3_NULL NotNullError_Reason = "ARG3_NULL"

	NotNullError_ReasonNULL NotNullError_Reason = "NULL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	NotNullError_ReasonUNKNOWN NotNullError_Reason = "UNKNOWN"
)

//
// The reasons for the validation error.
//

type NullError_Reason string

const (

	//
	// Specified list/container must not contain any null elements
	//
	NullError_ReasonNULL_CONTENT NullError_Reason = "NULL_CONTENT"
)

//
// The reasons for the target error.
//

type ParseError_Reason string

const (

	//
	// Indicates an error in parsing an attribute.
	//
	ParseError_ReasonUNPARSABLE ParseError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ParseError_ReasonUNKNOWN ParseError_Reason = "UNKNOWN"
)

//
// Describes reasons for permission errors.
//

type PermissionError_Reason string

const (

	//
	// User does not have the required permission for the request.
	//
	PermissionError_ReasonPERMISSION_DENIED PermissionError_Reason = "PERMISSION_DENIED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PermissionError_ReasonUNKNOWN PermissionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageContextError_Reason string

const (

	//
	// Indicates that there was an error executing the PQL.
	//
	PublisherQueryLanguageContextError_ReasonUNEXECUTABLE PublisherQueryLanguageContextError_Reason = "UNEXECUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageContextError_ReasonUNKNOWN PublisherQueryLanguageContextError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type PublisherQueryLanguageSyntaxError_Reason string

const (

	//
	// Indicates that there was a PQL syntax error.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNPARSABLE PublisherQueryLanguageSyntaxError_Reason = "UNPARSABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	PublisherQueryLanguageSyntaxError_ReasonUNKNOWN PublisherQueryLanguageSyntaxError_Reason = "UNKNOWN"
)

type QuotaError_Reason string

const (

	//
	// The number of requests made per second is too high and has exceeded the
	// allowable limit. The recommended approach to handle this error is to wait
	// about 5 seconds and then retry the request. Note that this does not
	// guarantee the request will succeed. If it fails again, try increasing the
	// wait time.
	// <p>Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
	// 360 accounts, or 2 per second for Ad Manager accounts. Once again
	// this does not guarantee that every request will succeed, but may help
	// reduce the number of times you receive this error.
	//
	QuotaError_ReasonEXCEEDED_QUOTA QuotaError_Reason = "EXCEEDED_QUOTA"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	QuotaError_ReasonUNKNOWN QuotaError_Reason = "UNKNOWN"

	//
	// This user has exceeded the allowed number of new report requests per hour
	// (this includes both reports run via the UI and reports
	// run via {@link ReportService#runReportJob}).
	// The recommended approach to handle this error is to wait about 10 minutes
	// and then retry the request. Note that this does not guarantee the request
	// will succeed. If it fails again, try increasing the wait time.
	// <p>Another way to mitigate this error is to limit the number of new report
	// requests to 250 per hour per user. Once again, this does not guarantee that
	// every request will succeed, but may help reduce the number of times you
	// receive this error.
	//
	QuotaError_ReasonREPORT_JOB_LIMIT QuotaError_Reason = "REPORT_JOB_LIMIT"

	//
	// This network has exceeded the allowed number of identifiers uploaded within a 24 hour period.
	// The recommended approach to handle this error is to wait 30 minutes and then retry the
	// request. Note that this does not guarantee the request will succeed. If it fails again, try
	// increasing the wait time.
	//
	QuotaError_ReasonSEGMENT_POPULATION_LIMIT QuotaError_Reason = "SEGMENT_POPULATION_LIMIT"
)

type RangeError_Reason string

const (
	RangeError_ReasonTOO_HIGH RangeError_Reason = "TOO_HIGH"

	RangeError_ReasonTOO_LOW RangeError_Reason = "TOO_LOW"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RangeError_ReasonUNKNOWN RangeError_Reason = "UNKNOWN"
)

type RequiredCollectionError_Reason string

const (

	//
	// A required collection is missing.
	//
	RequiredCollectionError_ReasonREQUIRED RequiredCollectionError_Reason = "REQUIRED"

	//
	// Collection size is too large.
	//
	RequiredCollectionError_ReasonTOO_LARGE RequiredCollectionError_Reason = "TOO_LARGE"

	//
	// Collection size is too small.
	//
	RequiredCollectionError_ReasonTOO_SMALL RequiredCollectionError_Reason = "TOO_SMALL"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredCollectionError_ReasonUNKNOWN RequiredCollectionError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// Describes reasons for a number to be invalid.
//

type RequiredNumberError_Reason string

const (
	RequiredNumberError_ReasonREQUIRED RequiredNumberError_Reason = "REQUIRED"

	RequiredNumberError_ReasonTOO_LARGE RequiredNumberError_Reason = "TOO_LARGE"

	RequiredNumberError_ReasonTOO_SMALL RequiredNumberError_Reason = "TOO_SMALL"

	RequiredNumberError_ReasonTOO_LARGE_WITH_DETAILS RequiredNumberError_Reason = "TOO_LARGE_WITH_DETAILS"

	RequiredNumberError_ReasonTOO_SMALL_WITH_DETAILS RequiredNumberError_Reason = "TOO_SMALL_WITH_DETAILS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredNumberError_ReasonUNKNOWN RequiredNumberError_Reason = "UNKNOWN"
)

type RequiredSizeError_Reason string

const (

	//
	// {@link Creative#size} or {@link LineItem#creativePlaceholders} size is
	// missing.
	//
	RequiredSizeError_ReasonREQUIRED RequiredSizeError_Reason = "REQUIRED"

	//
	// {@link LineItemCreativeAssociation#sizes} must be a subset of
	// {@link LineItem#creativePlaceholders} sizes.
	//
	RequiredSizeError_ReasonNOT_ALLOWED RequiredSizeError_Reason = "NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RequiredSizeError_ReasonUNKNOWN RequiredSizeError_Reason = "UNKNOWN"
)

//
// Type of {@code RichMediaStudioChildAssetProperty}
//

type RichMediaStudioChildAssetProperty_Type string

const (

	//
	// SWF files
	//
	RichMediaStudioChildAssetProperty_TypeFLASH RichMediaStudioChildAssetProperty_Type = "FLASH"

	//
	// FLVS and any other video file types
	//
	RichMediaStudioChildAssetProperty_TypeVIDEO RichMediaStudioChildAssetProperty_Type = "VIDEO"

	//
	// Image files
	//
	RichMediaStudioChildAssetProperty_TypeIMAGE RichMediaStudioChildAssetProperty_Type = "IMAGE"

	//
	// The rest of the supported file types .txt, .xml, etc.
	//
	RichMediaStudioChildAssetProperty_TypeDATA RichMediaStudioChildAssetProperty_Type = "DATA"
)

//
// Rich Media Studio creative artwork types.
//

type RichMediaStudioCreativeArtworkType string

const (

	//
	// The creative is a Flash creative.
	//
	RichMediaStudioCreativeArtworkTypeFLASH RichMediaStudioCreativeArtworkType = "FLASH"

	//
	// The creative is HTML5.
	//
	RichMediaStudioCreativeArtworkTypeHTML5 RichMediaStudioCreativeArtworkType = "HTML5"

	//
	// The creative is Flash if available, and HTML5 otherwise.
	//
	RichMediaStudioCreativeArtworkTypeMIXED RichMediaStudioCreativeArtworkType = "MIXED"
)

//
// Rich Media Studio creative supported billing attributes.
// <p>
// This is determined by Rich Media Studio based on the content
// of the creative and is not updateable.
//

type RichMediaStudioCreativeBillingAttribute string

const (

	//
	// Applies to any {@link RichMediaStudioCreativeFormat#IN_PAGE}, without Video.
	//
	RichMediaStudioCreativeBillingAttributeIN_PAGE RichMediaStudioCreativeBillingAttribute = "IN_PAGE"

	//
	// Applies to any of these following {@link RichMediaStudioCreativeFormat}, without Video:
	// {@link RichMediaStudioCreativeFormat#EXPANDING},
	// {@link RichMediaStudioCreativeFormat#IM_EXPANDING},
	// {@link RichMediaStudioCreativeFormat#FLOATING},
	// {@link RichMediaStudioCreativeFormat#PEEL_DOWN},
	// {@link RichMediaStudioCreativeFormat#IN_PAGE_WITH_FLOATING}
	//
	RichMediaStudioCreativeBillingAttributeFLOATING_EXPANDING RichMediaStudioCreativeBillingAttribute = "FLOATING_EXPANDING"

	//
	// Applies to any creatives that includes a video.
	//
	RichMediaStudioCreativeBillingAttributeVIDEO RichMediaStudioCreativeBillingAttribute = "VIDEO"

	//
	// Applies to any {@link RichMediaStudioCreativeFormat#FLASH_IN_FLASH}, without Video.
	//
	RichMediaStudioCreativeBillingAttributeFLASH_IN_FLASH RichMediaStudioCreativeBillingAttribute = "FLASH_IN_FLASH"
)

//
// The reasons for the target error.
//

type RichMediaStudioCreativeError_Reason string

const (

	//
	// Only Studio can create a {@code RichMediaStudioCreative}.
	//
	RichMediaStudioCreativeError_ReasonCREATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "CREATION_NOT_ALLOWED"

	//
	// Unknown error
	//
	RichMediaStudioCreativeError_ReasonUKNOWN_ERROR RichMediaStudioCreativeError_Reason = "UKNOWN_ERROR"

	//
	// Invalid request indicating missing/invalid request parameters.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CODE_GENERATION_REQUEST RichMediaStudioCreativeError_Reason = "INVALID_CODE_GENERATION_REQUEST"

	//
	// Invalid creative object.
	//
	RichMediaStudioCreativeError_ReasonINVALID_CREATIVE_OBJECT RichMediaStudioCreativeError_Reason = "INVALID_CREATIVE_OBJECT"

	//
	// Unable to connect to Rich Media Studio to save the creative. Please try again later.
	//
	RichMediaStudioCreativeError_ReasonSTUDIO_CONNECTION_ERROR RichMediaStudioCreativeError_Reason = "STUDIO_CONNECTION_ERROR"

	//
	// The push down duration is not allowed
	//
	RichMediaStudioCreativeError_ReasonPUSHDOWN_DURATION_NOT_ALLOWED RichMediaStudioCreativeError_Reason = "PUSHDOWN_DURATION_NOT_ALLOWED"

	//
	// The position is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_POSITION RichMediaStudioCreativeError_Reason = "INVALID_POSITION"

	//
	// The Z-index is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_Z_INDEX RichMediaStudioCreativeError_Reason = "INVALID_Z_INDEX"

	//
	// The push-down duration is invalid
	//
	RichMediaStudioCreativeError_ReasonINVALID_PUSHDOWN_DURATION RichMediaStudioCreativeError_Reason = "INVALID_PUSHDOWN_DURATION"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	RichMediaStudioCreativeError_ReasonUNKNOWN RichMediaStudioCreativeError_Reason = "UNKNOWN"
)

//
// Different creative format supported by Rich Media Studio creative.
//

type RichMediaStudioCreativeFormat string

const (

	//
	// In-page creatives are served into an ad slot on publishers page.
	// In-page implies that they maintain a static size, e.g, 468x60 and
	// do not break out of these dimensions.
	//
	RichMediaStudioCreativeFormatIN_PAGE RichMediaStudioCreativeFormat = "IN_PAGE"

	//
	// Expanding creatives expand/collapse on user interaction such as mouse over.
	// It consists of an initial, or collapsed and an expanded creative area.
	//
	RichMediaStudioCreativeFormatEXPANDING RichMediaStudioCreativeFormat = "EXPANDING"

	//
	// Creatives that are served in an instant messenger application such as
	// AOL Instant Messanger or Yahoo! Messenger. This can also be used in
	// desktop applications such as weatherbug.
	//
	RichMediaStudioCreativeFormatIM_EXPANDING RichMediaStudioCreativeFormat = "IM_EXPANDING"

	//
	// Floating creatives float on top of publishers page and can be closed with
	// a close button.
	//
	RichMediaStudioCreativeFormatFLOATING RichMediaStudioCreativeFormat = "FLOATING"

	//
	// Peel-down creatives show a glimpse of your ad in the corner of a web
	// page. When the user interacts, the rest of the ad peels down to reveal
	// the full message.
	//
	RichMediaStudioCreativeFormatPEEL_DOWN RichMediaStudioCreativeFormat = "PEEL_DOWN"

	//
	// An In-Page with Floating creative is a dual-asset creative consisting of
	// an in-page asset and a floating asset. This creative type lets you deliver
	// a static primary ad to a webpage, while inviting a user to find out more
	// through a floating asset delivered when the user interacts with the
	// creative.
	//
	RichMediaStudioCreativeFormatIN_PAGE_WITH_FLOATING RichMediaStudioCreativeFormat = "IN_PAGE_WITH_FLOATING"

	//
	// A Flash ad that renders in a Flash environment.  The adserver will serve
	// this using VAST, but it is not a proper VAST XML ad.  It's an amalgamation
	// of the proprietary InStream protocol, rendered inside VAST so that we
	// can capture some standard behavior such as companions.
	//
	RichMediaStudioCreativeFormatFLASH_IN_FLASH RichMediaStudioCreativeFormat = "FLASH_IN_FLASH"

	//
	// An expanding flash ad that renders in a Flash environment. The adserver
	// will serve this using VAST, but it is not a proper VAST XML ad. It's an
	// amalgamation of the proprietary InStream protocol, rendered inside VAST so
	// that we can capture some standard behavior such as companions.
	//
	RichMediaStudioCreativeFormatFLASH_IN_FLASH_EXPANDING RichMediaStudioCreativeFormat = "FLASH_IN_FLASH_EXPANDING"

	//
	// In-app creatives are served into an ad slot within a publisher's app.
	// In-app implies that they maintain a static size, e.g, 468x60 and
	// do not break out of these dimensions.
	//
	RichMediaStudioCreativeFormatIN_APP RichMediaStudioCreativeFormat = "IN_APP"

	//
	// The creative format is unknown or not supported in the API version in use.
	//
	RichMediaStudioCreativeFormatUNKNOWN RichMediaStudioCreativeFormat = "UNKNOWN"
)

//
// The different ways a video/flash can scale.
//

type ScalableType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	ScalableTypeUNKNOWN ScalableType = "UNKNOWN"

	//
	// The creative should not be scaled.
	//
	ScalableTypeNOT_SCALABLE ScalableType = "NOT_SCALABLE"

	//
	// The creative can be scaled and its aspect-ratio must be maintained.
	//
	ScalableTypeRATIO_SCALABLE ScalableType = "RATIO_SCALABLE"

	//
	// The creative can be scaled and its aspect-ratio can be distorted.
	//
	ScalableTypeSTRETCH_SCALABLE ScalableType = "STRETCH_SCALABLE"
)

//
// Describes reasons for server errors
//

type ServerError_Reason string

const (

	//
	// Indicates that an unexpected error occured.
	//
	ServerError_ReasonSERVER_ERROR ServerError_Reason = "SERVER_ERROR"

	//
	// Indicates that the server is currently experiencing a high load. Please
	// wait and try your request again.
	//
	ServerError_ReasonSERVER_BUSY ServerError_Reason = "SERVER_BUSY"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	ServerError_ReasonUNKNOWN ServerError_Reason = "UNKNOWN"
)

//
// Error reasons for set-top box creatives.
//

type SetTopBoxCreativeError_Reason string

const (

	//
	// Set-top box creative external asset IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_IMMUTABLE"

	//
	// Set-top box creatives require an external asset ID.
	//
	SetTopBoxCreativeError_ReasonEXTERNAL_ASSET_ID_REQUIRED SetTopBoxCreativeError_Reason = "EXTERNAL_ASSET_ID_REQUIRED"

	//
	// Set-top box creative provider IDs are immutable after creation.
	//
	SetTopBoxCreativeError_ReasonPROVIDER_ID_IMMUTABLE SetTopBoxCreativeError_Reason = "PROVIDER_ID_IMMUTABLE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SetTopBoxCreativeError_ReasonUNKNOWN SetTopBoxCreativeError_Reason = "UNKNOWN"
)

//
// The different types of skippable ads.
//

type SkippableAdType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SkippableAdTypeUNKNOWN SkippableAdType = "UNKNOWN"

	//
	// Skippable ad type is disabled.
	//
	SkippableAdTypeDISABLED SkippableAdType = "DISABLED"

	//
	// Skippable ad type is enabled.
	//
	SkippableAdTypeENABLED SkippableAdType = "ENABLED"

	//
	// Skippable in-stream ad type.
	//
	SkippableAdTypeINSTREAM_SELECT SkippableAdType = "INSTREAM_SELECT"

	//
	// Any skippable or not skippable. This is only for programmatic case when the creative
	// skippability is decided by the buyside.
	//
	SkippableAdTypeANY SkippableAdType = "ANY"
)

//
// Enum to store the creative SSL compatibility manual override.
// Its three states are similar to that of {@link SslScanResult}.
//

type SslManualOverride string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SslManualOverrideUNKNOWN SslManualOverride = "UNKNOWN"

	SslManualOverrideNO_OVERRIDE SslManualOverride = "NO_OVERRIDE"

	SslManualOverrideSSL_COMPATIBLE SslManualOverride = "SSL_COMPATIBLE"

	SslManualOverrideNOT_SSL_COMPATIBLE SslManualOverride = "NOT_SSL_COMPATIBLE"
)

//
// Enum to store the creative SSL compatibility scan result.
//

type SslScanResult string

const (

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SslScanResultUNKNOWN SslScanResult = "UNKNOWN"

	SslScanResultUNSCANNED SslScanResult = "UNSCANNED"

	SslScanResultSCANNED_SSL SslScanResult = "SCANNED_SSL"

	SslScanResultSCANNED_NON_SSL SslScanResult = "SCANNED_NON_SSL"
)

type StatementError_Reason string

const (

	//
	// A bind variable has not been bound to a value.
	//
	StatementError_ReasonVARIABLE_NOT_BOUND_TO_VALUE StatementError_Reason = "VARIABLE_NOT_BOUND_TO_VALUE"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StatementError_ReasonUNKNOWN StatementError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"

	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	StringLengthError_ReasonUNKNOWN StringLengthError_Reason = "UNKNOWN"
)

//
// Error reason for {@link SwiffyConversionError}.
//

type SwiffyConversionError_Reason string

const (

	//
	// Indicates the Swiffy service has an internal error that prevents the flash
	// asset being converted.
	//
	SwiffyConversionError_ReasonSERVER_ERROR SwiffyConversionError_Reason = "SERVER_ERROR"

	//
	// Indicates the uploaded flash asset is not a valid flash file.
	//
	SwiffyConversionError_ReasonINVALID_FLASH_FILE SwiffyConversionError_Reason = "INVALID_FLASH_FILE"

	//
	// Indicates the Swiffy service currently does not support converting this
	// flash asset.
	//
	SwiffyConversionError_ReasonUNSUPPORTED_FLASH SwiffyConversionError_Reason = "UNSUPPORTED_FLASH"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	SwiffyConversionError_ReasonUNKNOWN SwiffyConversionError_Reason = "UNKNOWN"
)

//
// The reason for the error
//

type TemplateInstantiatedCreativeError_Reason string

const (

	//
	// A new creative cannot be created from an inactive creative template.
	//
	TemplateInstantiatedCreativeError_ReasonINACTIVE_CREATIVE_TEMPLATE TemplateInstantiatedCreativeError_Reason = "INACTIVE_CREATIVE_TEMPLATE"

	//
	// An uploaded file type is not allowed
	//
	TemplateInstantiatedCreativeError_ReasonFILE_TYPE_NOT_ALLOWED TemplateInstantiatedCreativeError_Reason = "FILE_TYPE_NOT_ALLOWED"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TemplateInstantiatedCreativeError_ReasonUNKNOWN TemplateInstantiatedCreativeError_Reason = "UNKNOWN"
)

//
// The type of transcode request rejection.
//

type TranscodingError_Reason string

const (

	//
	// The request to copy the creative(s) was rejected because the source is not transcoded.
	//
	TranscodingError_ReasonCANNOT_COPY_CREATIVE_PENDING_TRANSCODE TranscodingError_Reason = "CANNOT_COPY_CREATIVE_PENDING_TRANSCODE"

	//
	// The request to copy the creative(s) was rejected because the source is invalid.
	//
	TranscodingError_ReasonCANNOT_COPY_INVALID_CREATIVE TranscodingError_Reason = "CANNOT_COPY_INVALID_CREATIVE"

	//
	// The creative is still being transcoded or processed. Please try again later.
	//
	TranscodingError_ReasonTRANSCODING_IS_IN_PROGRESS TranscodingError_Reason = "TRANSCODING_IS_IN_PROGRESS"

	//
	// The value returned if the actual value is not exposed by the requested API version.
	//
	TranscodingError_ReasonUNKNOWN TranscodingError_Reason = "UNKNOWN"
)

//
// The types of VAST ads that a {@link VastRedirectCreative} can point to.
//

type VastRedirectType string

const (

	//
	// The VAST XML contains only {@code linear} ads.
	//
	VastRedirectTypeLINEAR VastRedirectType = "LINEAR"

	//
	// The VAST XML contains only {@code nonlinear} ads.
	//
	VastRedirectTypeNON_LINEAR VastRedirectType = "NON_LINEAR"

	//
	// The VAST XML contains both {@code linear} and {@code nonlinear} ads.
	//
	VastRedirectTypeLINEAR_AND_NON_LINEAR VastRedirectType = "LINEAR_AND_NON_LINEAR"
)

//
// The video delivery type.
//

type VideoDeliveryType string

const (

	//
	// The value returned if the actual value is not exposed by the requested API
	// version.
	//
	VideoDeliveryTypeUNKNOWN VideoDeliveryType = "UNKNOWN"

	//
	// Video will be served through a progressive download.
	//
	VideoDeliveryTypePROGRESSIVE VideoDeliveryType = "PROGRESSIVE"

	//
	// Video will be served via a streaming protocol like HLS or DASH.
	//
	VideoDeliveryTypeSTREAMING VideoDeliveryType = "STREAMING"
)

type CreateCreatives struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCreatives"`

	Creatives []*Creative `xml:"creatives,omitempty" json:"creatives,omitempty"`
}

type CreateCreativesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 createCreativesResponse"`

	Rval []*Creative `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type GetCreativesByStatement struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCreativesByStatement"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type GetCreativesByStatementResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 getCreativesByStatementResponse"`

	Rval *CreativePage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type PerformCreativeAction struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCreativeAction"`

	CreativeAction *CreativeAction `xml:"creativeAction,omitempty" json:"creativeAction,omitempty"`

	FilterStatement *Statement `xml:"filterStatement,omitempty" json:"filterStatement,omitempty"`
}

type PerformCreativeActionResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 performCreativeActionResponse"`

	Rval *UpdateResult `xml:"rval,omitempty" json:"rval,omitempty"`
}

type UpdateCreatives struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCreatives"`

	Creatives []*Creative `xml:"creatives,omitempty" json:"creatives,omitempty"`
}

type UpdateCreativesResponse struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 updateCreativesResponse"`

	Rval []*Creative `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapRequestHeader

type ResponseHeader SoapResponseHeader

type BaseDynamicAllocationCreative struct {
	*Creative
}

type BaseCreativeTemplateVariableValue struct {

	//
	// A uniqueName of the {@link CreativeTemplateVariable}.
	//
	UniqueName string `xml:"uniqueName,omitempty" json:"uniqueName,omitempty"`
}

type ObjectValue struct {
	*_Value
}

type ActivateCreatives struct {
	*CreativeAction
}

type AdExchangeCreative struct {
	*HasHtmlSnippetDynamicAllocationCreative

	//
	// Whether this creative is eligible for native ad-serving. This value is optional and defaults to
	// {@code false}.
	//
	IsNativeEligible bool `xml:"isNativeEligible,omitempty" json:"isNativeEligible,omitempty"`

	//
	// {@code true} if this creative is interstitial. An interstitial creative will not consider an
	// impression served until it is fully rendered in the browser.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`

	//
	// {@code true} if this creative is eligible for all requested sizes.
	//
	IsAllowsAllRequestedSizes bool `xml:"isAllowsAllRequestedSizes,omitempty" json:"isAllowsAllRequestedSizes,omitempty"`
}

type AdSenseCreative struct {
	*HasHtmlSnippetDynamicAllocationCreative
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApiVersionError struct {
	*ApiError

	Reason *ApiVersionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type AppliedLabel struct {

	//
	// The ID of a created {@link Label}.
	//
	LabelId int64 `xml:"labelId,omitempty" json:"labelId,omitempty"`

	//
	// {@code isNegated} should be set to {@code true} to negate the effects of {@code labelId}.
	//
	IsNegated bool `xml:"isNegated,omitempty" json:"isNegated,omitempty"`
}

type AspectRatioImageCreative struct {
	*HasDestinationUrlCreative

	//
	// The images associated with this creative. The ad server will choose one based on the
	// capabilities of the device. Each asset should have a size which is of the same aspect ratio as
	// the {@link Creative#size}. This attribute is required and must have at least one asset.
	//
	ImageAssets []*CreativeAsset `xml:"imageAssets,omitempty" json:"imageAssets,omitempty"`

	//
	// The text that is served along with the image creative, primarily for accessibility. If no
	// suitable image size is available for the device, this text replaces the image completely. This
	// field is optional and has a maximum length of 500 characters.
	//
	AltText string `xml:"altText,omitempty" json:"altText,omitempty"`

	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`

	//
	// Allows the actual image asset sizes to differ from the creative size. This attribute is
	// optional.
	//
	OverrideSize bool `xml:"overrideSize,omitempty" json:"overrideSize,omitempty"`
}

type AssetCreativeTemplateVariableValue struct {
	*BaseCreativeTemplateVariableValue

	//
	// The associated asset. This attribute is required when creating a new {@code TemplateCreative}.
	// To view the asset, use {@link CreativeAsset#assetUrl}.
	//
	Asset *CreativeAsset `xml:"asset,omitempty" json:"asset,omitempty"`
}

type Asset struct {
}

type AssetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AssetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AudioCreative struct {
	*BaseAudioCreative

	//
	// A URL that points to the source media that will be used for transcoding.
	//
	AudioSourceUrl string `xml:"audioSourceUrl,omitempty" json:"audioSourceUrl,omitempty"`
}

type AudioRedirectCreative struct {
	*BaseAudioCreative

	//
	// The audio creative assets.
	//
	AudioAssets []*VideoRedirectAsset `xml:"audioAssets,omitempty" json:"audioAssets,omitempty"`

	//
	// The high quality mezzanine audio asset.
	//
	MezzanineFile *VideoRedirectAsset `xml:"mezzanineFile,omitempty" json:"mezzanineFile,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BaseAudioCreative struct {
	*HasDestinationUrlCreative

	//
	// The expected duration of this creative in milliseconds.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// Allows the creative duration to differ from the actual asset durations. This attribute is
	// optional.
	//
	AllowDurationOverride bool `xml:"allowDurationOverride,omitempty" json:"allowDurationOverride,omitempty"`

	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//
	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls,omitempty" json:"trackingUrls,omitempty"`

	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//
	CustomParameters string `xml:"customParameters,omitempty" json:"customParameters,omitempty"`

	//
	// The ad id associated with the video as defined by the {@code adIdType} registry. This field is
	// required if {@code adIdType} is not {@link AdIdType#NONE}.
	//
	AdId string `xml:"adId,omitempty" json:"adId,omitempty"`

	//
	// The registry which the ad id of this creative belongs to. This field is optional and defaults
	// to {@link AdIdType#NONE}.
	//
	AdIdType *AdIdType `xml:"adIdType,omitempty" json:"adIdType,omitempty"`

	//
	// The type of skippable ad.
	//
	SkippableAdType *SkippableAdType `xml:"skippableAdType,omitempty" json:"skippableAdType,omitempty"`

	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//
	VastPreviewUrl string `xml:"vastPreviewUrl,omitempty" json:"vastPreviewUrl,omitempty"`

	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`
}

type BaseCustomFieldValue struct {

	//
	// Id of the {@code CustomField} to which this value belongs. This attribute is required.
	//
	CustomFieldId int64 `xml:"customFieldId,omitempty" json:"customFieldId,omitempty"`
}

type BaseImageCreative struct {
	*HasDestinationUrlCreative

	//
	// Allows the creative size to differ from the actual image asset size. This attribute is
	// optional.
	//
	OverrideSize bool `xml:"overrideSize,omitempty" json:"overrideSize,omitempty"`

	//
	// The primary image asset associated with this creative. This attribute is required.
	//
	PrimaryImageAsset *CreativeAsset `xml:"primaryImageAsset,omitempty" json:"primaryImageAsset,omitempty"`
}

type BaseImageRedirectCreative struct {
	*HasDestinationUrlCreative

	//
	// The URL where the actual asset resides. This attribute is required and has a maximum length of
	// 1024 characters.
	//
	ImageUrl string `xml:"imageUrl,omitempty" json:"imageUrl,omitempty"`
}

type BaseRichMediaStudioCreative struct {
	*Creative

	//
	// The creative ID as known by Rich Media Studio creative. This attribute is readonly.
	//
	StudioCreativeId int64 `xml:"studioCreativeId,omitempty" json:"studioCreativeId,omitempty"`

	//
	// The creative format of the Rich Media Studio creative. This attribute is readonly.
	//
	CreativeFormat *RichMediaStudioCreativeFormat `xml:"creativeFormat,omitempty" json:"creativeFormat,omitempty"`

	//
	// The type of artwork used in this creative. This attribute is readonly.
	//
	ArtworkType *RichMediaStudioCreativeArtworkType `xml:"artworkType,omitempty" json:"artworkType,omitempty"`

	//
	// The total size of all assets in bytes. This attribute is readonly.
	//
	TotalFileSize int64 `xml:"totalFileSize,omitempty" json:"totalFileSize,omitempty"`

	//
	// Ad tag keys. This attribute is optional and updatable.
	//
	AdTagKeys []string `xml:"adTagKeys,omitempty" json:"adTagKeys,omitempty"`

	//
	// Custom key values. This attribute is optional and updatable.
	//
	CustomKeyValues []string `xml:"customKeyValues,omitempty" json:"customKeyValues,omitempty"`

	//
	// The survey URL for this creative. This attribute is optional and updatable.
	//
	SurveyUrl string `xml:"surveyUrl,omitempty" json:"surveyUrl,omitempty"`

	//
	// The tracking URL to be triggered when an ad starts to play, whether Rich Media or backup
	// content is displayed. Behaves like the {@code /imp} URL that DART used to track impressions.
	// This URL can't exceed 1024 characters and must start with http:// or https://. This attribute
	// is optional and updatable.
	//
	AllImpressionsUrl string `xml:"allImpressionsUrl,omitempty" json:"allImpressionsUrl,omitempty"`

	//
	// The tracking URL to be triggered when any rich media artwork is displayed in an ad. Behaves
	// like the {@code /imp} URL that DART used to track impressions. This URL can't exceed 1024
	// characters and must start with http:// or https://. This attribute is optional and updatable.
	//
	RichMediaImpressionsUrl string `xml:"richMediaImpressionsUrl,omitempty" json:"richMediaImpressionsUrl,omitempty"`

	//
	// The tracking URL to be triggered when the Rich Media backup image is served. This attribute is
	// optional and updatable.
	//
	BackupImageImpressionsUrl string `xml:"backupImageImpressionsUrl,omitempty" json:"backupImageImpressionsUrl,omitempty"`

	//
	// The override CSS. You can put custom CSS code here to repair creative styling; e.g. {@code tr
	// td { background-color:#FBB; }}. This attribute is optional and updatable.
	//
	OverrideCss string `xml:"overrideCss,omitempty" json:"overrideCss,omitempty"`

	//
	// The Flash plugin version required to view this creative; e.g. {@code Flash 10.2/AS 3}. This
	// attribute is read only.
	//
	RequiredFlashPluginVersion string `xml:"requiredFlashPluginVersion,omitempty" json:"requiredFlashPluginVersion,omitempty"`

	//
	// The duration of the creative in milliseconds. This attribute is optional and updatable.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// The billing attribute associated with this creative. This attribute is read only.
	//
	BillingAttribute *RichMediaStudioCreativeBillingAttribute `xml:"billingAttribute,omitempty" json:"billingAttribute,omitempty"`

	//
	// The list of child assets associated with this creative. This attribute is read only.
	//
	RichMediaStudioChildAssetProperties []*RichMediaStudioChildAssetProperty `xml:"richMediaStudioChildAssetProperties,omitempty" json:"richMediaStudioChildAssetProperties,omitempty"`

	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`
}

type BaseVideoCreative struct {
	*HasDestinationUrlCreative

	//
	// The expected duration of this creative in milliseconds.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// Allows the creative duration to differ from the actual asset durations. This attribute is
	// optional.
	//
	AllowDurationOverride bool `xml:"allowDurationOverride,omitempty" json:"allowDurationOverride,omitempty"`

	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//
	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls,omitempty" json:"trackingUrls,omitempty"`

	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//
	CustomParameters string `xml:"customParameters,omitempty" json:"customParameters,omitempty"`

	//
	// The ad id associated with the video as defined by the {@code adIdType} registry. This field is
	// required if {@code adIdType} is not {@link AdIdType#NONE}.
	//
	AdId string `xml:"adId,omitempty" json:"adId,omitempty"`

	//
	// The registry which the ad id of this creative belongs to. This field is optional and defaults
	// to {@link AdIdType#NONE}.
	//
	AdIdType *AdIdType `xml:"adIdType,omitempty" json:"adIdType,omitempty"`

	//
	// The type of skippable ad.
	//
	SkippableAdType *SkippableAdType `xml:"skippableAdType,omitempty" json:"skippableAdType,omitempty"`

	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//
	VastPreviewUrl string `xml:"vastPreviewUrl,omitempty" json:"vastPreviewUrl,omitempty"`

	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`
}

type BooleanValue struct {
	*_Value

	//
	// The boolean value.
	//
	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type ClickTag struct {

	//
	// Name of the click tag, follows the regex "clickTag\\d*"
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// URL of the click tag.
	//
	Url string `xml:"url,omitempty" json:"url,omitempty"`
}

type ClickTrackingCreative struct {
	*Creative

	//
	// The click tracking URL. This attribute is required.
	//
	ClickTrackingUrl string `xml:"clickTrackingUrl,omitempty" json:"clickTrackingUrl,omitempty"`
}

type CollectionSizeError struct {
	*ApiError

	Reason *CollectionSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CommonError struct {
	*ApiError

	Reason *CommonError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ConversionEvent_TrackingUrlsMapEntry struct {
	Key *ConversionEvent `xml:"key,omitempty" json:"key,omitempty"`

	Value *TrackingUrls `xml:"value,omitempty" json:"value,omitempty"`
}

type CreativeAction struct {
}

type CreativeAsset struct {

	//
	// The ID of the asset. This attribute is generated by Google upon creation.
	//
	AssetId int64 `xml:"assetId,omitempty" json:"assetId,omitempty"`

	//
	// The content of the asset as a byte array. This attribute is required when creating the creative
	// that contains this asset if an {@code assetId} is not provided.
	//
	// <p>When updating the content, pass a new byte array, and set {@code assetId} to null.
	// Otherwise, this field can be null.
	//
	// <p>The {@code assetByteArray} will be {@code null} when the creative is retrieved.
	//
	AssetByteArray []byte `xml:"assetByteArray,omitempty" json:"assetByteArray,omitempty"`

	//
	// The file name of the asset. This attribute is required when creating a new asset (e.g. when
	// {@link #assetByteArray} is not null).
	//
	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	//
	// The file size of the asset in bytes. This attribute is read-only.
	//
	FileSize int64 `xml:"fileSize,omitempty" json:"fileSize,omitempty"`

	//
	// A URL where the asset can be previewed at. This field is read-only and set by Google.
	//
	AssetUrl string `xml:"assetUrl,omitempty" json:"assetUrl,omitempty"`

	//
	// The size of the asset. Note that this may not always reflect the actual physical size of the
	// asset, but may reflect the expected size. This attribute is read-only and is populated by
	// Google.
	//
	Size *Size `xml:"size,omitempty" json:"size,omitempty"`

	//
	// The click tags of the asset. This field is read-only.
	//
	ClickTags []*ClickTag `xml:"clickTags,omitempty" json:"clickTags,omitempty"`

	//
	// The display density of the image. This is the ratio between a dimension in pixels of the image
	// and the dimension in pixels that it should occupy in device-independent pixels when displayed.
	// This attribute is optional and defaults to ONE_TO_ONE.
	//
	ImageDensity *ImageDensity `xml:"imageDensity,omitempty" json:"imageDensity,omitempty"`
}

type CustomCreativeAsset struct {

	//
	// The name by which the associated asset will be referenced. For example, if the value is "foo",
	// then the asset can be inserted into an HTML snippet using the macro: "%%FILE:foo%%".
	//
	MacroName string `xml:"macroName,omitempty" json:"macroName,omitempty"`

	//
	// The asset. This attribute is required. To view the asset, use {@link CreativeAsset#assetUrl}.
	//
	Asset *CreativeAsset `xml:"asset,omitempty" json:"asset,omitempty"`
}

type CreativeAssetMacroError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeAssetMacroError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Creative struct {

	//
	// The ID of the advertiser that owns the creative. This attribute is required.
	//
	AdvertiserId int64 `xml:"advertiserId,omitempty" json:"advertiserId,omitempty"`

	//
	// Uniquely identifies the {@code Creative}. This value is read-only and is assigned by Google
	// when the creative is created. This attribute is required for updates.
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The name of the creative. This attribute is required and has a maximum length of 255
	// characters.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// The {@link Size} of the creative. This attribute is required for creation and then is
	// read-only.
	//
	Size *Size `xml:"size,omitempty" json:"size,omitempty"`

	//
	// The URL of the creative for previewing the media. This attribute is read-only and is assigned
	// by Google when a creative is created.
	//
	PreviewUrl string `xml:"previewUrl,omitempty" json:"previewUrl,omitempty"`

	//
	// Set of policy labels detected for this creative.
	// This attribute is read-only.
	//
	PolicyLabels []*CreativePolicyViolation `xml:"policyLabels,omitempty" json:"policyLabels,omitempty"`

	//
	// The set of labels applied to this creative.
	//
	AppliedLabels []*AppliedLabel `xml:"appliedLabels,omitempty" json:"appliedLabels,omitempty"`

	//
	// The date and time this creative was last modified.
	//
	LastModifiedDateTime soap.XSDDateTime `xml:"lastModifiedDateTime,omitempty" json:"lastModifiedDateTime,omitempty"`

	//
	// The values of the custom fields associated with this creative.
	//
	CustomFieldValues []*BaseCustomFieldValue `xml:"customFieldValues,omitempty" json:"customFieldValues,omitempty"`

	//
	// The third party companies associated with this creative.
	//
	// <p>This is distinct from any associated companies that Google may detect programmatically.
	//
	ThirdPartyDataDeclaration *ThirdPartyDataDeclaration `xml:"thirdPartyDataDeclaration,omitempty" json:"thirdPartyDataDeclaration,omitempty"`
}

type CreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativePage struct {

	//
	// The size of the total result set to which this page belongs.
	//
	TotalResultSetSize int32 `xml:"totalResultSetSize,omitempty" json:"totalResultSetSize,omitempty"`

	//
	// The absolute index in the total result set on which this page begins.
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// The collection of creatives contained within this page.
	//
	Results []*Creative `xml:"results,omitempty" json:"results,omitempty"`
}

type CreativeSetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeSetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTemplateError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CreativeTemplateOperationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CreativeTemplateOperationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomCreative struct {
	*HasDestinationUrlCreative

	//
	// The HTML snippet that this creative delivers. This attribute is required.
	//
	HtmlSnippet string `xml:"htmlSnippet,omitempty" json:"htmlSnippet,omitempty"`

	//
	// A list of file assets that are associated with this creative, and can be referenced in the
	// snippet.
	//
	CustomCreativeAssets []*CustomCreativeAsset `xml:"customCreativeAssets,omitempty" json:"customCreativeAssets,omitempty"`

	//
	// {@code true} if this custom creative is interstitial. An interstitial creative will not
	// consider an impression served until it is fully rendered in the browser.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//
	IsSafeFrameCompatible bool `xml:"isSafeFrameCompatible,omitempty" json:"isSafeFrameCompatible,omitempty"`

	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`
}

type CustomCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CustomFieldValue struct {
	*BaseCustomFieldValue

	//
	// The value for this field. The appropriate type of {@code Value} is determined by the {@link
	// CustomField#dataType} of the {@code CustomField} that this conforms to.
	//
	// <table>
	// <tr><th>{@link CustomFieldDataType}</th><th>{@link Value} type</th></tr>
	// <tr><td>{@link CustomFieldDataType#STRING STRING}</td><td>{@link TextValue}</td></tr>
	// <tr><td>{@link CustomFieldDataType#NUMBER NUMBER}</td><td>{@link NumberValue}</td></tr>
	// <tr><td>{@link CustomFieldDataType#TOGGLE TOGGLE}</td><td>{@link BooleanValue}</td></tr>
	// </table>
	//
	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type CustomFieldValueError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CustomFieldValueError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Date struct {

	//
	// Year (e.g., 2009)
	//
	Year int32 `xml:"year,omitempty" json:"year,omitempty"`

	//
	// Month (1..12)
	//
	Month int32 `xml:"month,omitempty" json:"month,omitempty"`

	//
	// Day (1..31)
	//
	Day int32 `xml:"day,omitempty" json:"day,omitempty"`
}

type DateTime struct {
	Date soap.XSDDate `xml:"date,omitempty" json:"date,omitempty"`

	Hour int32 `xml:"hour,omitempty" json:"hour,omitempty"`

	Minute int32 `xml:"minute,omitempty" json:"minute,omitempty"`

	Second int32 `xml:"second,omitempty" json:"second,omitempty"`

	TimeZoneId string `xml:"timeZoneId,omitempty" json:"timeZoneId,omitempty"`
}

type DateTimeValue struct {
	*_Value

	//
	// The {@code DateTime} value.
	//
	Value soap.XSDDateTime `xml:"value,omitempty" json:"value,omitempty"`
}

type DateValue struct {
	*_Value

	//
	// The {@code Date} value.
	//
	Value soap.XSDDate `xml:"value,omitempty" json:"value,omitempty"`
}

type DeactivateCreatives struct {
	*CreativeAction
}

type DropDownCustomFieldValue struct {
	*BaseCustomFieldValue

	//
	// The {@link CustomFieldOption#id ID} of the {@link CustomFieldOption} for this value.
	//
	CustomFieldOptionId int64 `xml:"customFieldOptionId,omitempty" json:"customFieldOptionId,omitempty"`
}

type EntityLimitReachedError struct {
	*ApiError

	Reason *EntityLimitReachedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FeatureError struct {
	*ApiError

	Reason *FeatureError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type FileError struct {
	*ApiError

	Reason *FileError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type HasDestinationUrlCreative struct {
	*Creative

	//
	// The URL that the user is directed to if they click on the creative. This attribute is required
	// unless the {@link destinationUrlType} is {@link DestinationUrlType#NONE}, and has a maximum
	// length of 1024 characters.
	//
	DestinationUrl string `xml:"destinationUrl,omitempty" json:"destinationUrl,omitempty"`

	//
	// The action that should be performed if the user clicks on the creative. This attribute is
	// optional and defaults to {@link DestinationUrlType#CLICK_TO_WEB}.
	//
	DestinationUrlType *DestinationUrlType `xml:"destinationUrlType,omitempty" json:"destinationUrlType,omitempty"`
}

type HasHtmlSnippetDynamicAllocationCreative struct {
	*BaseDynamicAllocationCreative

	//
	// The code snippet (ad tag) from Ad Exchange or AdSense to traffic the dynamic allocation
	// creative. Only valid Ad Exchange or AdSense parameters will be considered. Any extraneous HTML
	// or JavaScript will be ignored.
	//
	CodeSnippet string `xml:"codeSnippet,omitempty" json:"codeSnippet,omitempty"`
}

type Html5Creative struct {
	*Creative

	//
	// Allows the creative size to differ from the actual HTML5 asset size. This attribute is
	// optional.
	//
	OverrideSize bool `xml:"overrideSize,omitempty" json:"overrideSize,omitempty"`

	//
	// Impression tracking URLs to ping when this creative is displayed. This field is optional.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`

	//
	// A click tracking URL to ping when this creative is clicked. This field is optional.
	//
	ThirdPartyClickTrackingUrl string `xml:"thirdPartyClickTrackingUrl,omitempty" json:"thirdPartyClickTrackingUrl,omitempty"`

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// The SSL compatibility scan result of this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//
	IsSafeFrameCompatible bool `xml:"isSafeFrameCompatible,omitempty" json:"isSafeFrameCompatible,omitempty"`

	//
	// The HTML5 asset. To preview the HTML5 asset, use the {@link CreativeAsset#assetUrl}. In this
	// field, the {@link CreativeAsset#assetByteArray} must be a zip bundle and the {@link
	// CreativeAsset#fileName} must have a zip extension. This attribute is required.
	//
	Html5Asset *CreativeAsset `xml:"html5Asset,omitempty" json:"html5Asset,omitempty"`
}

type HtmlBundleProcessorError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *HtmlBundleProcessorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ImageCreative struct {
	*BaseImageCreative

	//
	// Alternative text to be rendered along with the creative used mainly for accessibility. This
	// field is optional and has a maximum length of 500 characters.
	//
	AltText string `xml:"altText,omitempty" json:"altText,omitempty"`

	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`

	//
	// The list of secondary image assets associated with this creative. This attribute is optional.
	//
	// <p>Secondary image assets can be used to store different resolution versions of the primary
	// asset for use on non-standard density screens.
	//
	SecondaryImageAssets []*CreativeAsset `xml:"secondaryImageAssets,omitempty" json:"secondaryImageAssets,omitempty"`
}

type ImageError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ImageError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ImageOverlayCreative struct {
	*BaseImageCreative

	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional. This attribute is read-only.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//
	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls,omitempty" json:"trackingUrls,omitempty"`

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//
	CustomParameters string `xml:"customParameters,omitempty" json:"customParameters,omitempty"`

	//
	// Minimum suggested duration in milliseconds. This attribute is optional.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//
	VastPreviewUrl string `xml:"vastPreviewUrl,omitempty" json:"vastPreviewUrl,omitempty"`
}

type ImageRedirectCreative struct {
	*BaseImageRedirectCreative

	//
	// Alternative text to be rendered along with the creative used mainly for accessibility. This
	// field is optional and has a maximum length of 500 characters.
	//
	AltText string `xml:"altText,omitempty" json:"altText,omitempty"`

	//
	// A list of impression tracking URL to ping when this creative is displayed. This field is
	// optional and each string has a maximum length of 1024 characters.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`
}

type ImageRedirectOverlayCreative struct {
	*BaseImageRedirectCreative

	//
	// The size of the image asset. Note that this may differ from {@link #size} if the asset is not
	// expected to fill the entire video player. This attribute is optional.
	//
	AssetSize *Size `xml:"assetSize,omitempty" json:"assetSize,omitempty"`

	//
	// Minimum suggested duration in milliseconds. This attribute is optional.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//
	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls,omitempty" json:"trackingUrls,omitempty"`

	//
	// A comma separated key=value list of parameters that will be supplied to the creative, written
	// into the VAST {@code AdParameters} node. This attribute is optional.
	//
	CustomParameters string `xml:"customParameters,omitempty" json:"customParameters,omitempty"`

	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//
	VastPreviewUrl string `xml:"vastPreviewUrl,omitempty" json:"vastPreviewUrl,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InternalRedirectCreative struct {
	*Creative

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// The asset size of an internal redirect creative. Note that this may differ from {@code size} if
	// users set {@code overrideSize} to true. This attribute is read-only and is populated by Google.
	//
	AssetSize *Size `xml:"assetSize,omitempty" json:"assetSize,omitempty"`

	//
	// The internal redirect URL of the DFA or DART for Publishers hosted creative. This attribute is
	// required and has a maximum length of 1024 characters.
	//
	InternalRedirectUrl string `xml:"internalRedirectUrl,omitempty" json:"internalRedirectUrl,omitempty"`

	//
	// Allows the creative size to differ from the actual size specified in the internal redirect's
	// url. This attribute is optional.
	//
	OverrideSize bool `xml:"overrideSize,omitempty" json:"overrideSize,omitempty"`

	//
	// {@code true} if this internal redirect creative is interstitial.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`

	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`
}

type InvalidPhoneNumberError struct {
	*ApiError

	Reason *InvalidPhoneNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InvalidUrlError struct {
	*ApiError

	Reason *InvalidUrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LabelEntityAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LabelEntityAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LegacyDfpCreative struct {
	*Creative
}

type LineItemCreativeAssociationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *LineItemCreativeAssociationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type LongCreativeTemplateVariableValue struct {
	*BaseCreativeTemplateVariableValue

	//
	// The long value of {@link CreativeTemplateVariable}
	//
	Value int64 `xml:"value,omitempty" json:"value,omitempty"`
}

type NotNullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotNullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*_Value

	//
	// The numeric value represented as a string.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ParseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ParseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionError struct {
	*ApiError

	Reason *PermissionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ProgrammaticCreative struct {
	*Creative
}

type PublisherQueryLanguageContextError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageContextError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PublisherQueryLanguageSyntaxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *PublisherQueryLanguageSyntaxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type QuotaError struct {
	*ApiError

	Reason *QuotaError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RangeError struct {
	*ApiError

	Reason *RangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RedirectAsset struct {
	*Asset

	//
	// The URL where the asset is hosted.
	//
	RedirectUrl string `xml:"redirectUrl,omitempty" json:"redirectUrl,omitempty"`
}

type RequiredCollectionError struct {
	*ApiError

	Reason *RequiredCollectionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredNumberError struct {
	*ApiError

	Reason *RequiredNumberError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredSizeError struct {
	*ApiError

	Reason *RequiredSizeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RichMediaStudioChildAssetProperty struct {

	//
	// The name of the asset as known by Rich Media Studio. This attribute is readonly.
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// Required file type of the asset.  This attribute is readonly.
	//
	Type_ *RichMediaStudioChildAssetProperty_Type `xml:"type,omitempty" json:"type,omitempty"`

	//
	// The total size of the asset in bytes. This attribute is readonly.
	//
	TotalFileSize int64 `xml:"totalFileSize,omitempty" json:"totalFileSize,omitempty"`

	//
	// Width of the widget in pixels. This attribute is readonly.
	//
	Width int32 `xml:"width,omitempty" json:"width,omitempty"`

	//
	// Height of the widget in pixels. This attribute is readonly.
	//
	Height int32 `xml:"height,omitempty" json:"height,omitempty"`

	//
	// The URL of the asset. This attribute is readonly.
	//
	Url string `xml:"url,omitempty" json:"url,omitempty"`
}

type RichMediaStudioCreative struct {
	*BaseRichMediaStudioCreative

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// {@code true} if this is interstitial. An interstitial creative will not consider an impression
	// served until it is fully rendered in the browser. This attribute is readonly.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`
}

type RichMediaStudioCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RichMediaStudioCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ServerError struct {
	*ApiError

	Reason *ServerError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetTopBoxCreative struct {
	*BaseVideoCreative

	//
	// An external asset identifier that is used in the cable system. This attribute is read-only
	// after creation.
	//
	ExternalAssetId string `xml:"externalAssetId,omitempty" json:"externalAssetId,omitempty"`

	//
	// An identifier for the provider in the cable system. This attribute is read-only after creation.
	//
	ProviderId string `xml:"providerId,omitempty" json:"providerId,omitempty"`

	//
	// IDs of regions where the creative is available to serve from a local cable video-on-demand
	// server. This attribute is optional.
	//
	AvailabilityRegionIds []string `xml:"availabilityRegionIds,omitempty" json:"availabilityRegionIds,omitempty"`

	//
	// The date and time that this creative can begin serving from a local cable video-on-demand
	// server. This attribute is optional.
	//
	LicenseWindowStartDateTime soap.XSDDateTime `xml:"licenseWindowStartDateTime,omitempty" json:"licenseWindowStartDateTime,omitempty"`

	//
	// The date and time that this creative can no longer be served from a local cable video-on-demand
	// server. This attribute is optional.
	//
	LicenseWindowEndDateTime soap.XSDDateTime `xml:"licenseWindowEndDateTime,omitempty" json:"licenseWindowEndDateTime,omitempty"`
}

type SetTopBoxCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *SetTopBoxCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SetValue struct {
	*_Value

	//
	// The values. They must all be the same type of {@code Value} and not contain duplicates.
	//
	Values []*_Value `xml:"values,omitempty" json:"values,omitempty"`
}

type Size struct {

	//
	// The width of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Width int32 `xml:"width,omitempty" json:"width,omitempty"`

	//
	// The height of the {@link AdUnit}, {@link LineItem} or {@link Creative}.
	//
	Height int32 `xml:"height,omitempty" json:"height,omitempty"`

	//
	// Whether this size represents an aspect ratio.
	//
	IsAspectRatio bool `xml:"isAspectRatio,omitempty" json:"isAspectRatio,omitempty"`
}

type SoapRequestHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 RequestHeader"`

	//
	// The network code to use in the context of a request.
	//
	NetworkCode string `xml:"networkCode,omitempty" json:"networkCode,omitempty"`

	//
	// The name of client library application.
	//
	ApplicationName string `xml:"applicationName,omitempty" json:"applicationName,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://www.google.com/apis/ads/publisher/v202311 ResponseHeader"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type Statement struct {

	//
	// Holds the query in PQL syntax. The syntax is:<br>
	// <code>[WHERE <condition> {[AND | OR] <condition> ...}]</code><br>
	// <code>[ORDER BY <property> [ASC | DESC]]</code><br>
	// <code>[LIMIT {[<offset>,] <count>} | {<count> OFFSET <offset>}]</code><br>
	// <p>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <value></code><br>
	// <code><condition></code><br>
	// &nbsp;&nbsp;&nbsp;&nbsp;
	// <code>:= <property> {< | <= | > | >= | = | != } <bind variable></code><br>
	// <code><condition> := <property> IN <list></code><br>
	// <code><condition> := <property> IS NULL</code><br>
	// <code><condition> := <property> LIKE <wildcard%match></code><br>
	// <code><bind variable> := :<name></code><br>
	// </p>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`

	//
	// Holds keys and values for bind variables and their values. The key is the
	// name of the bind variable. The value is the literal value of the variable.
	// <p>
	// In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
	// the bind variable, represented by {@code :bindStatus} is named {@code
	// bindStatus}, which would also be the parameter map key. The bind variable's
	// value would be represented by a parameter map value of type
	// {@link TextValue}. The final result, for example, would be an entry of
	// {@code "bindStatus" => StringParam("ACTIVE")}.
	// </p>
	//
	Values []*String_ValueMapEntry `xml:"values,omitempty" json:"values,omitempty"`
}

type StatementError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatementError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringCreativeTemplateVariableValue struct {
	*BaseCreativeTemplateVariableValue

	//
	// The string value of {@link CreativeTemplateVariable}
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_ValueMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value *_Value `xml:"value,omitempty" json:"value,omitempty"`
}

type SwiffyConversionError struct {
	*ApiError

	Reason *SwiffyConversionError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TemplateCreative struct {
	*Creative

	//
	// Creative template ID that this creative is created from.
	//
	CreativeTemplateId int64 `xml:"creativeTemplateId,omitempty" json:"creativeTemplateId,omitempty"`

	//
	// {@code true} if this template instantiated creative is interstitial. This attribute is
	// read-only and is assigned by Google based on the creative template.
	//
	IsInterstitial bool `xml:"isInterstitial,omitempty" json:"isInterstitial,omitempty"`

	//
	// {@code true} if this template instantiated creative is eligible for native adserving. This
	// attribute is read-only and is assigned by Google based on the creative template.
	//
	IsNativeEligible bool `xml:"isNativeEligible,omitempty" json:"isNativeEligible,omitempty"`

	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is read-only and is assigned by Google based on the {@link CreativeTemplate}.
	//
	IsSafeFrameCompatible bool `xml:"isSafeFrameCompatible,omitempty" json:"isSafeFrameCompatible,omitempty"`

	//
	// The URL the user is directed to if they click on the creative. This attribute is only required
	// if the template snippet contains the {@code %u} or {@code %%DEST_URL%%} macro. It has a maximum
	// length of 1024 characters.
	//
	DestinationUrl string `xml:"destinationUrl,omitempty" json:"destinationUrl,omitempty"`

	//
	// Stores values of {@link CreativeTemplateVariable} in the {@link CreativeTemplate}.
	//
	CreativeTemplateVariableValues []*BaseCreativeTemplateVariableValue `xml:"creativeTemplateVariableValues,omitempty" json:"creativeTemplateVariableValues,omitempty"`

	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`
}

type TemplateInstantiatedCreativeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *TemplateInstantiatedCreativeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TextValue struct {
	*_Value

	//
	// The string value.
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ThirdPartyCreative struct {
	*Creative

	//
	// The HTML snippet that this creative delivers. This attribute is required.
	//
	Snippet string `xml:"snippet,omitempty" json:"snippet,omitempty"`

	//
	// The HTML snippet that this creative delivers with macros expanded. This attribute is read-only
	// and is set by Google.
	//
	ExpandedSnippet string `xml:"expandedSnippet,omitempty" json:"expandedSnippet,omitempty"`

	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// A locked orientation for this creative to be displayed in.
	//
	LockedOrientation *LockedOrientation `xml:"lockedOrientation,omitempty" json:"lockedOrientation,omitempty"`

	//
	// Whether the {@link Creative} is compatible for SafeFrame rendering.
	//
	// <p>This attribute is optional and defaults to {@code true}.
	//
	IsSafeFrameCompatible bool `xml:"isSafeFrameCompatible,omitempty" json:"isSafeFrameCompatible,omitempty"`

	//
	// A list of impression tracking URLs to ping when this creative is displayed. This field is
	// optional.
	//
	ThirdPartyImpressionTrackingUrls []string `xml:"thirdPartyImpressionTrackingUrls,omitempty" json:"thirdPartyImpressionTrackingUrls,omitempty"`

	//
	// The URL of the AMP creative.
	//
	AmpRedirectUrl string `xml:"ampRedirectUrl,omitempty" json:"ampRedirectUrl,omitempty"`
}

type ThirdPartyDataDeclaration struct {
	DeclarationType *DeclarationType `xml:"declarationType,omitempty" json:"declarationType,omitempty"`

	ThirdPartyCompanyIds []int64 `xml:"thirdPartyCompanyIds,omitempty" json:"thirdPartyCompanyIds,omitempty"`
}

type TrackingUrls struct {

	//
	// A list of all URLs that should be pinged.
	//
	Urls []string `xml:"urls,omitempty" json:"urls,omitempty"`
}

type TranscodingError struct {
	*ApiError

	Reason *TranscodingError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type TypeError struct {
	*ApiError
}

type UniqueError struct {
	*ApiError
}

type UnsupportedCreative struct {
	*Creative

	//
	// The creative type that is unsupported by this API version.
	//
	UnsupportedCreativeType string `xml:"unsupportedCreativeType,omitempty" json:"unsupportedCreativeType,omitempty"`
}

type UpdateResult struct {

	//
	// The number of objects that were changed as a result of performing the
	// action.
	//
	NumChanges int32 `xml:"numChanges,omitempty" json:"numChanges,omitempty"`
}

type UrlCreativeTemplateVariableValue struct {
	*BaseCreativeTemplateVariableValue

	//
	// The url value of {@link CreativeTemplateVariable}
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type _Value struct {
}

type VastRedirectCreative struct {
	*Creative

	//
	// The URL where the 3rd party VAST XML is hosted. This attribute is required.
	//
	VastXmlUrl string `xml:"vastXmlUrl,omitempty" json:"vastXmlUrl,omitempty"`

	//
	// The type of VAST ad that this redirects to. This attribute is required.
	//
	VastRedirectType *VastRedirectType `xml:"vastRedirectType,omitempty" json:"vastRedirectType,omitempty"`

	//
	// The duration of the VAST ad in milliseconds. This attribute is required.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// The IDs of the companion creatives that are associated with this creative. This attribute is
	// optional.
	//
	CompanionCreativeIds []int64 `xml:"companionCreativeIds,omitempty" json:"companionCreativeIds,omitempty"`

	//
	// A map from {@code ConversionEvent} to a list of URLs that will be pinged when the event
	// happens. This attribute is optional.
	//
	TrackingUrls []*ConversionEvent_TrackingUrlsMapEntry `xml:"trackingUrls,omitempty" json:"trackingUrls,omitempty"`

	//
	// An ad tag URL that will return a preview of the VAST XML response specific to this creative.
	// This attribute is read-only.
	//
	VastPreviewUrl string `xml:"vastPreviewUrl,omitempty" json:"vastPreviewUrl,omitempty"`

	//
	// The SSL compatibility scan result for this creative.
	//
	// <p>This attribute is read-only and determined by Google.
	//
	SslScanResult *SslScanResult `xml:"sslScanResult,omitempty" json:"sslScanResult,omitempty"`

	//
	// The manual override for the SSL compatibility of this creative.
	//
	// <p>This attribute is optional and defaults to {@link SslManualOverride#NO_OVERRIDE}.
	//
	SslManualOverride *SslManualOverride `xml:"sslManualOverride,omitempty" json:"sslManualOverride,omitempty"`

	//
	// Whether the 3rd party VAST XML points to an audio ad. When true, {@link
	// VastRedirectCreative#size} will always be 1x1.
	//
	IsAudio bool `xml:"isAudio,omitempty" json:"isAudio,omitempty"`
}

type VideoCreative struct {
	*BaseVideoCreative

	//
	// A URL that points to the source media that will be used for transcoding.
	//
	VideoSourceUrl string `xml:"videoSourceUrl,omitempty" json:"videoSourceUrl,omitempty"`
}

type VideoMetadata struct {

	//
	// The scalable type of the asset. This attribute is required.
	//
	ScalableType *ScalableType `xml:"scalableType,omitempty" json:"scalableType,omitempty"`

	//
	// The duration of the asset in milliseconds. This attribute is required.
	//
	Duration int32 `xml:"duration,omitempty" json:"duration,omitempty"`

	//
	// The bit rate of the asset in kbps. If the asset can play at a range of bit rates (such as an
	// Http Live Streaming video), then set the bit rate to zero and populate the minimum and maximum
	// bit rate instead.
	//
	BitRate int32 `xml:"bitRate,omitempty" json:"bitRate,omitempty"`

	//
	// The minimum bitrate of the video in kbps. Only set this if the asset can play at a range of bit
	// rates.
	//
	MinimumBitRate int32 `xml:"minimumBitRate,omitempty" json:"minimumBitRate,omitempty"`

	//
	// The maximum bitrate of the video in kbps. Only set this if the asset can play at a range of bit
	// rates.
	//
	MaximumBitRate int32 `xml:"maximumBitRate,omitempty" json:"maximumBitRate,omitempty"`

	//
	// The size (width and height) of the asset. This attribute is required.
	//
	Size *Size `xml:"size,omitempty" json:"size,omitempty"`

	//
	// The mime type of the asset. This attribute is required.
	//
	MimeType *MimeType `xml:"mimeType,omitempty" json:"mimeType,omitempty"`

	//
	// The delivery type of the asset. This attribute is required.
	//
	DeliveryType *VideoDeliveryType `xml:"deliveryType,omitempty" json:"deliveryType,omitempty"`

	//
	// The codecs of the asset. This attribute is optional and defaults to an empty list.
	//
	Codecs []string `xml:"codecs,omitempty" json:"codecs,omitempty"`
}

type VideoRedirectAsset struct {
	*RedirectAsset

	//
	// Metadata related to the asset. This attribute is required.
	//
	Metadata *VideoMetadata `xml:"metadata,omitempty" json:"metadata,omitempty"`
}

type VideoRedirectCreative struct {
	*BaseVideoCreative

	//
	// The video creative assets.
	//
	VideoAssets []*VideoRedirectAsset `xml:"videoAssets,omitempty" json:"videoAssets,omitempty"`

	//
	// The high quality mezzanine video asset.
	//
	MezzanineFile *VideoRedirectAsset `xml:"mezzanineFile,omitempty" json:"mezzanineFile,omitempty"`
}

type CreativeServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Creates new {@link Creative} objects.
	*/
	CreateCreatives(request *CreateCreatives) (*CreateCreativesResponse, error)

	CreateCreativesContext(ctx context.Context, request *CreateCreatives) (*CreateCreativesResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Gets a {@link CreativePage} of {@link Creative} objects that satisfy the given {@link
	   Statement#query}. The following fields are supported for filtering:

	   <table>
	   <tr>
	   <th scope="col">PQL Property</th> <th scope="col">Object Property</th>
	   </tr>
	   <tr>
	   <td>{@code id}</td>
	   <td>{@link Creative#id}</td>
	   </tr>
	   <tr>
	   <td>{@code name}</td>
	   <td>{@link Creative#name}</td>
	   </tr>
	   <tr>
	   <td>{@code advertiserId}</td>
	   <td>{@link Creative#advertiserId}</td>
	   </tr>
	   <tr>
	   <td>{@code width}</td>
	   <td>{@link Creative#size}</td>
	   </tr>
	   <tr>
	   <td>{@code height}</td>
	   <td>{@link Creative#size}</td>
	   </tr>
	   <tr>
	   <td>{@code lastModifiedDateTime}</td>
	   <td>{@link Creative#lastModifiedDateTime}</td>
	   </tr>
	   </table>
	*/
	GetCreativesByStatement(request *GetCreativesByStatement) (*GetCreativesByStatementResponse, error)

	GetCreativesByStatementContext(ctx context.Context, request *GetCreativesByStatement) (*GetCreativesByStatementResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Performs action on {@link Creative} objects that match the given {@link Statement#query}.
	*/
	PerformCreativeAction(request *PerformCreativeAction) (*PerformCreativeActionResponse, error)

	PerformCreativeActionContext(ctx context.Context, request *PerformCreativeAction) (*PerformCreativeActionResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Updates the specified {@link Creative} objects.
	*/
	UpdateCreatives(request *UpdateCreatives) (*UpdateCreativesResponse, error)

	UpdateCreativesContext(ctx context.Context, request *UpdateCreatives) (*UpdateCreativesResponse, error)
}

type creativeServiceInterface struct {
	client *soap.Client
}

func NewCreativeServiceInterface(client *soap.Client) CreativeServiceInterface {
	return &creativeServiceInterface{
		client: client,
	}
}

func (service *creativeServiceInterface) CreateCreativesContext(ctx context.Context, request *CreateCreatives) (*CreateCreativesResponse, error) {
	response := new(CreateCreativesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeServiceInterface) CreateCreatives(request *CreateCreatives) (*CreateCreativesResponse, error) {
	return service.CreateCreativesContext(
		context.Background(),
		request,
	)
}

func (service *creativeServiceInterface) GetCreativesByStatementContext(ctx context.Context, request *GetCreativesByStatement) (*GetCreativesByStatementResponse, error) {
	response := new(GetCreativesByStatementResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeServiceInterface) GetCreativesByStatement(request *GetCreativesByStatement) (*GetCreativesByStatementResponse, error) {
	return service.GetCreativesByStatementContext(
		context.Background(),
		request,
	)
}

func (service *creativeServiceInterface) PerformCreativeActionContext(ctx context.Context, request *PerformCreativeAction) (*PerformCreativeActionResponse, error) {
	response := new(PerformCreativeActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeServiceInterface) PerformCreativeAction(request *PerformCreativeAction) (*PerformCreativeActionResponse, error) {
	return service.PerformCreativeActionContext(
		context.Background(),
		request,
	)
}

func (service *creativeServiceInterface) UpdateCreativesContext(ctx context.Context, request *UpdateCreatives) (*UpdateCreativesResponse, error) {
	response := new(UpdateCreativesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *creativeServiceInterface) UpdateCreatives(request *UpdateCreatives) (*UpdateCreativesResponse, error) {
	return service.UpdateCreativesContext(
		context.Background(),
		request,
	)
}
